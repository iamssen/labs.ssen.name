<?xml version="1.0" encoding="UTF-8"?>
<xml>
<articles>


<article>
<title><![CDATA[3D Plan 형태의 Triangle Vertex Drawing]]></title>
<url><![CDATA[/Flash/Graphics/3D%20Plan%20%E1%84%92%E1%85%A7%E1%86%BC%E1%84%90%E1%85%A2%E1%84%8B%E1%85%B4%20Triangle%20Vertex%20Drawing.html]]></url>
<content><![CDATA[<h1 id="3d-triangle-drawing">3D Triangle Drawing</h1>

<p>비트맵 Skew 등에 사용할 수 있는 Graphics 기능 이다. </p>

<ul>
<li><p><code>vertices</code> 삼각형을 그릴 수 있는 x 또는 y 좌표 쌍을 가지게 된다</p>

<ul>
<li>삼각형 두개를 합친 사각형 맵은 아래와 같다 </li>
<li>0 : top left x</li>
<li>1 : top left y</li>
<li>2 : top right x</li>
<li>3 : top right y</li>
<li>4 : bottom left x</li>
<li>5 : bottom left y</li>
<li>6 : bottom right x</li>
<li>7 : bottom right y </li>
</ul></li>
<li><p><code>indices</code> 삼각형을 그려나가는 순서 정보를 가진다. <code>vertices</code> 를 참고하는 순서를 지정하게 된다. </p>

<ul>
<li>예를 들어 사각형을 그리는데 사용될 수 있는 <code>[0, 1, 2, 1, 3, 2]</code> 는 <code>vertices</code> 의 <code>[(top left 0, 1), (top right 2, 3), (bottom left 4, 5), (top right 2, 3), (bottom right 6, 7), (bottom left 4, 5)]</code> 의 순서로 삼각형을 맵핑하라는 의미를 지니게 된다</li>
</ul></li>
<li><p><code>uvData</code> 삼각형의 bitmap x 또는 y 좌표를 지정한다. <code>vertices</code> 와 1 대 1 로 매치되어서, 해당 x, y 좌표와 bitmap 의 어떤 x, y 좌표를 매칭시킬지를 지정하게 된다</p>

<ul>
<li>bitmap texture 의 width, height 를 비율적으로 1 로 보고, 각각 맵핑할 좌표를 맵핑한다</li>
</ul></li>
</ul>

<p>이와 같은 구성을 Skew 형태의 사각형으로 만들면 아래와 같이 된다</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">// triangle setting. top left, top right, bottom left, bottom right
var vertices : Vector.&lt;Number&gt; = new &lt;Number&gt;[0, 0, 80, 20, 0, 100, 80, 80];

// tl --&gt; tr --&gt; dl , tr --&gt; dr --&gt; dl 순서로 삼각형을 그림
var indices : Vector.&lt;int&gt; = new &lt;int&gt;[0, 1, 2, 1, 3, 2];

// vertices 와 1 : 1 매치, bitmapData.width 를 1 로 취급 100분율로 bitmapData 를 맵핑
var uvData : Vector.&lt;Number&gt; = new &lt;Number&gt;[0, 0, 1, 0, 0, 1, 1, 1];

// draw
graphics.beginBitmapFill(bitmapData, null, false, true);
graphics.lineStyle(1, 0x000000);
graphics.drawTriangles(vertices, indices, uvData, TriangleCulling.NONE);
graphics.endFill();
</code></pre></div>]]></content>
</article>



<article>
<title><![CDATA[Alfred Workflow를 사용해서 스크린캡쳐하기]]></title>
<url><![CDATA[/Web/Mac/Alfred%20Workflow%E1%84%85%E1%85%B3%E1%86%AF%20%E1%84%89%E1%85%A1%E1%84%8B%E1%85%AD%E1%86%BC%E1%84%92%E1%85%A2%E1%84%89%E1%85%A5%20%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%8F%E1%85%A2%E1%86%B8%E1%84%8E%E1%85%A7%E1%84%92%E1%85%A1%E1%84%80%E1%85%B5.html]]></url>
<content><![CDATA[<h1 id="문제점-:-mac의-기본-스크린캡쳐는-이름-바꾸기가-더럽게-힘들다">문제점 : Mac의 기본 스크린캡쳐는 이름 바꾸기가 더럽게 힘들다</h1>

<p>Mac의 스크린캡쳐 이름 지정은 <code>/System/Library/CoreServices/SystemUIServer.app/Contents/Resources/ko.lproj/ScreenCapture.strings</code>을 수정해서 바꿀 수 있지만 문제는 이 스크린캡쳐 이름 이라는게 <code>%@ %@ %@</code> 뭐 이딴 식으로 지정되어 있고, 이 인자들이 기본 Locale에 영향을 받기 때문에 사용자가 원하는대로 컨트롤을 하기가 힘들다.</p>

<p>그래서 왠만하면 비활성 시키고 <code>screencapture</code> 명령어를 사용하는 것이 더 좋다.</p>

<h1 id="해결-방법-:-alfred-workflow로-screencapture-사용하기">해결 방법 : Alfred Workflow로 <code>screencapture</code> 사용하기</h1>

<blockquote>
<p>Alfred Workflow 기능은 Alfred 2.0 + Powerpack 유저만 사용 가능하다. (유료) </p>

<ol>
<li>Alfred Workflow의 <strong>Hot Key Trigger</strong>로 단축키를 감지하는 역할을 하고</li>
<li>Alfred Workflow의 <strong>Script Action</strong>으로 특정한 파일 이름으로 저장되도록 <code>screencapture</code>를 실행시키게 된다.</li>
</ol>

<p>Alfred Workflow에서는 <strong>Hot Key Trigger</strong>와 <strong>Script Action</strong> 기능을 사용하는 것 뿐이고, 이는 Automator 등 여러가지 우회할 수 있는 방법이 있긴 할듯 싶다.</p>
</blockquote>

<h2 id="기본-기능들-비활성">기본 기능들 비활성</h2>

<p><img src="../../../files/captures/20130927/081034.png" alt="스크린샷 단축키 비활성화"></p>

<p>우선 환경설정에서 스크린샷 단축키를 빼준다. (뭐 겹치지 않는 다른 단축키를 사용할 예정이라면 딱히 뺄 필요는 없다)</p>

<h2 id="alfred-workflow-제작">Alfred Workflow 제작</h2>

<p><img src="../../../files/captures/20130927/080135.png" alt="Alfred 환경설정에서 워크플로우 탭 선택"></p>

<p><img src="../../../files/captures/20130927/080157.png" alt="새 워크플로우 만들기"></p>

<p><code>Alfred Preferences / Workflows</code>에 들어가서 새로운 Workflow를 만든다. (좌측 하단 + 버튼을 눌러서 만든다)</p>

<p><img src="../../../files/captures/20130927/080213.png" alt="워크플로우 이름 입력"></p>

<p>Workflow 이름은 아무렇게나 지정하면 되고...</p>

<p><img src="../../../files/captures/20130927/080249.png" alt="단축키 트리거 만들기"></p>

<p>우측 상단에 있는 + 버튼을 눌러서 새로운 Hot Key Trigger를 만든다. (뭐 단축키 눌러서 실행되는 Workflow 이니깐...)</p>

<p><img src="../../../files/captures/20130927/080303.png" alt="단축키 설정"></p>

<p><img src="../../../files/captures/20130927/080321.png" alt="단축키의 실행방식 선택"></p>

<p>스크린샷을 찍을 때 사용할 단축키를 입력해주고, 단축키 위에서 오른쪽 클릭을 해서 Trigger behaviour를 <code>Pass through modifier keys</code>로 바꿔준다.</p>

<p><img src="../../../files/captures/20130927/080341.png" alt="스크립트 생성"></p>

<p><img src="../../../files/captures/20130927/080425.png" alt="Bash스크립트 추가"></p>

<p>다시 우측 상단에 있는 + 버튼을 눌러서 Script Action을 만들어준다.</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">export ymd=$(date +%Y%m%d)
export hms=$(date +%H%M%S)
export content_home=/Users/ssen/Dropbox/Contents/
export screen_home=/Users/ssen/Dropbox/Contents/files/captures
mkdir -p $screen_home/$ymd
screencapture -i $screen_home/$ymd/$hms.png
python -c &quot;import os.path; print os.path.relpath(&#39;$screen_home/$ymd/$hms.png&#39;, &#39;$content_home&#39;)&quot; | pbcopy
</code></pre></div>
<p>대충 설명하자면 뭐 이런 의미를 가진 Script이다.</p>

<ul>
<li><code>export ymd=$(date +%Y%m%d)</code> 현재 년도를 $ymd에 저장</li>
<li><code>export hms=$(date +%H%M%S)</code> 현재 시간을 $hms에 저장</li>
<li><code>export content_home=/Users/ssen/Dropbox/Contents/</code> 상대 경로 지정의 최상위</li>
<li><code>export screen_home=/Users/ssen/Dropbox/Contents/files/captures</code> 이미지들이 저장될 위치</li>
<li><code>mkdir -p $screen_home/$ymd</code> 

<ul>
<li><code>mkdir -p</code> 디렉토리를 만든다</li>
<li><code>$screen_home/$ymd</code> {이미지 저장 경로}/{년월일} 경로의 디렉토리</li>
</ul></li>
<li><code>screencapture -i $screen_home/$ymd/$hms.png</code>

<ul>
<li><code>screencapture -i</code> 스크린캡쳐를 실행</li>
<li><code>$screen_home/$ymd/$hms.png</code> 만들어질 이미지는 {이미지 저장 경로}/{년월일}/{시간}.png 로 저장된다</li>
</ul></li>
<li><code>python -c &quot;import os.path; print os.path.relpath(&#39;$screen_home/$ymd/$hms.png&#39;, &#39;$content_home&#39;)&quot; | pbcopy</code>

<ul>
<li><code>python -c &quot;import os.path; print os.path.relpath(&#39;$screen_home/$ymd/$hms.png&#39;, &#39;$content_home&#39;)&quot;</code> 

<ul>
<li>{이미지 저장 경로} - {상대 경로 최상위}의 경로를 출력</li>
</ul></li>
<li><code>| pbcopy</code> 출력된 문자를 클립보드에 저장한다</li>
</ul></li>
</ul>

<p><img src="../../../files/captures/20130927/080509.png" alt="단축키와 스크립트 연결하기"></p>

<p>마지막으로 만들어진 두 개의 액션 (Hot Key Trigger와 Script Action)을 이어준다.</p>

<p>위와 같이 해놓으면 이제 기존 스크린캡쳐 작업과 동일한 방식으로 <strong>내가 원하는 위치에 원하는 이름으로</strong> 스크린캡쳐를 생성시킬 수 있게 된다.</p>
]]></content>
</article>



<article>
<title><![CDATA[Async]]></title>
<url><![CDATA[/Web/Async.html]]></url>
<content><![CDATA[<h1 id="async.js"><a href="https://github.com/caolan/async">Async.js</a></h1>

<p>javascript 의 비동기 로직을 좀 더 손쉽게 작성할 수 있게 해주는 library</p>

<p>Node.js와 Browser 에서 모두 사용 가능한 <strong>Javascript 언어를 보강하는</strong> 형태의 라이브러리이다.</p>

<p>install <code>npm install async</code></p>

<h1 id="control-flow-의-선택">Control Flow 의 선택</h1>

<ul>
<li>같은 task 를 반복 실행한다

<ul>
<li>조건에 의해 실행을 멈춘다

<ul>
<li><code>whilst(function test, function task, function callback = null) : void</code></li>
</ul></li>
<li>특정 숫자만큼 반복 실행한다

<ul>
<li>task 들을 일괄 실행한다

<ul>
<li><code>times(int loop, function task, function callback = null) : void</code></li>
</ul></li>
<li>task 들을 순차적으로 실행한다 (부하 분산)

<ul>
<li><code>timesSeries(int loop, function task, function callback = null) : void</code></li>
</ul></li>
</ul></li>
</ul></li>
<li>다른 task 들을 실행한다

<ul>
<li>task 간에 의존성이 있다 (즉 task1 의 실행 결과가 task2 에 영향을 미친다)

<ul>
<li><code>waterfall([function] tasks, function callback = null) : void</code></li>
</ul></li>
<li>task 간에 연계가 없다

<ul>
<li>task 들을 순차적으로 실행한다 (부하 분산)

<ul>
<li><code>series([function] tasks, function callback = null) : void</code></li>
</ul></li>
<li>task 들을 일괄 실행한다 (비동기 작업 일괄 실행 후 수집)

<ul>
<li>부하 걱정이 없다

<ul>
<li><code>parallel([function] tasks, function callback = null) : void</code></li>
</ul></li>
<li>부하 걱정이 조금 있어서 실행 갯수 제한을 둔다

<ul>
<li><code>parallelLimit([function] tasks, int limit, function callback = null) : void</code></li>
</ul></li>
</ul></li>
</ul></li>
</ul></li>
<li>비동기 형태의 계산기를 만든다

<ul>
<li><code>compose(function...) : function</code></li>
</ul></li>
</ul>

<h2 id="whilst(function-test,-function-task,-function-callback-=-null)">whilst(function test, function task, function callback = null)</h2>

<p>Closure</p>

<ul>
<li><code>@test = function() : boolean</code></li>
<li><code>@task = function(callback) : void</code>

<ul>
<li><code>@callback = function(error) : void</code></li>
</ul></li>
<li><code>@callback = function(error) : void</code></li>
</ul>

<p>Sample</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">f = 0
fmax = 4

test = -&gt;
    ++f &lt; fmax
task = (callback) -&gt;
    timeout 100, -&gt;
        callback()

async.whilst test, task, (error) -&gt;
    console.log(&#39;complete&#39;, error) 
</code></pre></div>
<p>Console Log</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">complete undefined
</code></pre></div>
<h2 id="times(int-loop,-function-task,-function-callback-=-null)">times(int loop, function task, function callback = null)</h2>

<p>Closure</p>

<ul>
<li><code>@task = function(int current, function next) : void</code>

<ul>
<li><code>@next = function(error, * result) : void</code></li>
</ul></li>
<li><code>@callback = function(error, [*] results) : void</code></li>
</ul>

<p>Sample</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">task = (current, next) -&gt;
    console.log(current, getTimer())
    timeout 100, -&gt;
        next(null, &quot;value#{current}&quot;)

async.times 4, task, (error, results) -&gt;
    console.log(error, results)
</code></pre></div>
<p>Console Log</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">0 1373420408136
1 1373420408138
2 1373420408138
3 1373420408139
null [ &#39;value0&#39;, &#39;value1&#39;, &#39;value2&#39;, &#39;value3&#39; ]
</code></pre></div>
<h2 id="timesseries(int-loop,-function-task,-function-callback-=-null)">timesSeries(int loop, function task, function callback = null)</h2>

<p>구성은 <code>times</code> 랑 동일하다</p>

<p>다만, task 들이 일괄 실행되는 <code>times</code> 와 다르게, 순차적으로 실행됨을 확인할 수 있다</p>

<p>Console Log</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">0 1373420497804
1 1373420497919
2 1373420498029
3 1373420498136
null [ &#39;value0&#39;, &#39;value1&#39;, &#39;value2&#39;, &#39;value3&#39; ]
</code></pre></div>
<h2 id="waterfall([function]-tasks,-function-callback-=-null)">waterfall([function] tasks, function callback = null)</h2>

<p>task1 에서 뽑아낸 데이터로 task2 를 실행시키는 형태의 작업을 할때 유리하다</p>

<p>Closure</p>

<ul>
<li><code>@tasks = [function(function callback) : void]</code>

<ul>
<li><code>@callback = function(error, * result) : void</code></li>
</ul></li>
<li><code>@callback = function(error, * result) : void</code></li>
</ul>

<p>Sample</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">tasks = []
tasks.push (callback) -&gt;
    console.log(&#39;1&#39;, new Date().getTime())
    timeout 100, -&gt; callback(null, &#39;a&#39;)
tasks.push (str, callback) -&gt;
    console.log(&#39;2&#39;, new Date().getTime())
    timeout 100, -&gt; callback(null, str + &#39;b&#39;)
tasks.push (str, callback) -&gt;
    console.log(&#39;3&#39;, new Date().getTime())
    timeout 100, -&gt; callback(null, str + &#39;c&#39;)

async.waterfall tasks, (err, result) -&gt;
    console.log(&#39;waterfall&#39;, result)
</code></pre></div>
<p>Console Log</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">1 1373423682924
2 1373423683026
3 1373423683133
waterfall abc
</code></pre></div>
<h2 id="series([function]-tasks,-function-callback-=-null)">series([function] tasks, function callback = null)</h2>

<p>Clouser</p>

<ul>
<li><code>@tasks = { function(callback) : void }</code>

<ul>
<li><code>@callback = function(error, * result) : void</code></li>
</ul></li>
<li><code>@callback = function(error, {result}) : void</code></li>
</ul>

<p>Sample</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">tasks =
    one: (callback) -&gt;
        timeout 100, -&gt;
            console.log(&#39;1&#39;, new Date().getTime())
            callback(null, 1)
    two: (callback) -&gt;
        timeout 100, -&gt;
            console.log(&#39;2&#39;, new Date().getTime())
            callback(null, 2)
    three: (callback) -&gt;
        timeout 100, -&gt;
            console.log(&#39;3&#39;, new Date().getTime())
            callback(null, 3)

async.series tasks, (err, result) -&gt;
    console.log(&#39;series&#39;, result)
</code></pre></div>
<p>Console Log</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">1 1373423974581
2 1373423974695
3 1373423974808
series { one: 1, two: 2, three: 3 }
</code></pre></div>
<p>혹은 아래와 같이 Array 형태로 구성 할 수도 있다. 다만, 이 경우에는 명시적인 result 를 받기가 어렵기 때문에 단순 iteration 이 필요한 경우에 사용하는 것이 좋다 (Cakefile 의 exec 구성 같은 경우)</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">tasks = []
tasks.push (callback) -&gt; timeout 100, callback
tasks.push (callback) -&gt; timeout 100, callback
tasks.push (callback) -&gt; timeout 100, callback
tasks.push (callback) -&gt; timeout 100, callback

async.series tasks, (err, result) -&gt;
    console.log(&#39;series&#39;, result)

    # series [ undefined, undefined, undefined, undefined ]
</code></pre></div>
<h2 id="parallel([function]-tasks,-function-callback-=-null)">parallel([function] tasks, function callback = null)</h2>

<p>구성은 <code>series</code> 와 동일하다. 다만, 실행 시점을 보면 모든 task 들이 일괄 실행되는 것을 확인할 수 있다.</p>

<p>Sample</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">async.parallel tasks, (err, result) -&gt;
    console.log(&#39;parallel&#39;, result)
</code></pre></div>
<p>Console Log</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">1 1373424144986
2 1373424144993
3 1373424144993  // 세개의 task 가 일괄 실행된다
parallel { one: 1, two: 2, three: 3 }
</code></pre></div>
<h2 id="parallellimit([function]-tasks,-int-limit,-function-callback-=-null)">parallelLimit([function] tasks, int limit, function callback = null)</h2>

<p>역시 <code>series</code> 와 동일하다. 실행 시점을 보면 task 들이 limit 로 넣은 갯수만큼 끊어서 실행되는 것을 확인할 수 있다.</p>

<p>Sample</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">async.parallelLimit tasks, 2, (err, result) -&gt;
    console.log(&#39;parallelLimit&#39;, result)
</code></pre></div>
<p>Console Log</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">1 1373424329082
2 1373424329090 // 여기까지 limit = 2 개의 task 만 끊어서 실행된다
3 1373424329199
parallelLimit { one: 1, two: 2, three: 3 }
</code></pre></div>
<h2 id="compose(function...)-:-function">compose(function...) : function</h2>

<p>다른 Control Flow 들과는 틀리게 숫자 계산을 위한 비동기 계산식을 만드는 역할을 가지고 있다</p>

<p>Closure</p>

<ul>
<li><code>@functions = function(int n, function callback) : void</code>

<ul>
<li><code>@callback = function(error, int result)</code></li>
</ul></li>
<li><code>return function = function(error, int result) : void</code></li>
</ul>

<p>Sample</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">add1 = (n, callback) -&gt;
    console.log(n, &#39;+ 1&#39;, n + 1, new Date().getTime())
    timeout 100, -&gt; callback(null, n + 1)

mul3 = (n, callback) -&gt;
    console.log(n, &#39;* 3&#39;, n * 3, new Date().getTime())
    timeout 100, -&gt; callback(null, n * 3)

# (mul3, add1) = add1 &gt; mul3 순서로 계산이 진행된다
calc = async.compose(mul3, add1)

calc 4, (err, result) -&gt;
    console.log(&#39;compose&#39;, err, result)
</code></pre></div>
<p>Console Log</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">4 &#39;+ 1&#39; 5 1373424677734
5 &#39;* 3&#39; 15 1373424677850
compose null 15
</code></pre></div>]]></content>
</article>



<article>
<title><![CDATA[Azure에 Ubuntu Server Virtual Machine 만들기]]></title>
<url><![CDATA[/Server/Windows%20Azure/Azure%E1%84%8B%E1%85%A6%20Ubuntu%20Server%20Virtual%20Machine%20%E1%84%86%E1%85%A1%E1%86%AB%E1%84%83%E1%85%B3%E1%86%AF%E1%84%80%E1%85%B5.html]]></url>
<content><![CDATA[<h1 id="ssh-key-만들어두기">SSH Key 만들어두기</h1>

<p>그냥 비밀번호로 해도 되지만, 왠만하면 SSH Key를 사용해서 접속하는게 더 좋을듯 하니 만들어둔다. (왠지 그러면 더 좋을듯한 느낌이 든다...)</p>

<p>참조 : <a href="http://www.windowsazure.com/en-us/manage/linux/how-to-guides/ssh-into-linux/?fb=ko-kr">How to Use SSH with Linux on Windows Azure</a></p>

<ul>
<li><code>brew install openssl</code></li>
<li><code>openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout ssen.key -out ssen.pem</code></li>
<li>뭐 이것저것 물어보는데 대충 적어준다</li>
<li><code>chmod 600 ssen.key</code></li>
<li><code>openssl x509 -outform der -in ssen.pem -out ssen.cer</code></li>
</ul>

<blockquote>
<p>사실 서버쟁이가 아니라서 이걸로 뭘 어쩐다는건지, 뭔가 더 좋다는건지는 잘 모르겠다.<br>
일단 ssh 접속할 때 비밀번호 입력을 하지 않아서 좋다는데,<br>
어짜피 sudo 열나게 찍어야 하는 Linux의 특성 상, 로그인 비밀번호 하나 없앤다고 무슨 의미인지도 모르겠고...<br>
자동화 Script 같은거 짤 때 도움이 되려나... </p>
</blockquote>

<h1 id="azure에-vm-생성하기">Azure에 VM 생성하기</h1>

<p>대충 SSH Key가 준비되었으면 Azure에 VM을 만들어준다. 사실 Azure 서비스 자체가 워낙 쉽게 잘 만들어져 있는데다가, 한국어 까지 지원해서 설명 따위 필요없이 그냥 대충 쓰다보면 알게 되는 거지만, 좀 설명을 해보자면...</p>

<p><img src="../../../files/captures/20130927/082749.png" alt="VM서비스를 gallery에서 골라준다"></p>

<p>대충 &quot;새로 만들기&quot;에서 &quot;가상 컴퓨터&quot;를 고르고, &quot;갤러리에서&quot; 옵션을 선택해서 새로운 VM을 만든다.</p>

<p><img src="../../../files/captures/20130927/082802.png" alt="우분투를 선택"></p>

<p>개인적으로 쓰기 좋은 Ubuntu를 선택해 주고, (이도 저도 Ubuntu가 제일 편하더라...)</p>

<p><img src="../../../files/captures/20130927/082911.png" alt="가상 컴퓨터 설정"></p>

<p>자신의 서비스에 맞는 가상 컴퓨터를 구성한다.</p>

<p><img src="../../../files/captures/20130927/082946.png" alt="SSL인증서 업로드"></p>

<p>아까 만들어둔 SSH 인증서 파일을 올려주고,</p>

<p><img src="../../../files/captures/20130927/083009.png" alt="비밀번호 지정"></p>

<p>비밀번호를 지정해준다.</p>

<p><img src="../../../files/captures/20130927/083028.png" alt="클라우드 설정"></p>

<p>클라우드 설정을 해준다. 사용할 도메인 등을 입력하면 끝...</p>

<p>좀 만드는데 시간이 걸리는데, 작업이 완료되면 아래처럼 리스트를 볼 수 있다.</p>

<p><img src="../../../files/captures/20130927/083551.png" alt="서비스 리스트"></p>

<p>대충 VM이 만들어지면 보안을 위해 SSH의 외부 port를 바꿔준다.</p>

<p><img src="../../../files/captures/20130927/084213.png" alt="SSH Endpoint 변경"></p>

<p>port 변경이 완료되면 아래처럼 정보를 확인할 수 있다.</p>

<h1 id="vm에-접속하기">VM에 접속하기</h1>

<p>VM 페이지에서 간단하게 정보들을 확인 한 다음</p>

<p>아까 외부 SSH port를 <code>8755</code>로 변경했으니 터미널에서 아래와 같이 접속이 가능.</p>

<p><code>ssh -i /your-key-path/ssen.key -p 8755 ssen@ssen.cloudapp.net</code></p>

<p>단... OSX 기본 터미널을 사용하거나, iTerm2에서 위처럼 명령어로 접속할 경우 한글이 작살나는 경우가 있으므로, iTerm2에서 Profile을 생성해서 바로 접속하도록 한다. (이상하게 이러면 한글이 작살나지 않더라...)</p>
]]></content>
</article>



<article>
<title><![CDATA[BarSeries에 추가적인 요소들을 그리기]]></title>
<url><![CDATA[/Flash/Flex%20Chart/BarSeries%E1%84%8B%E1%85%A6%20%E1%84%8E%E1%85%AE%E1%84%80%E1%85%A1%E1%84%8C%E1%85%A5%E1%86%A8%E1%84%8B%E1%85%B5%E1%86%AB%20%E1%84%8B%E1%85%AD%E1%84%89%E1%85%A9%E1%84%83%E1%85%B3%E1%86%AF%E1%84%8B%E1%85%B3%E1%86%AF%20%E1%84%80%E1%85%B3%E1%84%85%E1%85%B5%E1%84%80%E1%85%B5.html]]></url>
<content><![CDATA[<h1 id="barseries의-그리는-시점-잡아내기">BarSeries의 그리는 시점 잡아내기</h1>
<div class="highlight"><pre><code class="language-text" data-lang="text">    override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void
    {
        super.updateDisplayList(unscaledWidth, unscaledHeight);

        // loop code copied from BarSeries
        var barSeriesItems:Array=renderData.filteredCache;
        var rect:Rectangle;
        var f:int, fmax:int;

        if (transitionRenderData &amp;&amp; transitionRenderData.elementBounds) {
            var elementBounds:Array=transitionRenderData.elementBounds;

            f=-1;
            fmax=barSeriesItems.length;
            while (++f &lt; fmax) {
                rect=elementBounds[f];
                // draw(f, rect, v);
            }
        }
        else {
            var bo:Number=renderData.renderedHalfWidth + renderData.renderedYOffset;
            var to:Number=-renderData.renderedHalfWidth + renderData.renderedYOffset;

            rect=new Rectangle();

            f=-1;
            fmax=barSeriesItems.length;
            while (++f &lt; fmax) {
                var v:BarSeriesItem=barSeriesItems[f];

                rect.top=v.y + to;
                rect.bottom=v.y + bo;
                rect.right=v.x;
                if (!isNaN(v.min)) {
                    rect.left=v.min;
                }
                else {
                    rect.left=renderData.renderedBase;
                }

                // draw(f, rect, v);
            }
        }
    }
</code></pre></div>
<p><code>BarSeries</code>에서 복사해서 정리한 코드이다. 위와 같이 </p>
]]></content>
</article>



<article>
<title><![CDATA[Bitmap Drawing 할 때의 Matrix 계산]]></title>
<url><![CDATA[/Flash/Graphics/Bitmap%20Drawing%20%E1%84%92%E1%85%A1%E1%86%AF%20%E1%84%84%E1%85%A2%E1%84%8B%E1%85%B4%20Matrix%20%E1%84%80%E1%85%A8%E1%84%89%E1%85%A1%E1%86%AB.html]]></url>
<content><![CDATA[<h1 id="bitmap-drawing-할-때의-matrix-계산">Bitmap Drawing 할 때의 Matrix 계산</h1>

<ul>
<li><p>이동</p>

<ul>
<li><code>tx=100</code></li>
<li><code>ty=100</code></li>
</ul></li>
<li><p>크기</p>

<ul>
<li><code>a=canvas.width / bitmap.width</code> 리사이즈 해야하는 <code>canvas.width</code> 를 소스의 <code>bitmap.width</code> 로 나눈 비율치 </li>
<li><code>d=canvas.height / bitmap.height</code></li>
</ul></li>
</ul>
]]></content>
</article>



<article>
<title><![CDATA[Bitwise State Flag]]></title>
<url><![CDATA[/Programming/Bitwise%20State%20Flag.html]]></url>
<content><![CDATA[<h1 id="bitwise-연산을-이용한-state-flag-modeling">Bitwise 연산을 이용한 State Flag Modeling</h1>

<ol>
<li>가벼운 데이터를 통해서 state flag 작업을 할 수 있다</li>
<li>일반적으로 조건식이 길어지는 다중 조건을 간단하게 표현할 수 있다</li>
</ol>

<h1 id="bitwise-연산자-다루기">Bitwise 연산자 다루기</h1>

<h3 id="state-상수의-선언">State 상수의 선언</h3>
<div class="highlight"><pre><code class="language-text" data-lang="text">public static const A:uint = 1 &lt;&lt; 0; // 0
public static const B:uint = 1 &lt;&lt; 1; // 10
public static const C:uint = 1 &lt;&lt; 2; // 100
public static const C:uint = 1 &lt;&lt; 3; // 1000
</code></pre></div>
<p>상수는 shift 연산자를 통해서 선언해준다. </p>

<p>각 상수에 해당하는 2진수 상태가 발생되게 된다. (boolean 배열과 같다고 볼 수 있다)</p>

<h3 id="상태를-on-으로-돌리기">상태를 on 으로 돌리기</h3>
<div class="highlight"><pre><code class="language-text" data-lang="text">flags = 0;
flags |= D; // 2진수로 1000 이 된다
flags |= A | B; // 2진수가 합쳐져서 1011 이 된다
</code></pre></div>
<p>연산자 <code>|</code> (Bitwise OR) 를 사용한다.</p>

<p>Bitwise OR 는 아래와 같이 <code>0 | 1 = 1</code> 의 특징을 가진다.</p>

<ul>
<li><code>0 | 0 = 0</code>, <code>10 | 00 = 10</code></li>
<li><code>1 | 0 = 1</code>, <code>10 | 01 = 11</code></li>
<li><code>1 | 1 = 1</code>, <code>11 | 00 = 11</code></li>
</ul>

<h3 id="상태를-off-로-돌리기">상태를 off 로 돌리기</h3>
<div class="highlight"><pre><code class="language-text" data-lang="text">// flags 가 2진수로 1011 상태라고 할 때
flags &amp;= ~A; // 2진수로 1010 이 된다
flags &amp;= ~(B | D); // 2진수로 0000 이 된다
</code></pre></div>
<p>연산자 <code>&amp;</code> (Bitwise AND) 와 <code>~</code> (Bitwise NOT) 을 사용한다.</p>

<p>Bitwise AND 는 아래와 같이 <code>1 | 1 = 1</code> 의 특징을 가진다.</p>

<ul>
<li><code>0 | 0 = 0</code>, <code>10 | 00 = 00</code></li>
<li><code>1 | 0 = 0</code>, <code>10 | 01 = 00</code></li>
<li><code>1 | 1 = 1</code>, <code>11 | 10 = 10</code></li>
</ul>

<p>Bitwise AND  와 NOT 이 합쳐지면 아래와 같은 특징을 가지게 된다</p>

<ul>
<li><code>1011 &amp; ~0011 = 1000</code></li>
<li><code>1011 &amp; ~0111 = 1000</code></li>
<li><code>1011 &amp; ~1000 = 0011</code></li>
</ul>

<h3 id="상태의-or-검색-(항목들-중-하나라도-on-상태인지-확인)">상태의 or 검색 (항목들 중 하나라도 on 상태인지 확인)</h3>
<div class="highlight"><pre><code class="language-text" data-lang="text">// flags 가 2진수로 1011 상태라고 할 때
flags &amp; (A | B) !== 0; // 2진수로 0011 이 되기 때문에, true 가 나온다
flags &amp; C !== 0; // 2진수로 0000 이 되기 때문에, false 가 나온다
</code></pre></div>
<p>Bitwise AND 를 사용한다. 공식은 <code>flags &amp; mask !== 0</code> 이 된다.</p>

<ul>
<li><code>1011 &amp; 0001 = 0001</code></li>
<li><code>1011 &amp; 0100 = 0000</code></li>
</ul>

<p>과 같이 되기 때문에 <code>!== 0</code> 을 검색함 으로서 or 검색을 수행할 수 있다 </p>

<h3 id="상태의-and-검색-(모든-항목들이-on-상태인지-확인)">상태의 and 검색 (모든 항목들이 on 상태인지 확인)</h3>
<div class="highlight"><pre><code class="language-text" data-lang="text">// flags 가 2진수로 1011 상태이고 
flags &amp; 1011 === flags; // 결과는 1011 이기 때문에 true 가 된다
flags &amp; 1001 === flags; // 결과는 1001 이기 때문에 false 가 된다
</code></pre></div>
<p>Bitwise AND 로 계산한 다음, flags 와 대입한다.</p>

<p><code>flags &amp; mask === flags</code> 이기 때문에 flags 가 켜져 있는 모든 상태들이 다 켜져 있어야만 대입시 true 가 된다</p>

<h1 id="case-별-modeling">Case 별 Modeling</h1>

<h2 id="지속적인-상태의-확인이-필요할-때">지속적인 상태의 확인이 필요할 때</h2>
<div class="highlight"><pre><code class="language-text" data-lang="text">class Model {
    public static const A:uint=1 &lt;&lt; 0;
    public static const B:uint=1 &lt;&lt; 1;
    public static const C:uint=1 &lt;&lt; 2;
    public static const D:uint=1 &lt;&lt; 3;

    private var flags:uint=0;

    public function remove(mask:uint):void {
        flags&amp;=~mask;
    }

    public function clear():void {
        flags=0;
    }

    public function add(mask:uint):void {
        flags|=mask;
    }

    public function test(mask:uint):Boolean {
        return (flags &amp; mask) !== 0;
    }
}
</code></pre></div>
<p>invalidation 처럼 지속적인 상태의 확인이 필요한 경우 사용할 수 있다</p>

<ul>
<li><code>model.add(A)</code> 상태 A 를 킨다 <code>model.add(A|B|C)</code> 상태 A, B, C 를 킨다</li>
<li><code>model.remove(A)</code> 상태 A 를 끈다 <code>model.remove(A|B|C)</code> 상태 A, B, C 를 끈다</li>
<li><code>model.clear()</code> 모든 상태들을 끈다</li>
<li><code>model.test(A)</code> 상태 A 가 켜져 있는지 확인 <code>model.test(A|B|C)</code> 상태 A, B, C 중 하나라도 켜져 있는지 확인 (or 검색)</li>
</ul>

<h2 id="통합-완료의-확인이-필요할-때">통합 완료의 확인이 필요할 때</h2>
<div class="highlight"><pre><code class="language-text" data-lang="text">class Model {
    public static const A:uint=1 &lt;&lt; 0;
    public static const B:uint=1 &lt;&lt; 1;
    public static const C:uint=1 &lt;&lt; 2;
    public static const D:uint=1 &lt;&lt; 3;

    private var flags:uint=0;

    public function complete(mask:uint):void {
        flags|=mask;
    }

    public function clear():void {
        flags=0;
    }

    public function test():Boolean {
        var c:uint=A | B | C | D;
        return (c &amp; flags) === c;
    }
}
</code></pre></div>
<p>여러 event 확인 처럼 상태들이 모두 완료 되었는지 확인하거나 할 때 사용할 수 있다</p>

<ul>
<li><code>model.complete(A)</code> 작업 A 가 완료 되었음을 알린다 <code>model.complete(A|B)</code> 작업 A 와 B 가 완료 되었음을 알린다</li>
<li><code>model.test()</code> 작업 A, B, C, D 가 모두 완료 되었는지 확인한다</li>
<li><code>model.clear()</code> 모든 작업을 미완료 상태로 바꾼다 </li>
</ul>
]]></content>
</article>



<article>
<title><![CDATA[Category Key 가 있는 Object List 를 Tree 형태로 변환]]></title>
<url><![CDATA[/Programming/Category%20Key%20%E1%84%80%E1%85%A1%20%E1%84%8B%E1%85%B5%E1%86%BB%E1%84%82%E1%85%B3%E1%86%AB%20Object%20List%20%E1%84%85%E1%85%B3%E1%86%AF%20Tree%20%E1%84%92%E1%85%A7%E1%86%BC%E1%84%90%E1%85%A2%E1%84%85%E1%85%A9%20%E1%84%87%E1%85%A7%E1%86%AB%E1%84%92%E1%85%AA%E1%86%AB.html]]></url>
<content><![CDATA[<h1 id="category-key-가-있는-object-list-를-tree-형태로-변환">Category Key 가 있는 Object List 를 Tree 형태로 변환</h1>

<p><code>{cate1:&quot;a&quot;, cate2:&quot;b&quot;, cate3:&quot;c&quot;, value:123}</code> 과 같은 형태의 데이터를</p>

<ul>
<li>a

<ul>
<li>b

<ul>
<li>c

<ul>
<li><code>{cate1:&quot;a&quot;, cate2:&quot;b&quot;, cate3:&quot;c&quot;, value:123}</code></li>
</ul></li>
</ul></li>
</ul></li>
</ul>

<p>와 같은 tree 형태로 만들어준다.</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">function multipleKeyDatasToTree(itr:Itr, categoryKeys:Vector.&lt;String&gt;, root:TreeNode=null, appendLastNodeWith:Function=null):TreeNode {
    if (root === null) {
        root=new TreeNode;
    }

    var node:TreeNode;
    var source:Object;
    var key:String;

    var f:int;
    var fmax:int;

    while (itr.hasNext()) {
        source=itr.next();

        f=-1;
        fmax=categoryKeys.length;
        node=root;

        while (++f &lt; fmax) {
            key=source[categoryKeys[f]];

            if (node.find(key) === null) {
                node.appendNode(new TreeNode(key));
            }

            node=node.find(key) as TreeNode;

            if (f === fmax - 1) {
                if (appendLastNodeWith === null) {
                    node.appendNode(new TreeNode(source));
                } else {
                    appendLastNodeWith(node, source);
                }
            }
        }
    }

    return root;
}
</code></pre></div>]]></content>
</article>



<article>
<title><![CDATA[Chart Data]]></title>
<url><![CDATA[/Flash/Flex%20Chart/Chart%20Data.html]]></url>
<content><![CDATA[<h1 id="차트의-데이터-표현">차트의 데이터 표현</h1>

<h2 id="차트별-표현-가능한-데이터들">차트별 표현 가능한 데이터들</h2>
<div class="highlight"><pre><code class="language-text" data-lang="text">// 사용할 데이터 구조
{Category: &quot;Category1&quot;, Time: &quot;Time1&quot;, Data1: 820, Data2: 650, Data3: 450, Data4: 400},
{Category: &quot;Category2&quot;, Time: &quot;Time2&quot;, Data1: 330, Data2: 430, Data3: 600, Data4: 460},
{Category: &quot;Category3&quot;, Time: &quot;Time3&quot;, Data1: 700, Data2: 600, Data3: 350, Data4: 200},
{Category: &quot;Category4&quot;, Time: &quot;Time4&quot;, Data1: 80, Data2: 190, Data3: 990, Data4: 300},
{Category: &quot;Category5&quot;, Time: &quot;Time5&quot;, Data1: 240, Data2: 280, Data3: 500, Data4: 340}
</code></pre></div>
<div class="unpadding">
    <embed src="images/ChartAndDataTypes.swf" width="100%" height="600"/>
</div>

<p><a href="https://github.com/iamssen/SSenKit.AS3/blob/1eda5c2811b484159a0a2d1d359edd86d37a3f1c/src/ssen/displaykit/chart/Chart__Example.mxml">swf source code</a></p>

<h3 id="x-=-label,-y-=-data-형태의-차트들">X = Label, Y = Data 형태의 차트들</h3>

<ul>
<li>X 축은 시간의 흐름, 그룹 등의 문자열로 된 구분을 줄 수 있다</li>
<li>Y 축은 데이터의 수치적 표현을 줄 수 있다</li>
</ul>

<p><img src="images/ChartArea.png" alt="AreaChart">
<img src="images/ChartLine.png" alt="LineChart">
<img src="images/ChartColumn.png" alt="ColumnChart">
<img src="images/ChartCandlestick.png" alt="CandlestickChart"></p>

<h3 id="x-=-data,-y-=-data-형태의-차트들">X = Data, Y = Data 형태의 차트들</h3>

<ul>
<li>XY 모두 데이터의 수치적 표현을 주고, XY point 에 구분을 줄 수 있다</li>
</ul>

<p><img src="images/ChartBubble.png" alt="BubbleChart">
<img src="images/ChartPlot.png" alt="PlotChart"></p>

<h3 id="기타-형태의-차트들">기타 형태의 차트들</h3>

<p><img src="images/ChartBar.png" alt="BarChart">
<img src="images/ChartPie.png" alt="PieChart"></p>

<h3 id="차트의-혼합">차트의 혼합</h3>

<p>같은 유형을 가진 차트들의 경우 기본적으로 Series 를 혼합해서 사용할 수 있다.</p>

<p>다만, Chart Component 가 Series 에 대한 스타일 지원을 해주지 않아서 맞춰줘야 하는 경우가 있다.</p>

<h2 id="axis">Axis</h2>

<p>기본적으로 차트에서 자동으로 지정되지만, Candlestick 과 같이 X Axis 상에 Label Data 를 알 수 없거나 하는 경우 차트를 보강하는 형태로 사용할 수 있거나,</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;s:Panel title=&quot;Candlestick Chart Example&quot; width=&quot;600&quot; height=&quot;100%&quot;&gt;
    &lt;mx:CandlestickChart showDataTips=&quot;true&quot; dataProvider=&quot;{data}&quot; width=&quot;100%&quot; height=&quot;100%&quot;&gt;
        &lt;mx:horizontalAxis&gt;
            &lt;!-- X Axis 상에 기본적으로 등장하지 않는 Label 을 등장시킬 수 있다 --&gt;
            &lt;mx:CategoryAxis categoryField=&quot;Category&quot;/&gt;
        &lt;/mx:horizontalAxis&gt;

        &lt;mx:series&gt;
            &lt;mx:CandlestickSeries openField=&quot;Data2&quot; highField=&quot;Data1&quot; closeField=&quot;Data4&quot; lowField=&quot;Data3&quot;/&gt;
        &lt;/mx:series&gt;
    &lt;/mx:CandlestickChart&gt;
&lt;/s:Panel&gt;
</code></pre></div>
<p><img src="images/ChartCandlestick2.png" alt="Candlestick And X Axis Label"></p>

<p>숫자형 Axis 의 minimum, maximum 수치를 조절하거나 할 수 있다.</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;s:Panel title=&quot;Bubble Axis Control Example&quot; width=&quot;600&quot; height=&quot;100%&quot;&gt;
    &lt;mx:BubbleChart showDataTips=&quot;true&quot; dataProvider=&quot;{data}&quot; width=&quot;100%&quot; height=&quot;100%&quot;&gt;
        &lt;mx:horizontalAxis&gt;
            &lt;mx:LinearAxis minimum=&quot;200&quot; maximum=&quot;700&quot;/&gt;
        &lt;/mx:horizontalAxis&gt;

        &lt;mx:verticalAxis&gt;
            &lt;mx:LinearAxis minimum=&quot;200&quot; maximum=&quot;700&quot;/&gt;
        &lt;/mx:verticalAxis&gt;

        &lt;mx:series&gt;
            &lt;mx:BubbleSeries xField=&quot;Data1&quot; yField=&quot;Data2&quot; radiusField=&quot;Data3&quot;/&gt;
        &lt;/mx:series&gt;
    &lt;/mx:BubbleChart&gt;
&lt;/s:Panel&gt;
</code></pre></div>
<p><img src="images/ChartBubble2.png" alt="Bubble And XY Axis Minimum Maximum Value Control"></p>

<p>특별히 차트의 데이터에 거스르지 않고, 부족한 데이터를 보강하는 측면에서 사용하면 좋을 듯 싶다.</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;s:Panel title=&quot;Candlestick Chart Example&quot; width=&quot;600&quot; height=&quot;100%&quot;&gt;
    &lt;mx:CandlestickChart showDataTips=&quot;true&quot; dataProvider=&quot;{data}&quot; width=&quot;100%&quot; height=&quot;100%&quot;&gt;
        &lt;mx:horizontalAxisRenderers&gt;
            &lt;mx:AxisRenderer axis=&quot;{cshaxis}&quot; canDropLabels=&quot;true&quot;/&gt;
        &lt;/mx:horizontalAxisRenderers&gt;

        &lt;mx:series&gt;
            &lt;mx:CandlestickSeries openField=&quot;Data2&quot; highField=&quot;Data1&quot; closeField=&quot;Data4&quot; lowField=&quot;Data3&quot;&gt;
                &lt;mx:horizontalAxis&gt;
                    &lt;mx:CategoryAxis id=&quot;cshaxis&quot; categoryField=&quot;Category&quot;/&gt;
                &lt;/mx:horizontalAxis&gt;
            &lt;/mx:CandlestickSeries&gt;
        &lt;/mx:series&gt;
    &lt;/mx:CandlestickChart&gt;
&lt;/s:Panel&gt;
</code></pre></div>
<p>좀 더 커스텀이 많이 필요한 경우 Series 에 Axis 를 직접적으로 지정하고, Renderer 를 통해 컨트롤 할 수도 있지만, 정확한 사용법을 이해하고 사용하는 편이 좋을듯 싶다. (아직 정확한 사용법들을 알지 못하겠다)</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;s:Panel title=&quot;Candlestick Chart Example&quot; width=&quot;600&quot; height=&quot;100%&quot;&gt;
    &lt;mx:CandlestickChart showDataTips=&quot;true&quot; dataProvider=&quot;{data}&quot; width=&quot;100%&quot; height=&quot;100%&quot;&gt;
        &lt;mx:horizontalAxisRenderers&gt;
            &lt;mx:AxisRenderer axis=&quot;{cshaxis}&quot; canDropLabels=&quot;true&quot;/&gt;
        &lt;/mx:horizontalAxisRenderers&gt;

        &lt;mx:series&gt;
            &lt;mx:CandlestickSeries openField=&quot;Data2&quot; highField=&quot;Data1&quot; closeField=&quot;Data4&quot; lowField=&quot;Data3&quot;&gt;
                &lt;mx:horizontalAxis&gt;
                    &lt;mx:CategoryAxis id=&quot;cshaxis&quot; categoryField=&quot;Category&quot;/&gt;
                &lt;/mx:horizontalAxis&gt;
            &lt;/mx:CandlestickSeries&gt;
        &lt;/mx:series&gt;
    &lt;/mx:CandlestickChart&gt;
&lt;/s:Panel&gt;
</code></pre></div>
<h3 id="axis-classes">Axis Classes</h3>

<ul>
<li><code>CategoryAxis</code> 기본 문자 분류형 Axis

<ul>
<li><code>categoryField : String</code> Axis 에 등장할 Label 에 어떤 데이터를 출력할지 지정한다.</li>
</ul></li>
<li><code>LinearAxis</code> 기본 숫자형 Axis

<ul>
<li><code>minimum : Number</code> 차트에 등장할 최소 데이터를 지정. 음수 지정이 가능</li>
<li><code>maximum : Number</code> 차트에 등장할 최대 데이터를 지정</li>
</ul></li>
<li><code>LogAxis</code> 0, 10, 100, 1000…  과 같은 Log 형태 숫자형 Axis (약간 특수하게 사용됨)

<ul>
<li><a href="http://help.adobe.com/ko_KR/FlashPlatform/reference/actionscript/3/mx/charts/LogAxis.html">http://help.adobe.com/ko_KR/FlashPlatform/reference/actionscript/3/mx/charts/LogAxis.html</a></li>
<li><code>minimum : Number</code></li>
<li><code>maximum : Number</code></li>
</ul></li>
<li><code>DateTimeAxis</code>

<ul>
<li><a href="http://help.adobe.com/ko_KR/FlashPlatform/reference/actionscript/3/mx/charts/DateTimeAxis.html">http://help.adobe.com/ko_KR/FlashPlatform/reference/actionscript/3/mx/charts/DateTimeAxis.html</a></li>
<li><code>minimum : Date</code></li>
<li><code>maximum : Date</code></li>
<li><code>parseFunction : Function(data:Object) : Date</code> 데이터가 Date 가 아닌 경우 Date 로 해석시켜줄 function 을 지정</li>
</ul></li>
</ul>

<p>LogAxis 는 아래와 같은 형태로 사용된다. 8000 을 입력해도 근사치의 Log 값으로 치환된다.</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;s:Panel title=&quot;Log Axis Example&quot; width=&quot;600&quot; height=&quot;100%&quot;&gt;
    &lt;mx:LineChart showDataTips=&quot;true&quot; dataProvider=&quot;{data}&quot; width=&quot;100%&quot; height=&quot;100%&quot;&gt;
        &lt;mx:horizontalAxis&gt;
            &lt;mx:CategoryAxis categoryField=&quot;Time&quot;/&gt;
        &lt;/mx:horizontalAxis&gt;

        &lt;mx:verticalAxis&gt;
            &lt;mx:LogAxis minimum=&quot;10&quot; maximum=&quot;8000&quot;/&gt;
        &lt;/mx:verticalAxis&gt;

        &lt;mx:series&gt;
            &lt;mx:LineSeries yField=&quot;Data1&quot; form=&quot;segment&quot; displayName=&quot;Data1&quot; /&gt;
        &lt;/mx:series&gt;
    &lt;/mx:LineChart&gt;
&lt;/s:Panel&gt;
</code></pre></div>
<p><img src="images/ChartLine2.png" alt="LogAxis Sample"></p>

<h3 id="axis-정렬과-이중-axis-지정">Axis 정렬과 이중 Axis 지정</h3>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;s:Panel title=&quot;Line Chart Example&quot; width=&quot;600&quot; height=&quot;100%&quot;&gt;
    &lt;mx:LineChart showDataTips=&quot;true&quot; dataProvider=&quot;{data}&quot; width=&quot;100%&quot; height=&quot;100%&quot;&gt;
        &lt;mx:horizontalAxis&gt;
            &lt;mx:CategoryAxis id=&quot;linechartxaxis&quot; categoryField=&quot;Time&quot;/&gt;
        &lt;/mx:horizontalAxis&gt;

        &lt;mx:verticalAxis&gt;
            &lt;mx:LinearAxis id=&quot;linechartvaxis&quot;/&gt;
        &lt;/mx:verticalAxis&gt;

        &lt;mx:horizontalAxisRenderers&gt;
            &lt;mx:AxisRenderer placement=&quot;top&quot; axis=&quot;{linechartxaxis}&quot;/&gt;
        &lt;/mx:horizontalAxisRenderers&gt;

        &lt;mx:verticalAxisRenderers&gt;
            &lt;mx:AxisRenderer placement=&quot;right&quot; axis=&quot;{linechartvaxis}&quot;/&gt;
        &lt;/mx:verticalAxisRenderers&gt;

        &lt;mx:series&gt;
            &lt;mx:LineSeries yField=&quot;Data1&quot; form=&quot;segment&quot; displayName=&quot;Data1&quot;/&gt;
        &lt;/mx:series&gt;
    &lt;/mx:LineChart&gt;
&lt;/s:Panel&gt;
</code></pre></div>
<p><img src="images/ChartAxis.png" alt="Axis 위치 변경"></p>

<p>Axis 의 위치를 바꿀 수 있다. 필요한 경우 사용이 가능하다.</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;s:Panel title=&quot;Multiple Axes Example&quot; width=&quot;600&quot; height=&quot;100%&quot;&gt;
    &lt;mx:ColumnChart showDataTips=&quot;true&quot; dataProvider=&quot;{data}&quot; width=&quot;100%&quot; height=&quot;100%&quot;&gt;
        &lt;mx:horizontalAxis&gt;
            &lt;mx:CategoryAxis categoryField=&quot;Category&quot;/&gt;
        &lt;/mx:horizontalAxis&gt;

        &lt;mx:verticalAxisRenderers&gt;
            &lt;mx:AxisRenderer placement=&quot;left&quot; axis=&quot;{lvax}&quot;/&gt;
            &lt;mx:AxisRenderer placement=&quot;right&quot; axis=&quot;{rvax}&quot;/&gt;
        &lt;/mx:verticalAxisRenderers&gt;

        &lt;mx:series&gt;
            &lt;mx:ColumnSeries xField=&quot;Category&quot; yField=&quot;Data3&quot; displayName=&quot;Data3&quot;&gt;
                &lt;mx:verticalAxis&gt;
                    &lt;mx:LinearAxis id=&quot;lvax&quot;/&gt;
                &lt;/mx:verticalAxis&gt;
            &lt;/mx:ColumnSeries&gt;
            &lt;mx:LineSeries yField=&quot;Data1&quot; form=&quot;segment&quot; displayName=&quot;Data1&quot;&gt;
                &lt;mx:verticalAxis&gt;
                    &lt;mx:LinearAxis id=&quot;rvax&quot;/&gt;
                &lt;/mx:verticalAxis&gt;
            &lt;/mx:LineSeries&gt;
        &lt;/mx:series&gt;
    &lt;/mx:ColumnChart&gt;
&lt;/s:Panel&gt;
</code></pre></div>
<p><img src="images/ChartAxis2.png" alt="이중 Axis"></p>

<p>좌우가 다른 Axis 를 이중으로 사용할 수 있다. 좀 더 복합적인 데이터를 표현할때 사용이 가능하다.</p>

<p>사용시에 주의가 필요하다.</p>

<p>좌우 Axis 의 수치가 다르기 때문에 같은 값 (좌측에 기준하는 800 과 우측에 기준하는 800) 이 다른 지점을 가르킬 수 있지만, 서로 다른 수를 가르키는 것은 혼란을 주게 될 소지가 높다.</p>

<p>데이터들을 서로 수치 연동이 되는 (좌측은 실제 데이터 수치, 우측은 퍼센티지 수치) 형태로 지정하거나, 혹은 Axis 수치를 컨트롤 해서 컬럼차트에서 좀 떨어진 상단에 라인차트를 놓는다거나 (컬럼차트는 순수익, 라인차트는 총 자산) 식으로 컨트롤 해야 차트의 의미를 살릴 수 있다</p>
]]></content>
</article>



<article>
<title><![CDATA[Chart Series 의 실시간 추가, 삭제]]></title>
<url><![CDATA[/Flash/Flex%20Chart/Chart%20Series%20%E1%84%8B%E1%85%B4%20%E1%84%89%E1%85%B5%E1%86%AF%E1%84%89%E1%85%B5%E1%84%80%E1%85%A1%E1%86%AB%20%E1%84%8E%E1%85%AE%E1%84%80%E1%85%A1,%20%E1%84%89%E1%85%A1%E1%86%A8%E1%84%8C%E1%85%A6.html]]></url>
<content><![CDATA[<h1 id="chart.series">Chart.series</h1>

<p>기본적으로 <code>Series</code> 객체는 논리적 모델이 아닌, <code>DisplayObject</code> 이므로 여러 Chart 에서 공용으로 사용하긴 힘들다. 이 문제는 하나의 <code>SeriesControl</code> 을 작성해서 여러 <code>Chart</code> 를 조정하는 것을 어렵게 한다.</p>

<h1 id="stackedseries-error">StackedSeries Error</h1>

<p>간단하게 설정되어 있는 <code>Series</code> 들을 <code>Array</code> 에 묶어서 <code>Chart</code> 에 넣어주는 것 만으로 <code>Series</code> 에 대한 설정은 간단하게 처리할 수 있다. 하지만, 문제점은 <code>StackedSeries</code> 가 <strong>추가, 삭제 이후 렌더링이 정상적으로 되질 않는</strong> 문제점을 가지고 있다.</p>

<blockquote>
<p>이 문제는 현재까지 시도해본 invalidation 말고, 다른 시도를 통해 해결 가능한지 알아볼 필요가 있다.</p>
</blockquote>

<h1 id="논리적-series-factory-model-만들기">논리적 Series Factory Model 만들기</h1>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;SeriesModel id=&quot;model&quot;&gt;
    &lt;ColumnSeriesModel xfield=&quot;&quot; yfield=&quot;&quot; labelField=&quot;&quot; visible=&quot;false&quot; /&gt;
    &lt;!-- Stacked Model 은 최상위 SeriesModel 에만 추가 가능하다 --&gt;
    &lt;StackedColumnModel visible=&quot;true&quot;&gt;
        &lt;ColumnSeriesModel /&gt;
        &lt;ColumnSeriesModel /&gt;
    &lt;/StackedColumnModel&gt;
    ...
&lt;/SeriesFactoryModel&gt;

&lt;!-- 여러 Chart 에서 공유가 가능하다 --&gt;
&lt;mx:ColumnChart series={model.activatedSeries} /&gt;
&lt;mx:ColumnChart series={model.activatedSeries} /&gt;

&lt;!-- Legend + CheckBox List --&gt;
&lt;SeriesActivator model=&quot;{model}&quot; /&gt;

&lt;!-- Legend --&gt;
&lt;SeriesLegend model=&quot;{model}&quot; /&gt;
</code></pre></div>
<p>논리적 Model 을 기준으로 해서 확장 Component 들을 구성하면 꽤 괜찮은 구성이 될 것 같다.</p>
]]></content>
</article>



<article>
<title><![CDATA[Chart Style]]></title>
<url><![CDATA[/Flash/Flex%20Chart/Chart%20Style.html]]></url>
<content><![CDATA[<h1 id="차트-모양-컨트롤">차트 모양 컨트롤</h1>

<h2 id="references">References</h2>

<h3 id="style">Style</h3>

<ul>
<li><a href="http://help.adobe.com/en_US/flex/using/WS2db454920e96a9e51e63e3d11c0bf69084-7c65.html#WS2db454920e96a9e51e63e3d11c0bf65816-7ff2">Using strokes with chart controls</a></li>
<li><a href="http://help.adobe.com/en_US/flex/using/WS2db454920e96a9e51e63e3d11c0bf65816-7ff4.html">Formatting axis lines</a></li>
<li><a href="http://help.adobe.com/en_US/flex/using/WS2db454920e96a9e51e63e3d11c0bf65816-7fff.html#WS2db454920e96a9e51e63e3d11c0bf65816-7ff9">Applying chart styles</a></li>
<li><a href="http://help.adobe.com/en_US/flex/using/WS2db454920e96a9e51e63e3d11c0bf65816-7ff6.html">Setting padding properties</a></li>
<li><a href="http://help.adobe.com/en_US/flex/using/WS2db454920e96a9e51e63e3d11c0bf69084-7c4f.html">Using multiple axes</a></li>
<li><a href="http://help.adobe.com/en_US/flex/using/WS2db454920e96a9e51e63e3d11c0bf69084-7c6c.html">Using multiple data series</a></li>
<li><a href="http://livedocs.adobe.com/flex/3/html/help.html?content=charts_displayingdata_11.html">Stacking Chart</a></li>
<li><a href="http://help.adobe.com/en_US/flex/using/WS2db454920e96a9e51e63e3d11c0bf69084-7e69.html">Using filters with chart controls</a></li>
</ul>

<h3 id="label">Label</h3>

<ul>
<li><a href="http://help.adobe.com/en_US/flex/using/WS2db454920e96a9e51e63e3d11c0bf69084-7c24.html#WS2db454920e96a9e51e63e3d11c0bf69084-7c4e">Defining axis labels</a></li>
</ul>

<h3 id="interaction">Interaction</h3>

<ul>
<li><a href="http://help.adobe.com/en_US/flex/using/WS2db454920e96a9e51e63e3d11c0bf69084-7bfd.html">Selecting chart items</a></li>
</ul>

<h2 id="cheat-sheet">Cheat Sheet</h2>

<ul>
<li>Common

<ul>
<li><code>Chart.showDataTips</code>, <code>Chart.showAllDataTips</code></li>
<li><a href="http://help.adobe.com/en_US/flex/using/WS2db454920e96a9e51e63e3d11c0bf65816-7ff6.html">Box Model</a>

<ul>
<li><code>Chart.paddingLeft</code>, <code>Chart.paddingRight</code>, <code>Chart.paddingTop</code>, <code>Chart.paddingBottom</code></li>
<li><code>Chart.gutterLeft</code>, <code>Chart.gutterRight</code>, <code>Chart.gutterTop</code>, <code>Chart.gutterBottom</code></li>
<li><code>AxisRenderer.labelGap</code></li>
</ul></li>
</ul></li>
<li>Axis (PieChart 를 제외한 모든 Axis 기반의 Chart 들에 공통적으로 사용되는 Axis 에 관련된 모양들) 

<ul>
<li><a href="http://help.adobe.com/en_US/flex/using/WS2db454920e96a9e51e63e3d11c0bf65816-7ff4.html">Axis Line</a>

<ul>
<li><code>AxisRenderer.showLine</code></li>
<li><code>AxisRenderer.axisStroke</code></li>
</ul></li>
<li><a href="http://help.adobe.com/en_US/flex/using/WS2db454920e96a9e51e63e3d11c0bf69084-7c19.html">Axis Tick</a>

<ul>
<li><code>AxisRenderer.tickStroke</code></li>
<li><code>AxisRenderer.minorTickStroke</code></li>
<li><code>AxisRenderer.tickPlacement</code></li>
<li><code>AxisRenderer.minorTickPlacement</code></li>
<li><code>AxisRenderer.tickLength</code></li>
</ul></li>
<li>Axis Background Line</li>
<li>Axis Value Label

<ul>
<li><code>AxisRenderer.labelAlign</code></li>
</ul></li>
<li>Axis Title Label</li>
</ul></li>
<li>Axis Chart Box Model

<ul>
<li>Padding</li>
<li>Gutter</li>
</ul></li>
<li>Legend

<ul>
<li>Legend Icon</li>
<li>Legend Label</li>
</ul></li>
<li>Area</li>
<li>Line

<ul>
<li><code>LineSeries.itemRenderer</code></li>
<li><code>LineSeries.stroke</code></li>
<li><code>LineSeries.lineStroke</code></li>
<li><code>LineSeries.fill</code></li>
<li><code>LineChart.seriesFilters</code></li>
</ul></li>
<li>Bubble</li>
<li>Bar

<ul>
<li><code>BarSeries.stroke</code></li>
<li><code>BarSeries.fill</code></li>
</ul></li>
<li>Column

<ul>
<li><code>ColumnSeries.labelField</code>, <code>ColumnSeries.labelFunction(item:ChartItem, series:Series):String</code></li>
<li><code>ColumnSeries.stroke</code></li>
<li><code>ColumnSeries.fill</code>, <code>ColumnSeries.fills</code>, <code>ColumnSeries.fillFunction(item:ChartItem, index:Number):IFill</code></li>
</ul></li>
<li>Plot</li>
<li>Candlestick</li>
<li>Pie

<ul>
<li>links

<ul>
<li><a href="http://help.adobe.com/en_US/flex/using/WS2db454920e96a9e51e63e3d11c0bf6568f-8000.html">Using pie charts</a></li>
</ul></li>
<li>Pie Wedge

<ul>
<li><code>PieChart.explodeRadius</code>, <code>PieSeries.perWedgeExplodeRadius</code> <a href="http://help.adobe.com/en_US/flex/using/WS2db454920e96a9e51e63e3d11c0bf6568f-8000.html#WS2db454920e96a9e51e63e3d11c0bf6568f-7ff1">파이 간 간격이 얼마나 벌어지게 할지 여부</a></li>
<li><code>PieChart.innerRadius</code></li>
</ul></li>
<li>Pie Wedge Label

<ul>
<li><code>PieChart.labelField</code>, <code>PieChart.labelFunction(field:Sring, index:Number, item:Object, percentValue:Number):String</code> Pie Data Field</li>
<li><code>PieChart.labelPosition = none | callout | inside | outside | insideWithCallout</code>

<ul>
<li><code>calloutGap</code></li>
<li><code>calloutStroke</code></li>
<li><code>insideLabelSizeLimit</code></li>
</ul></li>
</ul></li>
<li>Pie Wedge Color

<ul>
<li><code>PieChart.selectionMode</code></li>
<li><code>PieSeries.fills</code></li>
<li><code>PieChart.filters</code>, <code>PieSeries.filters</code></li>
</ul></li>
<li>Pie Wedge Selecting</li>
</ul></li>
</ul>

<h2 id="classes">Classes</h2>

<ul>
<li><a href="http://help.adobe.com/ko_KR/FlashPlatform/reference/actionscript/3/mx/charts/chartClasses/ChartBase.html">ChartBase</a>

<ul>
<li><a href="http://help.adobe.com/ko_KR/FlashPlatform/reference/actionscript/3/mx/charts/chartClasses/CartesianChart.html">CartesianChart</a>

<ul>
<li><a href="http://help.adobe.com/ko_KR/FlashPlatform/reference/actionscript/3/mx/charts/AreaChart.html">AreaChart</a></li>
<li><a href="http://help.adobe.com/ko_KR/FlashPlatform/reference/actionscript/3/mx/charts/LineChart.html">LineChart</a></li>
<li><a href="http://help.adobe.com/ko_KR/FlashPlatform/reference/actionscript/3/mx/charts/BarChart.html">BarChart</a></li>
<li><a href="http://help.adobe.com/ko_KR/FlashPlatform/reference/actionscript/3/mx/charts/ColumnChart.html">ColumnChart</a></li>
<li><a href="http://help.adobe.com/ko_KR/FlashPlatform/reference/actionscript/3/mx/charts/BubbleChart.html">BubbleChart</a></li>
<li><a href="http://help.adobe.com/ko_KR/FlashPlatform/reference/actionscript/3/mx/charts/PlotChart.html">PlotChart</a></li>
<li><a href="http://help.adobe.com/ko_KR/FlashPlatform/reference/actionscript/3/mx/charts/CandlestickChart.html">CandlestickChart</a></li>
<li><a href="http://help.adobe.com/ko_KR/FlashPlatform/reference/actionscript/3/mx/charts/HLOCChart.html">HLOCChart</a></li>
</ul></li>
<li><a href="http://help.adobe.com/ko_KR/FlashPlatform/reference/actionscript/3/mx/charts/chartClasses/PolarChart.html">PolarChart</a>

<ul>
<li><a href="http://help.adobe.com/ko_KR/FlashPlatform/reference/actionscript/3/mx/charts/PieChart.html">PieChart</a></li>
</ul></li>
</ul></li>
</ul>
]]></content>
</article>



<article>
<title><![CDATA[Chrome에서 URL Protocol이 작동되지 않을때]]></title>
<url><![CDATA[/Web/Browsers/Chrome%E1%84%8B%E1%85%A6%E1%84%89%E1%85%A5%20URL%20Protocol%E1%84%8B%E1%85%B5%20%E1%84%8C%E1%85%A1%E1%86%A8%E1%84%83%E1%85%A9%E1%86%BC%E1%84%83%E1%85%AC%E1%84%8C%E1%85%B5%20%E1%84%8B%E1%85%A1%E1%86%AD%E1%84%8B%E1%85%B3%E1%86%AF%E1%84%84%E1%85%A2.html]]></url>
<content><![CDATA[<h1 id="chrome-오류">Chrome 오류</h1>

<p>몇 몇 이유로 웹 브라우저와 앱을 연결하는 몇 가지 Protocol이 작동하지 않는 상황들이 있다.<br>
일반적으로 Chrome에서 해당 Protocol을 맨 처음 작동을 시킬 때 거부를 눌렀거나 했을 경우 발생한다.</p>

<p>문제는 다시 재질문을 하지도 않고, Setting 에서도 관련 항목을 찾기가 힘들다.</p>

<h1 id="local-state-위치">Local State 위치</h1>

<ul>
<li><code>~/Library/Application Support/Google/Chrome/Local State</code> Mac</li>
<li><code>~/.config/google-chrome/Local State</code> Linux</li>
<li><code>C:\Users\${USERNAME}\AppData\Local\Google\Chrome\Local State</code> Windows</li>
</ul>

<p>위의 파일에서 아래와 같은 라인을 찾음</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&quot;protocol_handler&quot;: { 
    &quot;excluded_schemes&quot;: { 
        &quot;afp&quot;: true, 
        &quot;data&quot;: true, 
        &quot;disk&quot;: true, 
        &quot;disks&quot;: true, 
        &quot;file&quot;: true, 
</code></pre></div>
<p>작동되지 않는 Protocol이 있는지 확인하고, 있으면 Chrome을 종료한 뒤에, 해당 라인을 지우거나 <code>false</code>로 고친 다음 앱을 재실행 시키면 해당 Protocol에 대한 질문을 한다.</p>
]]></content>
</article>



<article>
<title><![CDATA[ColumnChart Data Label 처리]]></title>
<url><![CDATA[/Flash/Flex%20Chart/ColumnChart%20Data%20Label%20%E1%84%8E%E1%85%A5%E1%84%85%E1%85%B5.html]]></url>
<content><![CDATA[<h1 id="columnchart-data-label-처리">ColumnChart data label 처리</h1>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;mx:verticalAxis&gt;
    &lt;mx:LinearAxis maximum=&quot;{maximumValue}&quot;/&gt;
&lt;/mx:verticalAxis&gt;
</code></pre></div>
<p>data 를 밀어넣어 주면서 data 의 최고값 이상을 계산해서 maximum 으로 넣어주면 위쪽이 잘리지 않게 된다</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">private function getMaximum(data:IList):int {
    var max:int=0;
    var obj:Object;
    var f:int=data.length;

    while (--f &gt;= 0) {
        obj=data.getItemAt(f);
        if (obj.value &gt; max) {
            max=obj.value;
        }
    }

    max+=(max / 4);

    return max;
}
</code></pre></div>
<p>대충 최고값의 1/4 정도를 더 올려주면 잘리는 현상은 없어진다</p>
]]></content>
</article>



<article>
<title><![CDATA[Data Binding]]></title>
<url><![CDATA[/Flash/Flex%20%E1%84%8B%E1%85%AF%E1%86%AB%E1%84%85%E1%85%A9%E1%86%AB/Data%20Binding.html]]></url>
<content><![CDATA[<h1 id="watch-binding">Watch Binding</h1>

<h2 id="{-}-를-사용하기"><code>{ }</code> 를 사용하기</h2>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;s:Label text=&quot;{instance.property}&quot; /&gt;
&lt;s:Label text=&quot;{instance.method()}&quot; /&gt;

&lt;fx:CurrencyFormatter id=&quot;usdFormatter&quot; precision=&quot;2&quot; currencySymbol=&quot;$&quot; alignSymbol=&quot;left&quot; /&gt;
&lt;s:Label text=&quot;usdFormatter.format(instance.property)}&quot; /&gt;
</code></pre></div>
<h2 id="fx:binding">fx:Binding</h2>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;fx:Binding source=&quot;source.property&quot; destination=&quot;instance.property&quot; /&gt;
</code></pre></div>
<h2 id="bindingutils">BindingUtils</h2>
<div class="highlight"><pre><code class="language-text" data-lang="text">// bindProperty() : ChangeWatcher
// ChangeWatcher.unwatch();
BindingUtils.bindProperty(instance, &quot;property&quot;, source, &quot;property&quot;);
</code></pre></div>
<h2 id="양방향-링크">양방향 링크</h2>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;!-- t1, t2 가 동일하게 적용된다 --&gt;
&lt;s:TextInput id=&quot;t1&quot; text=&quot;@{t2.text}&quot; /&gt;
&lt;s:TextInput id=&quot;t2&quot; /&gt;
</code></pre></div>
<h2 id="event-dispatch-type-설정">event dispatch type 설정</h2>
<div class="highlight"><pre><code class="language-text" data-lang="text">[Bindable(event=&quot;fooEvent&quot;)]
private function get foo():String {
    return &quot;foo&quot;;
}

private function fooChange():void {
    dispatchEvent(new Event(&quot;fooEvent&quot;));
}
</code></pre></div>
<p><code>{this.foo}</code> 를 통해 바인딩</p>

<h2 id="method-연결">method 연결</h2>
<div class="highlight"><pre><code class="language-text" data-lang="text">public function update(value:String):void {
    trace(value);
}
&lt;s:TextInput id=&quot;txt&quot; text=&quot;setter&quot; /&gt;

// bindSetter() : ChangeWatcher
BindingUtils.bindSetter(update, txt, &quot;text&quot;);
</code></pre></div>
<p><code>id=&quot;txt&quot;</code> 가 변경될 시에 <code>update()</code> 가 호출된다.</p>

<h1 id="bindsetter-를-통해서-binding-을-event-listener-처럼-활용하기">bindSetter 를 통해서 Binding 을 Event Listener 처럼 활용하기</h1>

<p>참고 : <a href="http://www.codeproject.com/KB/applications/FlexDataBindingTricks.aspx?display=Print">http://www.codeproject.com/KB/applications/FlexDataBindingTricks.aspx?display=Print</a></p>

<h2 id="도트-경로-사용하기">도트 경로 사용하기</h2>
<div class="highlight"><pre><code class="language-text" data-lang="text">// instance.a.b.c 가 바인딩 설정 된다.
// 그룹 감지가 아님...
BindingUtils.bindSetter(method, instance, [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]);
</code></pre></div>
<h2 id="getter-method-설정">getter method 설정</h2>
<div class="highlight"><pre><code class="language-text" data-lang="text">var reciver:Function = function (host:Object):String {
    return &quot;hello&quot; + host[&quot;prop1&quot;]+host[&quot;prop2&quot;]+host[&quot;prop3&quot;]+host[&quot;prop4&quot;];
}

BindingUtils.bindSetter(arrayedSetter, this, {name:&quot;prop1&quot;, getter:reciver});
BindingUtils.bindSetter(arrayedSetter, this, {name:&quot;prop2&quot;, getter:reciver});
BindingUtils.bindSetter(arrayedSetter, this, {name:&quot;prop3&quot;, getter:reciver});
BindingUtils.bindSetter(arrayedSetter, this, {name:&quot;prop4&quot;, getter:reciver});

---

private function arrayedSetter(...values):void
{
    trace(&quot;arrayedSetter&quot;, values);
}
</code></pre></div>
<h1 id="[bindable]-이-compiler-에서-해석되는-방식"><code>[Bindable]</code> 이 compiler 에서 해석되는 방식</h1>

<p>기본 <code>[Bindable] public var property:String;</code> 같이 선언된 variable 은 <code>mxmlc</code> 나 <code>compc</code> 같은 compiler 에 의해서 아래와 같은 구조로 재해석된다.</p>

<p>original</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">[Bindable]
public var property:String;
</code></pre></div>
<p>generated</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">private var _property:String;

public function get property():String {
    return _property;
}

public function set property(value:String):void {
    var oldValue:String = _property;
    _property = value;
    if (hasEventListener(&quot;propertyChange&quot;)) {
        dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, &quot;property&quot;, oldValue, value));
    }
}
</code></pre></div>
<p>여기서 <code>PropertyChangeEvent</code> 가 매우 중요한데, DataGrid 의 GridItemRenderer 와 같은 특수한 Component 들의 경우, Binding 된 property 의 갱신에 있어서 <code>PropertyChangeEvent</code> 만을 바라보는 경우가 있다.</p>

<hr>

<p>즉, 자주 사용하는 <code>[Bindable(&quot;varChanged&quot;)]</code> 같은 형태가 있는데,</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">private var _var:String;

[Bindable(&quot;varChanged&quot;)]
public function get var():String {
    return _var;
}

public function set var(value:String):void {
    _var=value;
    dispatchEvent(new Event(&quot;varChanged&quot;));
}
</code></pre></div>
<p>이 경우처럼 만들어진 <code>[Bindable(&quot;event&quot;)]</code> 은 DataGrid 와 같은 몇 몇 Component 들에서 작동이 안되는 경우가 발생한다.</p>

<blockquote>
<p>그렇기 때문에 getter / setter 로 만들어야 하는 경우라도<br>
compiler 의 작동 그대로를 흉내내 주기 위해<br>
<code>PropertyChangeEvent</code> 를 사용해 주는 것이 좋다.</p>
</blockquote>

<h4 id="코딩-편의성">코딩 편의성</h4>

<p>하지만, 위와 같이 코딩을 하려면 상당한 피로도가 발생하게 되는데, 아래와 같은 Code Template 을 Flash Builder 나 기타 IDE 에 등록해 놓고 사용하는 것이 유용하다.</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">//---------------------------------------------
// ${name}
//---------------------------------------------
private var _${name} : ${type};

/** ${name} */
[Bindable]
${public} function get ${name}() : ${type}
{
    return _${name};
}
${public} function set ${name}(value : ${type}):void
{
    var oldValue : ${type} = _${name};
    _${name} = value;
    // TODO
    if (hasEventListener(PropertyChangeEvent.PROPERTY_CHANGE)) {
        dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, &quot;${name}&quot;, oldValue, _${name}));
    }
}${cursor}
</code></pre></div>]]></content>
</article>



<article>
<title><![CDATA[Data Grid]]></title>
<url><![CDATA[/Flash/Flex%20Data%20Grid/Data%20Grid.html]]></url>
<content><![CDATA[<h1 id="구성">구성</h1>

<ul>
<li><code>DataGrid</code></li>
<li><code>GridColumn</code></li>
<li><code>IGridItemRenderer</code></li>
<li><code>IGridItemEditor</code></li>
</ul>

<h1 id="기능적-속성들">기능적 속성들</h1>

<h2 id="show-/-hide-interaction">show / hide interaction</h2>

<h4 id="datagrid">DataGrid</h4>

<p><code>dataProvider</code> 에 직접적 데이터를 표현하지 않고, 한 번 Wrapping 시켜서 사용해야 한다.</p>

<p><code>mx.collections.GroupingCollection2</code>, ``</p>

<p><a href="Tree%20%ED%98%95%ED%83%9C%20Data%20Grid%20%EC%9E%91%EC%84%B1.md">Tree 형태 Data Grid 작성</a></p>

<h4 id="gridcolumn">GridColumn</h4>

<p><code>visible</code> column 을 보이거나 숨길때 사용. 실시간 작동 가능</p>

<hr>

<h2 id="column-/-row-lock-(틀고정)">Column / Row lock (틀고정)</h2>

<h4 id="datagrid">DataGrid</h4>

<ul>
<li><code>lockedColumnCount</code></li>
<li><code>lockedRowCount</code></li>
</ul>

<hr>

<h2 id="header-text-관련-속성들">header text 관련 속성들</h2>

<h4 id="gridcolumn">GridColumn</h4>

<ul>
<li><code>headerText</code></li>
<li><code>headerRenderer</code></li>
</ul>

<h4 id="datagridskin">DataGridSkin</h4>

<ul>
<li><code>columnHeaderGroup : GridColumnHeaderGroup</code> header 부분을 렌더링한다.</li>
<li><code>IDataGridElement</code> GridColumnHeaderGroup 을 수정해서 처리하기 어려운 부분이라면</li>
</ul>

<hr>

<h2 id="data-와-column-mapping-및-item-rendering-관련-속성들">data 와 column mapping 및 item rendering 관련 속성들</h2>

<ul>
<li>접근 방식

<ol>
<li>formatting

<ul>
<li>text formatting 요소만 있다면 <code>formatter</code> 로 처리하는게 좋겠다</li>
</ul></li>
<li>style

<ul>
<li>기본적으로 스타일만 지정된 <code>itemRenderer</code> 로 처리하고</li>
<li>조건별 스타일이 필요한 경우는 <code>itemRendererFunction</code> 으로 분기하는게 좋겠다

<ul>
<li>가능하면 공통 처리에 필요한 function 은 <code>RendererManager.chooseRenderer</code> 와 같이 global 하게 처리하도록 한다</li>
</ul></li>
</ul></li>
<li>formatting 과 style 이 복합적으로 필요한 경우

<ul>
<li>위의 두 가지 사항으로 custom renderer 작성의 필요성이 크게 줄어들긴 한다</li>
<li>global level 보다는 module level 에서 작성한다</li>
</ul></li>
</ol></li>
</ul>

<h4 id="datagrid">DataGrid</h4>

<ul>
<li><code>columns:IList</code></li>
<li><code>dataProvider:IList</code></li>
<li><code>itemRenderer:IFactory</code></li>
</ul>

<h4 id="gridcolumn">GridColumn</h4>

<ul>
<li><code>dataField:String</code></li>
<li><code>labelFunction:Function</code> dataField 보다 디테일한 조정 가능

<ul>
<li><code>function(item:Object, column:GridColumn):String</code></li>
</ul></li>
<li><code>formatter:IFormatter</code> Cell 내부의 내용을 formatting 한다</li>
<li><code>itemRenderer:IFactory</code> </li>
<li><code>itemRendererFunction</code> 조건에 따라 itemRenderer 를 분기하고 싶을 경우 사용한다

<ul>
<li><code>function(item:Object, column:GridColumn):IFactory</code> 형식으로 지정한다</li>
</ul></li>
</ul>

<h1 id="참조-관계">참조 관계</h1>

<h2 id="gridcolumn-과-itemrenderer-에서의-상호-참조">GridColumn 과 ItemRenderer 에서의 상호 참조</h2>

<h4 id="datagrid">DataGrid</h4>

<p>selection 관련 항목들을 통해서 참조 가능 (index 를 알아낸 다음 columns 를 통해 접근)</p>

<h4 id="gridcolumn">GridColumn</h4>

<ul>
<li><code>readonly columnIndex:int</code></li>
<li><code>readonly grid:DataGrid</code></li>
</ul>

<h4 id="igriditemrenderer">IGridItemRenderer</h4>

<ul>
<li><code>column:GridColumn</code></li>
<li><code>readonly columnIndex:int</code></li>
<li><code>rowIndex:int</code></li>
</ul>

<hr>

<hr>

<h2 id="row,-column-size-관련-속성들">row, column size 관련 속성들</h2>

<h4 id="datagrid">DataGrid</h4>

<ul>
<li><code>resizeableColumns:Boolean=true</code></li>
<li><code>rowHeight:int</code></li>
<li><code>variableRowHeight:Boolean</code></li>
<li><code>typicalItem:Object</code> 해당 아이템이 column 의 기준 사이즈가 된다</li>
<li>width, height 지정 없을 경우, 보여질 column 과 row 를 지정해서 나타내야 할 경우

<ul>
<li><code>requestedColumnCount</code></li>
<li><code>requestedMaxRowCount:int</code></li>
<li><code>requestedMinColumnCount:int</code></li>
<li><code>requestedMinRowCount:int</code></li>
</ul></li>
</ul>

<h4 id="gridcolumn">GridColumn</h4>

<ul>
<li><code>width</code></li>
<li><code>minWidth</code></li>
<li><code>maxWidth</code></li>
<li><code>resizeable:Boolean</code></li>
</ul>

<hr>

<h2 id="selection-관련-속성들">selection 관련 속성들</h2>

<h4 id="datagrid">DataGrid</h4>

<ul>
<li><code>selectionMode:String=none|singleRow|singleCell|multipleRows|multipleCells</code>

<ul>
<li><code>none</code> selection 되지 않는다</li>
<li><code>singleRow</code> 한 줄씩만 selection 된다</li>
<li><code>multipleRows</code> ctrl + click 을 통해 여러 줄이 selection 된다</li>
<li><code>singleCell</code> 한 cell 만 selection 된다</li>
<li><code>multipleCells</code> 여러 cell 들이 selection 된다</li>
</ul></li>
<li>get selection

<ul>
<li> singleCell, multipleCells 전용 

<ul>
<li><code>selectedCell:CellPosition</code> selectionMode cell 전용</li>
<li><code>selectedCells:Vector.&lt;CellPosition&gt;</code> </li>
</ul></li>
<li>singleRow, multipleRows 전용

<ul>
<li><code>selectedIndex:int</code></li>
<li><code>selectedIndices:Vector.&lt;int&gt;</code></li>
<li><code>selectedItem:Object</code></li>
<li><code>selectedItems:Vector.&lt;Object&gt;</code></li>
</ul></li>
</ul></li>
<li><code>preserveSelection:Boolean=true</code> sort 시에 selection 표시가 유지되게 한다

<ul>
<li><code>selectionMode</code> 가 singleRow, singleCell 일 때만 정상적으로 작동된다</li>
</ul></li>
<li><code>requireSelection:Boolean</code> 반드시 한 개 이상 선택된 항목이 있게 한다</li>
</ul>

<h4 id="igriditemrenderer">IGridItemRenderer</h4>

<ul>
<li><code>selected:Boolean</code></li>
</ul>

<hr>

<h2 id="datatip-관련-속성들">dataTip 관련 속성들</h2>

<h4 id="datagrid">DataGrid</h4>

<ul>
<li><code>showDataTips:Boolean</code></li>
<li><code>dataTipField</code></li>
<li><code>dataTipFunction</code></li>
</ul>

<h4 id="gridcolumn">GridColumn</h4>

<ul>
<li><code>showDataTips:Boolean</code> dataTip 을 보여주기 위해서는 활성화가 필수적이다</li>
<li><code>dataTipField</code> showDataTips 필요, 특정 field 를 지정해서 보여준다</li>
<li><code>dataTipFormatter</code> dataTipField 에 영향을 미친다. dataTipFunction 에는 영향을 미치지 않는다 </li>
<li><code>dataTipFunction</code>

<ul>
<li><code>function(item:Object, column:GridColumn):String</code> 형식으로 지정한다</li>
</ul></li>
<li><del>!!! 문제점이 dataTip 을 보여주는 위치가 너무 거지 같다는 것... 조절 가능한지 알아보자</del>

<ul>
<li>dataTip 의 생성 로직 및 위치 조절

<ul>
<li>관여되는 class 는 <code>spark.components.gridClasses.GridItemRenderer</code> 

<ul>
<li>dataTip 위치의 조절 

<ol>
<li><code>GridItemRenderer#constructor</code> 에서 tooltip event 를 걸게 된다</li>
<li><code>static mx_internal toolTipShowHandler(event:ToolTipEvent):void</code> 에서 위치 등을 조절</li>
<li>이 부분은 상당히 커스텀하기 까다롭게 되어 있다.</li>
</ol></li>
<li>toolTip 의 생성

<ol>
<li><code>GridItemRenderer#updateDisplayList</code> 에서 <code>initializeRendererToolTip</code> 를 매 번 호출</li>
<li><code>GridColumn.showDataTips</code> 항목을 읽어서 <code>toopTip</code> 항목을 조절해주게 된다</li>
</ol></li>
</ul></li>
<li><strong>위치 조절이 거지 같이 되어 있다. dataTip 이 필요하다면 그냥 copy 해서 renderer 를 새로 만드는게 좋을듯 싶다</strong></li>
</ul></li>
</ul></li>
</ul>

<hr>

<h2 id="sorting-관련-속성들">sorting 관련 속성들</h2>

<h4 id="datagrid">DataGrid</h4>

<ul>
<li><code>sortableColumns:Boolean</code></li>
<li><code>multiColumnSortingEnabled:Boolean</code> true 일 경우, ctrl + click 을 통해서 우선 순위 sorting 을 할 수 있게 한다<br></li>
</ul>

<h4 id="gridcolumn">GridColumn</h4>

<ul>
<li><code>DataGrid</code> 상위에서 설정

<ul>
<li><code>sortableColumns:Boolean</code></li>
</ul></li>
<li><strong><code>ArrayCollection</code> 에서만 작동한다. <code>ArrayList</code> 에서는 작동하지 않는다</strong></li>
<li><code>sortable</code></li>
<li><code>sortCompareFunction</code>

<ul>
<li>기본적으로는 문자 내부의 숫자를 a1, a10, a2 형태로 정렬시킨다</li>
<li>하지만, 이 옵션을 사용할 경우 substr 등을 통해서 a1, a2, a10 형태로 정렬이 가능하다</li>
<li><code>function(a:Object, b:Object, column:GridColumn):int</code> return 값은 array sort 와 같다 (0, 1, -1)</li>
</ul></li>
<li><code>sortDescending:Boolean</code> header 를 클릭해서 정렬시. 최초 클릭시에 내림차순(높은 값부터 보여주고 싶다면) true 로 설정한다</li>
</ul>

<hr>

<h2 id="editable-관련-속성들">editable 관련 속성들</h2>

<h4 id="datagrid">DataGrid</h4>

<ul>
<li><code>editable:boolean</code></li>
<li><code>editorColumnIndex:int</code> ???</li>
<li><code>editorRowIndex:int</code> ???</li>
<li><code>itemEditor</code></li>
<li><code>imeMode</code></li>
<li><code>editorActivationMouseEvent:GridItemEditorMouseEvent</code></li>
</ul>

<h4 id="gridcolumn">GridColumn</h4>

<ul>
<li><code>editable:Boolean</code></li>
<li><code>itemEditor</code></li>
<li><code>rendererIsEditable:Boolean</code> editable 로 설정된 DataGrid 내에서 cell 에 focus 가 들어 갔을때, itemEditor 가 뜨지 않게 해준다.</li>
<li><code>imeMode</code> 특정 언어권 문자로 타이핑 되도록 설정</li>
<li><code>editorActivationMouseEvent:GridItemEditorMouseEvent</code></li>
</ul>

<h1 id="시점-특징들">시점 특징들</h1>

<h4 id="datagrid">DataGrid</h4>

<h4 id="igriditemrenderer">IGridItemRenderer</h4>

<p><code>UIComponent</code> 를 상속받은 경우, <code>updateDisplayList</code> 는 <code>data</code> 나 <code>column</code> 이 바뀔때는 일어나지 않는다<br>
기본적인 <code>itemRenderer</code> 가 새로 만들어진 뒤 <code>prepare</code> 이전 시점 초기화 시나, <code>column</code> 의 사이즈를 바꿀때 주로 일어난다<br>
즉, 기본적인 layout 구성의 틀을 바꿀때 이외에는 <code>updateDisplayList</code> 는 발생되지 않는다.</p>

<ul>
<li>거의 매 순간 들어오는 항목들

<ul>
<li><code>set hovered(value:Boolean)</code></li>
<li><code>set selected(value:Boolean)</code></li>
<li><code>set showsCaret(value:Boolean)</code></li>
</ul></li>
<li>prepare 이전 시점에 추가적으로 들어오는 항목들

<ul>
<li><code>set rowIndex(value:int)</code></li>
<li><code>set column(value:GridColumn)</code></li>
<li><code>set label(value:String)</code></li>
<li><code>set data(value:Object)</code></li>
</ul></li>
<li>drawing 시점들

<ul>
<li><code>discard(willBeRecycled:Boolean):void</code>

<ul>
<li><code>DataGrid</code> 의 <code>removeElement</code> 상황에서는 발생되지 않는다</li>
<li><code>Column.itemRenderer</code> 를 통해 교체 해줄때 true parameter 를 가지고 발생된다</li>
<li>즉... 망할 dispose 구간이 없다

<ul>
<li>그러므로 <code>bitmap</code> 같은걸 사용해서 성능에 예민한 경우 <code>removeElement</code> 시점에 <code>column.itemRenderer=null</code> 을 한 번 쳐주고 가면 좋을듯 싶다.</li>
</ul></li>
</ul></li>
<li><code>prepare(hasBeenRecycled:Boolean):void</code>

<ul>
<li>안정적이다... updateDisplayList 와 각 종, property 에 대한 적용이 다 끝난 뒤에 발생된다</li>
<li>겁나 자주 발생된다... 매번 그려대다간 cpu over 는 기본이다</li>
</ul></li>
<li><code>discard</code> 가 딱히 안정적이지는 않은듯 싶다. graphics drawing 시점에 있어서 <code>prepare</code> 이후에 발생해서 공백을 만들어 버리는 에러도 발생을 한다</li>
</ul></li>
</ul>

<hr>

<hr>

<h1 id="style-편집">Style 편집</h1>

<ul>
<li>color ???

<ul>
<li><code>borderColor</code></li>
<li><code>caretColor</code></li>
<li><code>symbolColor</code></li>
<li><code>selectionColor</code></li>
<li><code>rollOverColor</code></li>
</ul></li>
<li>scroll ???

<ul>
<li><code>horizontalScrollPolicy</code></li>
<li><code>verticalScrollPolicy</code></li>
</ul></li>
</ul>

<h2 id="datagridskin-각-part-들-분석"><code>DataGridSkin</code> 각 part 들 분석</h2>

<ul>
<li><code>caretIndicator</code> mouse 의 마지막 click selection 위치인 caret 을 그린다. 

<ul>
<li>implement <code>spark.components.gridClasses.IGridVisualElement</code></li>
<li>use style <code>caretColor</code></li>
<li><code>&lt;Rect&gt;&lt;SolidColorStroke&gt;</code></li>
</ul></li>
<li><code>selectionIndicator</code> selection 된 cell, row 의 background color 를 그린다. 

<ul>
<li>implement <code>spark.components.gridClasses.IGridVisualElement</code></li>
<li>use style <code>selectionColor</code></li>
<li><code>&lt;Rect&gt;&lt;SolidColor&gt;</code></li>
</ul></li>
<li><code>hoverIndicator</code> mouse 의 roll over 를 그린다.

<ul>
<li>implement <code>spark.components.gridClasses.IGridVisualElement</code></li>
<li>use style <code>rollOverColor</code></li>
<li><code>&lt;Rect&gt;&lt;SolidColor&gt;</code></li>
</ul></li>
<li>??? <code>dropIndicator</code> 아마도 drag and drop 시에 외곽선을 그려주는 역할일듯

<ul>
<li>implement <code>flash.display.DisplayObject</code></li>
<li><code>&lt;Rect&gt;&lt;SolidColorStroke&gt;</code></li>
</ul></li>
<li><p><code>editorIndicator</code> </p>

<ul>
<li><code>rendererIsEditable</code> 이 걸린 column 에 edit focus 가 들어갈때 배경색을 그려준다</li>
<li>implement <code>mx.core.IVisualElement</code></li>
<li><code>&lt;Rect&gt;&lt;SolidColor&gt;</code></li>
</ul></li>
<li><p>alternatingRowColorsBackground</p></li>
<li><p>headerRenderer</p></li>
<li><p>columnSeparator</p></li>
<li><p>headerColumnSeparator</p></li>
<li><p>lockedColumnsSeparator</p></li>
<li><p>lockedRowsSeparator</p></li>
<li><p>rowSeparator</p></li>
</ul>

<h2 id="datagrid-해킹"><code>DataGrid</code> 해킹</h2>

<ul>
<li>row, column merge 가능하게 확장해보기</li>
<li>renderer 재사용 문제에 대한 분석 및 해결 방안</li>
</ul>
]]></content>
</article>



<article>
<title><![CDATA[DataGrid 를 Excel 처럼 Customizing 하기]]></title>
<url><![CDATA[/Flash/Flex%20Data%20Grid/DataGrid%20%E1%84%85%E1%85%B3%E1%86%AF%20Excel%20%E1%84%8E%E1%85%A5%E1%84%85%E1%85%A5%E1%86%B7%20Customizing%20%E1%84%92%E1%85%A1%E1%84%80%E1%85%B5.html]]></url>
<content><![CDATA[<h1 id="datagrid.editable-을-통한-편집-기능의-분석"><code>DataGrid.editable</code> 을 통한 편집 기능의 분석</h1>

<p>기본적으로 <code>DataGrid.editable</code> 을 통해서 Excel 처럼 편집이 가능하지만, 이에 대해서는</p>

<blockquote>
<p>만들다 말았다...</p>
</blockquote>

<p>로 정의 할 수 있겠다. </p>

<ol>
<li><code>DataGrid</code> 의 기본 <code>DataGridSkin</code> 과 편집 기능은 상당한 괴리가 있다.</li>
<li><code>DataGrid</code> 의 편집 기능으로 쓰일 여러 Component 의 기본 Skin 들이 <code>DataGrid</code> 의 모양과 어울리지 않는다.</li>
</ol>

<p>즉, <code>DataGrid.editable</code> 을 실제적으로 사용하기 위해서는 상당한 분량의 <code>Skin</code> 작업을 요구하게 된다.</p>

<blockquote>
<p><code>DataGrid</code> 의 Cell 에 들어가서도 어울릴만한 여러 Component Skin 들과 그에 걸맞는 형태의 새로운 <code>DataGridSkin</code> 의 구성이 가장 우선시 되고, 이는 상당한 분량의 작업을 요구하게 된다.</p>
</blockquote>

<h1 id="igriditemeditor-와-rendereriseditable"><code>IGridItemEditor</code> 와 <code>rendererIsEditable</code></h1>

<h3 id="rendereriseditable-을-위한-model"><code>rendererIsEditable</code> 을 위한 Model</h3>

<p><code>rendererIsEditable</code> 에 <code>[Bindable]</code> 이 걸린 Model 을 Binding 시키면 상당한 문제를 만들어내게 된다.</p>

<ol>
<li>Renderer 에서 편집</li>
<li>Model 에서 <code>PropertyChangeEvent</code> 발생 시킴</li>
<li>DataGrid 에서 Event 수신 후에 갱신</li>
<li><strong>갱신 과정에서 focus 없어짐</strong></li>
</ol>

<p>즉, <strong>Keyboard 를 통한 편집 상황에서 focus 가 날라가버리는 문제가 발생</strong>하게 되고, 이건 사용성에 꽤나 심각한 악영향을 미치게 된다.</p>

<p><code>GridEditor</code> 나 여러 내부적인 구조들을 뜯어고쳐서 패치할 수도 있겠지만, 보다 간단하게 해결이 가능하다.</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">public var property:String;

public function setProperty(value:String):void {
    var oldValue:String=property;
    property=value;
    if (hasEventListener(PropertyChangeEvent.PROPERTY_CHANGE)) {
        dispatchEvent(PropertyChangeEvent.createUpdateEvent(this, &quot;property&quot;, oldValue, property));
    }
}
</code></pre></div>
<p><code>[Bindable]</code> 을 걸지 않는 대신, <code>setter method</code> 를 통해서 접근하면, <code>rendererIsEditable</code> 에서 발생되는 이벤트 순환 문제도 없고, 외부에서 property 를 갱신할 때도 문제가 없다.</p>
]]></content>
</article>



<article>
<title><![CDATA[DataGrid 에 확장 요소 넣기]]></title>
<url><![CDATA[/Flash/Flex%20Data%20Grid/DataGrid%20%E1%84%8B%E1%85%A6%20%E1%84%92%E1%85%AA%E1%86%A8%E1%84%8C%E1%85%A1%E1%86%BC%20%E1%84%8B%E1%85%AD%E1%84%89%E1%85%A9%20%E1%84%82%E1%85%A5%E1%87%82%E1%84%80%E1%85%B5.html]]></url>
<content><![CDATA[]]></content>
</article>



<article>
<title><![CDATA[DataGrid 의 Style 및 layout 을 결정하는 요소들]]></title>
<url><![CDATA[/Flash/Flex%20Data%20Grid/DataGrid%20%E1%84%8B%E1%85%B4%20Style%20%E1%84%86%E1%85%B5%E1%86%BE%20layout%20%E1%84%8B%E1%85%B3%E1%86%AF%20%E1%84%80%E1%85%A7%E1%86%AF%E1%84%8C%E1%85%A5%E1%86%BC%E1%84%92%E1%85%A1%E1%84%82%E1%85%B3%E1%86%AB%20%E1%84%8B%E1%85%AD%E1%84%89%E1%85%A9%E1%84%83%E1%85%B3%E1%86%AF.html]]></url>
<content><![CDATA[<h1 id="datagridskin-의-색상과-같은-style-적-요소들"><code>DataGridSkin</code> 의 색상과 같은 style 적 요소들</h1>

<p>기본적인 모양새는 <code>DataGridSkin</code> 이 결정하게 된다.</p>

<p>특이점은 <code>Skin</code> 시스템이 가지는 형태라기 보다는, 일종의 형태를 그려내는데 필요한 여러 <code>part</code> 들의 집합체적 성격을 가진다. 그렇기에 내부적으로 <code>IFactory</code> 형태의 <code>[SkinPart]</code> 들이 많은 편이다.</p>

<h3 id="ifactory-형태의-[skinpart]-들-분석"><code>IFactory</code> 형태의 <code>[SkinPart]</code> 들 분석</h3>

<p>Factory 형태의 <code>[SkinPart]</code> 들은 <code>headerRenderer</code> 를 제외하고는 모두 <code>GraphicElement</code> 형태를 가지게 된다. 화면을 그려내기 위한 작은 <code>GraphicElement</code> 의 집합이라고 볼 수 있다.</p>

<ul>
<li>Header 렌더링

<ul>
<li><code>headerRenderer</code> 말그대로 Renderer 이다. Header 를 그려내는데 사용된다.</li>
</ul></li>
<li>Cell 을 그려내는데 필요한 요소들

<ul>
<li><code>alternatingRowColorsBackground</code> cell 의 background 를 그린다.

<ul>
<li>use style <code>alternatingRowColors</code></li>
<li>default <code>&lt;Rect&gt;&lt;SolidColor&gt;</code></li>
</ul></li>
</ul></li>
<li>Indicator (selection, hover, caret 등 사용자 반응의 표현) 들을 그리는 요소들

<ul>
<li><code>caretIndicator</code> mouse 의 마지막 click selection 위치인 caret 을 그린다. 

<ul>
<li>use style <code>caretColor</code></li>
<li>default <code>&lt;Rect&gt;&lt;SolidColorStroke&gt;</code></li>
</ul></li>
<li><code>selectionIndicator</code> selection 된 cell, row 의 background color 를 그린다. 

<ul>
<li>use style <code>selectionColor</code></li>
<li>default <code>&lt;Rect&gt;&lt;SolidColor&gt;</code></li>
</ul></li>
<li><code>hoverIndicator</code> mouse 의 roll over 를 그린다.

<ul>
<li>use style <code>rollOverColor</code></li>
<li>default <code>&lt;Rect&gt;&lt;SolidColor&gt;</code></li>
</ul></li>
<li><code>dropIndicator</code> 아마도 drag and drop 시에 외곽선을 그려주는 역할일듯 (테스트 안해봤음)

<ul>
<li>default <code>&lt;Rect&gt;&lt;SolidColorStroke&gt;</code></li>
</ul></li>
<li><code>editorIndicator</code> rendererIsEditable 이 걸린 column 에 edit focus 가 들어갈때 배경색을 그려준다

<ul>
<li>default <code>&lt;Rect&gt;&lt;SolidColor&gt;</code></li>
</ul></li>
</ul></li>
<li>Separator (구분선) 을 그려내는 요소들. 모두 <code>Stroke</code> 요소들이다.

<ul>
<li><code>headerColumnSeparator</code> header 내부의 column 간 구분선</li>
<li><code>columnSeparator</code> column 간 구분선</li>
<li><code>rowSeparator</code> row 간 구분선</li>
<li><code>lockedColumnsSeparator</code> column 잠금선</li>
<li><code>lockedRowsSeparator</code> row 잠금선</li>
</ul></li>
</ul>

<h3 id="igridvisualelement"><code>IGridVisualElement</code></h3>

<p>기본적으로 <code>alternatingRowColorsBackground</code> 나 여러 <code>indicator</code> 와 같은 구성 요소들은 <code>IVisualElement</code> 만 구현해내도 된다.</p>

<p>추가적으로 part 가 <code>DataGrid</code> 의 속성을 읽어서 어떤 작동을 하길 원한다면 (ex. style 처리와 같은...) <code>IGridVisualElement</code> 를 구현하면 된다.</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">public function prepareGridVisualElement(grid:Grid, rowIndex:int, columnIndex:int):void {
    // TODO
    // grid.dataGrid
}
</code></pre></div>
<p><code>IGridVisualElement</code> 를 구현하면 위와 같은 method 를 구현하게 되는데, <code>grid.DataGrid</code> 로 참조를 읽어서 여러 <code>DataGrid</code> 의 속성을 구현해낼 수 있다.</p>

<h3 id="css-style-요소의-테마를-포함시킬-것인가?">css style 요소의 테마를 포함시킬 것인가?</h3>

<p>기본 <code>DataGridSkin</code> 은 spark theme 의 편의성을 위해서 각 part 들에 <code>IGridVisualElement</code> 를 구현시켜서 <code>DataGrid</code> 의 style 요소들을 받아들여 렌더링 하게 된다.</p>

<p>하지만, custom 한 <code>DataGridSkin</code> 을 작성하고자 한다면 딱히 이 부분까지는 고려할 필요는 없다. 주의할 것은 <code>IGridVisualElement</code> 를 구현하지 않은 <code>DataGridSkin</code> 을 만든다면, <code>DataGrid</code> 의 여러 style 속성들 (예를 들어 <code>backgroundColor</code>) 같은 것들은 모두 무효화 되게 된다.</p>

<h1 id="datagridskin-의-layout-구성적-요소들"><code>DataGridSkin</code> 의 layout 구성적 요소들</h1>

<p>각 종, <code>part</code> 들을 배제하고 나면 남는 것은 아래와 같은 구성이다.</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;VGroup&gt;
    &lt;GridColumnHeaderGroup id=&quot;columnHeaderGroup&quot; /&gt;
    &lt;Group&gt;
        &lt;Rect&gt;
            &lt;fill/&gt;
        &lt;/Rect&gt;
        &lt;VGroup&gt;
            &lt;Line id=&quot;headerSeparator&quot; /&gt;
            &lt;Scroller&gt;
                &lt;Grid id=&quot;grid&quot;&gt;
                    &lt;gridView&gt;
                        &lt;Component&gt;
                            &lt;GridView&gt;
                                &lt;GridLayer name=&quot;backgroundLayer&quot;/&gt;
                                &lt;GridLayer name=&quot;selectionLayer&quot;/&gt;
                                &lt;GridLayer name=&quot;editorIndicatorLayer&quot;/&gt;
                                &lt;GridLayer name=&quot;rendererLayer&quot;/&gt;
                                &lt;GridLayer name=&quot;overlayLayer&quot;/&gt;
                            &lt;/GridView&gt;
                        &lt;/Component&gt;
                    &lt;/gridView&gt;
                &lt;/Grid&gt;
            &lt;/Scroller&gt;
        &lt;/VGroup&gt;
    &lt;/Group&gt;
&lt;/VGroup&gt;
&lt;Rect id=&quot;border&quot;&gt;
    &lt;stroke /&gt;
&lt;/Rect&gt;
</code></pre></div>
<p><code>id</code> 를 기재한 요소들이 중요한 기능적 요소들이고, 나머지들은 그냥 layout 을 구성하는 것 들인데, 사용자의 요구에 따라 </p>

<ul>
<li>if <code>DataGrid</code> 외곽선 바깥에 scrollbar 를 배치하고 싶다거나</li>
<li>if 각 종, <code>GridLayer</code> 들의 순서를 바꿀 필요가 있다거나</li>
<li>if 하단에 cell 들의 합산을 추가하고 싶다거나...</li>
</ul>

<p>뭐 이런 각 종, Custom 처리를 하고 싶으면 그냥 layout 자체를 바꿔버리면 된다.</p>

<h3 id="igridvisualelement"><code>IGridVisualElement</code></h3>

<p>내부적으로 <code>IGridVisualElement</code> 를 구현한 요소를 추가할 경우, </p>
<div class="highlight"><pre><code class="language-text" data-lang="text">function prepareGridVisualElement(grid:Grid, rowIndex:int, columnIndex:int):void {
}
</code></pre></div>
<p>해당 요소는 위와 같은 코드를 통해 초기하 되게 된다.</p>

<ul>
<li>하단에 합산 처리를 넣고 싶다거나...</li>
<li>뭔가 DataGrid 에 추가적인 요소들을 낑궈넣고 싶다면</li>
</ul>

<p>이 interface 를 구현한 요소를 추가시킨 component 를 layout 에 넣어주면 된다.</p>

<p>이와 관련된 문서는 <a href="DataGrid%20%EC%97%90%20%ED%99%95%EC%9E%A5%20%EC%9A%94%EC%86%8C%20%EB%84%A3%EA%B8%B0.md">DataGrid 에 확장 요소 넣기</a> 에서 이어가도록 하겠다.</p>
]]></content>
</article>



<article>
<title><![CDATA[DataGrid 의 구성 요소들]]></title>
<url><![CDATA[/Flash/Flex%20Data%20Grid/DataGrid%20%E1%84%8B%E1%85%B4%20%E1%84%80%E1%85%AE%E1%84%89%E1%85%A5%E1%86%BC%20%E1%84%8B%E1%85%AD%E1%84%89%E1%85%A9%E1%84%83%E1%85%B3%E1%86%AF.html]]></url>
<content><![CDATA[<h1 id="datagridskin">DataGridSkin</h1>
]]></content>
</article>



<article>
<title><![CDATA[Develop Npm Module]]></title>
<url><![CDATA[/Server/Develop%20Npm%20Module.html]]></url>
<content><![CDATA[<h1 id="구성도">구성도</h1>

<ul>
<li>작업 흐름 관리, 버전 관리 : <a href="https://github.com">Git</a> + <a href="VCS/git-flow.md">Git-flow</a> + <a href="http://www.sourcetreeapp.com">SourceTree</a></li>
<li>개발툴 : [Webstorm]</li>
<li>저장소 : <a href="https://github.com">Github</a></li>
<li>통합 서버 : <a href="https://travis-ci.org">Travis-ci</a></li>
</ul>

<h1 id="travis-npm-api_key-설정">Travis Npm api_key 설정</h1>
<div class="highlight"><pre><code class="language-text" data-lang="text">brew install ruby
subl ~/.config/fish/config.fish # $PATH에 /usr/local/opt/ruby 추가
gem install travis-lint
gem install travis
travis encrypt --add
</code></pre></div>
<ul>
<li><a href="http://docs.travis-ci.com/user/deployment/npm/">http://docs.travis-ci.com/user/deployment/npm/</a></li>
<li><a href="https://github.com/travis-ci/travis#readme">https://github.com/travis-ci/travis#readme</a></li>
<li><a href="http://blog.travis-ci.com/2013-10-02-continuous-deployment-pypi-npm-and-more/">http://blog.travis-ci.com/2013-10-02-continuous-deployment-pypi-npm-and-more/</a></li>
</ul>
]]></content>
</article>



<article>
<title><![CDATA[Display Invalidation]]></title>
<url><![CDATA[/Flash/Flex%20%E1%84%8B%E1%85%AF%E1%86%AB%E1%84%85%E1%85%A9%E1%86%AB/Display%20Invalidation.html]]></url>
<content><![CDATA[<h1 id="display-invalidation-무효화-처리">Display Invalidation 무효화 처리</h1>

<p>Display Invalidation은 Flex의 주요 개념 중 하나이다.</p>

<p>Flex의 근간이 되는 Flash에서 처리되는 보편적인 Display Rendering 구조는 아래와 같다.</p>

<ol>
<li>상태 변경</li>
<li>렌더링</li>
</ol>

<p>문제는 렌더링 처리는 보통 <strong>엄청난 무게감</strong>을 가지는 녀석들이라는 것이다.</p>

<p>Flex는 내부적으로 Data Binding 같은 개발자 편의를 많이 수용하고 있기 때문에, 기본적으로 상태 변경 자체가 자주 일어나게 된다. 이 상태 변경 때마다 Flash처럼 렌더링 질을 하다간 프로그램의 성능은 보장할 수가 없다.</p>

<p>Display Invalidation 에 대한 기본적인 과정은 아래와 같다.</p>

<ol>
<li>property 등의 변경 시에 변경된 데이터를 저장한 다음, <code>invalidate()</code> 메서드를 호출한다.</li>
<li><code>invalidate()</code> 에서는 두 가지 상황을 감시한다

<ul>
<li>display가 added 되어 있으면 <code>Event.RENDER</code> 를 기다린다.</li>
<li>display가 added 되어 있지 않으면 <code>Event.ADDED_TO_STAGE</code> 를 기다린다.</li>
</ul></li>
<li>위에서 처럼 처리를 하게 되면 몇 번의 property 변경이 일어나던지 간에, 실제적인 렌더링은 <code>Event.RENDER</code> 에서 한 번만 일어나게 된다.</li>
</ol>

<p>이와 같이 <code>Event.RENDER</code> 와 같은 <strong>모니터가 변경된 화면을 그리게 되는 순간</strong> 에 실제 그림을 그려내도록 미루는 것을 Display Invalidation의 기본적인 개념이다.</p>

<h1 id="flex-의-display-invalidation">Flex 의 Display Invalidation</h1>

<p>Flex 는 <code>invalidate()</code> 의 개념을 좀 더 세분화 시켜놓았다.</p>

<ol>
<li><code>invalidateDisplayList()</code> 화면의 구성원을 변경했으니 이후에 처리하라</li>
<li><code>invalidateSize()</code> 화면의 사이즈를 변경했으니 이후에 처리하라 </li>
<li><code>invalidateProperties()</code> 값을 변경했으니 이후에 처리하라</li>
<li><code>invalidateSkinState()</code> Skin의 현재 상태가 변경되었으니 이후에 처리하라</li>
</ol>

<p>뭐 대표적인 <code>invalidate</code> 메서드 들은 위와 같고, 몇몇 특수한 형태의 추가적인 형태의 invalidation도 존재한다. 하지만 의미는 &quot;무언가 변경했으니 차후에 처리해달라&quot; 에서 크게 벗어나지는 않는다.</p>

<p>각각의 무효화 처리에 대응되는 내부적 메서드들은 아래와 같다</p>

<ul>
<li><code>invalidateDisplayList()</code> --&gt; <code>updateDisplayList()</code> --&gt; <code>UPDATE_COMPLETE</code></li>
<li><code>invalidateSize()</code> --&gt; <code>measure()</code> --&gt; <code>UPDATE_COMPLETE</code></li>
<li><code>invalidateProperties()</code> --&gt; <code>commitProperties()</code> --&gt; <code>UPDATE_COMPLETE</code></li>
<li><code>invalidateSkinState()</code> --&gt; <code>commitProperties()</code>, <code>getCurrentSkinState()</code> --&gt; <code>UPDATE_COMPLETE</code></li>
</ul>

<p>마지막에 있는 <code>UPDATE_COMPLETE</code>는 Event인데, 여러모로 상태 구분이 모호하고, 뭔가 변경되는 상황들을 뭉뚱그려서 처리하고 싶을 때 사용하면 된다. 하지만 의미 없는 렌더링 성능을 소모할 가능성이 있으므로 신중하게 사용하는 것이 좋다.</p>

<h3 id="참고">참고</h3>

<ul>
<li><a href="http://help.adobe.com/en_US/flex/using/WS460ee381960520ad-2811830c121e9107ecb-7fff.html">About creating advanced Spark components</a></li>
</ul>
]]></content>
</article>



<article>
<title><![CDATA[Drawing 가능한 Graphics Container 들의 종류와 특성]]></title>
<url><![CDATA[/Flash/Graphics/Drawing%20%E1%84%80%E1%85%A1%E1%84%82%E1%85%B3%E1%86%BC%E1%84%92%E1%85%A1%E1%86%AB%20Graphics%20Container%20%E1%84%83%E1%85%B3%E1%86%AF%E1%84%8B%E1%85%B4%20%E1%84%8C%E1%85%A9%E1%86%BC%E1%84%85%E1%85%B2%E1%84%8B%E1%85%AA%20%E1%84%90%E1%85%B3%E1%86%A8%E1%84%89%E1%85%A5%E1%86%BC.html]]></url>
<content><![CDATA[<h1 id="사용-가능한-draw-container">사용 가능한 Draw Container</h1>

<ul>
<li><p><code>Shape</code>, <code>Sprite</code></p>

<ul>
<li>MXML Container 상에 직접 쓸 수 없다</li>
<li>그리고, 난 뒤 size 가 자동 계산된다</li>
</ul></li>
<li><p><code>SpriteVisualElement</code></p>

<ul>
<li>MXML Container 상에 쓸 수 있다</li>
<li>Display Object 기반의 <code>IVisualElement</code> 중에서 가장 가볍다</li>
<li>size 자동 계산이 되지 않는다 <code>width</code>, <code>height</code> 를 수동으로 지정해줘야 한다</li>
</ul></li>
<li><p><code>UIComponent</code></p>

<ul>
<li>Display Invalidation 처리가 가능하다. <code>updateDisplayList()</code> 에서 드로잉이 가능하다.</li>
<li>원론적으로 <code>SpriteVisualElement</code> 보다 무겁지만, Display Invalidation 에 의한 렌더링 횟수 감소로 효과를 볼 수도 있다.</li>
</ul></li>
<li><p><code>GraphicElement</code></p>

<ul>
<li>Display Object 에 근거하지 않은 <code>IVisualElement</code></li>
<li><code>IVisualElementContainer</code> 에다가 그리는 특성을 지닌다.</li>
<li>가장 가볍고 빠르다.</li>
<li>하지만, Graphics 의 부분 갱신이 되지 않는 특징 때문에, 큰 그림을 <code>GraphicsElement</code> 로 그릴때 의외의 부하가 발생할 수도 있다.</li>
</ul></li>
</ul>
]]></content>
</article>



<article>
<title><![CDATA[Dropbox Linux Command-Line Client]]></title>
<url><![CDATA[/Server/Ubuntu%20Server/Dropbox%20Linux%20Command-Line%20Client.html]]></url>
<content><![CDATA[<blockquote>
<p>실제 사용하는 계정이 아니라, 서버로 사용할 별도의 계정을 하나 만들고,<br>
디렉토리를 공유하는 방식으로 사용하는 것이 좋다.<br>
<strong>공유하지 않을 디렉토리를 비활성 시키는 기능이 상당히 불편하기 때문인데</strong><br>
공유하는 방식으로 사용하면 서버측에 어떤 디렉토리를 포함시킬지에 대해 Dropbox 웹사이트에서 컨트롤이 가능해진다.</p>
</blockquote>

<h1 id="dropbox-설치하기">Dropbox 설치하기</h1>

<ol>
<li><code>cd ~</code></li>
<li><a href="https://www.dropbox.com/install?os=lnx">https://www.dropbox.com/install?os=lnx</a> 에서 OS에 맞는 명령어로 설치</li>
<li><code>.dropbox-dist/dropboxd</code> 를 실행시켜서 안내에 따라 계정을 활성화 시킨 후에 <code>Ctrl + C</code> 로 빠져나옴</li>
</ol>

<h1 id="dropbox를-system-startup때-실행시키기">Dropbox를 system startup때 실행시키기</h1>

<ol>
<li><code>sudo nano /etc/init.d/dropbox</code> 로 편집시작</li>
<li><a href="http://www.dropboxwiki.com/tips-and-tricks/install-dropbox-in-an-entirely-text-based-linux-environment">링크</a>에 적혀 있는 Ubuntu 관련 스크립트를 붙여넣은 뒤에, User 항목에 자신의 Ubuntu 계정 아이디를 적어줌</li>
<li><code>sudo chmod +x /etc/init.d/dropbox</code></li>
<li><code>sudo update-rc.d dropbox defaults</code></li>
<li><code>sudo service dropbox start</code></li>
</ol>

<p>daemon 등록 이후에 아래 명령어들 사용 가능</p>

<ul>
<li><code>sudo service dropbox start</code></li>
<li><code>sudo service dropbox stop</code></li>
</ul>

<p>참고 문서</p>

<ul>
<li><a href="http://www.dropboxwiki.com/tips-and-tricks/install-dropbox-in-an-entirely-text-based-linux-environment">Install Dropbox In An Entirely Text-Based Linux Environment</a></li>
<li><a href="init.d%20%EC%8B%9C%EC%8A%A4%ED%85%9C%20%EC%9D%B4%EB%B2%A4%ED%8A%B8%20%EB%A7%8C%EB%93%A4%EA%B8%B0.md">init.d 시스템 이벤트 만들기</a></li>
</ul>

<h1 id="dropbox-cli-script">Dropbox cli script</h1>

<ol>
<li><a href="https://www.dropbox.com/install?os=lnx">https://www.dropbox.com/install?os=lnx</a> 에서 python script 링크 확인 (아래 주소 변경 가능성 있으니...)</li>
<li><code>wget -O dropbox.py &quot;https://www.dropbox.com/download?dl=packages/dropbox.py&quot;</code> </li>
<li><code>chmod 755 dropbox.py</code></li>
</ol>

<p>위의 스크립트들을 사용해서 아래 명령어들 사용 가능</p>

<ul>
<li><code>~/dropbox.py status</code> 상태 확인</li>
<li><code>cd ~/Dropbox</code> 이후 <code>~/dropbox.py exclude add Images</code> 싱크에서 제외할 폴더들 추가 (왠만하면 공유 디렉토리 기능을 사용하고 이 기능은 쓰지 마라...)</li>
</ul>
]]></content>
</article>



<article>
<title><![CDATA[Easing And Tween]]></title>
<url><![CDATA[/Flash/Graphics/Easing%20And%20Tween.html]]></url>
<content><![CDATA[<h1 id="tweenlite-의-easing-function-구성">TweenLite 의 Easing function 구성</h1>

<p><code>func(t:Number, b:Number, c:Number, d:Number):Number</code></p>

<ul>
<li><code>t</code> 는 현재 시간</li>
<li><code>b</code> 는 시작 값</li>
<li><code>c</code> 는 증가량 (<code>b</code> 에서 얼마만큼 변할 것인가)</li>
<li><code>d</code> 는 전체 시간</li>
</ul>

<p><code>b</code>, <code>c</code>, <code>d</code> 는 고정 값이고, <code>t</code> 만이 변동 값이 된다. 다른 고정값들의 조건 내에서 <code>t</code> 시점의 값을 알려주게 된다.</p>

<h1 id="easing-function-들의-움직임">Easing function 들의 움직임</h1>

<div class="unpadding">
    <embed src="EasingCatalog.swf" width="100%" height="800" />
</div>
]]></content>
</article>



<article>
<title><![CDATA[Eclipse Path Tools]]></title>
<url><![CDATA[/Web/Eclipse/Eclipse%20Path%20Tools.html]]></url>
<content><![CDATA[<h1 id="주의">주의</h1>

<p>Linux와 Mac에서만 작동한다.</p>

<h1 id="eclipse-plug-in">Eclipse Plug-in</h1>

<p>이클립스에서 여러가지 방식으로 프로젝트 내의 Path(경로)에 접근하고 싶을 때 사용될 수 있다.</p>

<p>지원되는 기능들은 아래와 같다.</p>

<ul>
<li>Path 복사</li>
<li>Path 열기</li>
<li>Path를 Terminal(or iTerm)으로 열기 </li>
<li>Path를 Text 편집기로 열기</li>
</ul>

<p><img src="../../../files/captures/20140114/163605.png" alt="사용예"></p>

<p>Eclipse에서 위와 같이 사용된다.</p>

<h1 id="install">Install</h1>

<p><a href="https://code.google.com/p/pathtools/">https://code.google.com/p/pathtools/</a>에 들어가면 Update Site를 발견할 수 있다.</p>

<p>해당 Update Site를 등록해서 설치하도록 한다.</p>

<h1 id="config">Config</h1>

<p><img src="../../../files/captures/20140114/161722.png" alt="설정창 보기"></p>

<p>설정은 Eclipse Perferences 화면에서 볼 수 있으며, 위와 같이 단순하다.</p>

<p>기본 구성 그대로 사용해도 큰 무리는 없지만, 필요한 경우 수정을 해서 사용할 수 있다.</p>

<h1 id="terminal-대신-iterm2를-사용하기">Terminal 대신 iTerm2를 사용하기</h1>

<p><a href="http://yamkazu.hatenablog.com/entry/20100303/1267619468">http://yamkazu.hatenablog.com/entry/20100303/1267619468</a>에서 참고한 자료임</p>

<p>아래의 Script를 &quot;Apple Script 편집기&quot;를 사용해서 저장한다.</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">on run argv
    set cdTo to item 1 of argv
    tell application &quot;iTerm&quot;
        activate
        make new terminal
        tell the first terminal
            try
                launch session &quot;Default Session&quot;
            on error
                display dialog &quot;There was an error creating a new tab in iTerm.&quot; buttons {&quot;OK&quot;}
            end try
            tell the last session
                try
                    write text &quot;cd &quot; &amp; cdTo
                on error
                    display dialog &quot;There was an error cding to the requested path.&quot; buttons {&quot;OK&quot;}
                end try
            end tell
        end tell
    end tell
    return
end run
</code></pre></div>
<p>설정창을 열고 항목을 아래와 같이 바꿔준다. (<code>/Script/Location.scpt</code>는 저장한 Apple Script의 파일 경로)</p>

<ul>
<li>Shell at Folder : <code>/usr/bin/osascript &quot;/Script/Location.scpt&quot; &quot;{path}&quot;</code></li>
<li>Shell at File : <code>/usr/bin/osascript &quot;/Script/Location.scpt&quot; &quot;{parent-path}&quot;</code></li>
</ul>

<p>Shell 열기 기능을 사용해보면 Terminal 대신 iTerm2로 열리는 것을 확인할 수 있다.</p>

<h1 id="기본-text-editor-대신-sublime-text를-사용해서-열기">기본 Text Editor 대신 Sublime Text를 사용해서 열기</h1>

<p>기본 Sublime Text2가 설치되어 있다는 전제하에 설정창을 열고 항목을 아래와 같이 바꿔준다</p>

<ul>
<li>Edit Folder : <code>&quot;/Applications/Sublime Text 2.app/Contents/SharedSupport/bin/subl&quot; &quot;{path}&quot;</code></li>
<li>Edit File : <code>&quot;/Applications/Sublime Text 2.app/Contents/SharedSupport/bin/subl&quot; &quot;{path}&quot;</code></li>
</ul>

<p>External Editor 열기 기능을 사용해보면 Sublime Text2로 열리는 것을 확인할 수 있다.</p>
]]></content>
</article>



<article>
<title><![CDATA[Eclipse Word Wrap]]></title>
<url><![CDATA[/Web/Eclipse/Eclipse%20Word%20Wrap.html]]></url>
<content><![CDATA[<h1 id="eclipse-plug-in">Eclipse Plug-in</h1>

<p>기본적으로 Eclipse에 없는 Word Wrap 기능을 추가 시켜준다.</p>

<p>하지만, 막상 Code Editor에 쓰기엔 좀 거시기 하다. (뭔가 어색하다고 해야하나...)</p>

<p>추가적으로 Console에도 Word Wrap 기능이 추가되므로, Console 메세지를 확인할 때 사용할 만은 하다. </p>

<ul>
<li>다운로드 : <a href="http://ahtik.com/blog/projects/eclipse-word-wrap/">http://ahtik.com/blog/projects/eclipse-word-wrap/</a></li>
</ul>
]]></content>
</article>



<article>
<title><![CDATA[Finder 검색에서 원본 질의(Raw Query) 사용하기]]></title>
<url><![CDATA[/Web/Mac/Finder%20%E1%84%80%E1%85%A5%E1%86%B7%E1%84%89%E1%85%A2%E1%86%A8%E1%84%8B%E1%85%A6%E1%84%89%E1%85%A5%20%E1%84%8B%E1%85%AF%E1%86%AB%E1%84%87%E1%85%A9%E1%86%AB%20%E1%84%8C%E1%85%B5%E1%86%AF%E1%84%8B%E1%85%B4(Raw%20Query)%20%E1%84%89%E1%85%A1%E1%84%8B%E1%85%AD%E1%86%BC%E1%84%92%E1%85%A1%E1%84%80%E1%85%B5.html]]></url>
<content><![CDATA[<h1 id="finder-검색에서-원본-질의(raw-query)-보이기">Finder 검색에서 원본 질의(Raw Query) 보이기</h1>

<p>Finder에서 기본적으로 원본 질의가 감춰져 있는 편이다. (감춰져 있다기 보다는 일반적으로 쓸 일이 없으니...)</p>

<p><img src="../../../files/captures/20140131/001127.png" alt="파인더를 연다"></p>

<p><img src="../../../files/captures/20140131/001134.png" alt="Space 한 번"></p>

<p>Finder의 검색 창에 <strong>공백을 한 칸 주면 검색이 시작되게 된다.</strong></p>

<p><img src="../../../files/captures/20140131/001141.png" alt="검색 조건을 추가 시킨다"></p>

<p>검색 조건의 오른쪽 + 버튼을 눌러서 검색 조건을 하나 추가하고,</p>

<p><img src="../../../files/captures/20140131/001213.png" alt="원본 질의를 추가"></p>

<p>검색 타입에서 &quot;기타...&quot;을 선택했을 때 나오는 리스트에서 위와 같이 원본 질의를 찾을 수 있다.</p>

<p><img src="../../../files/captures/20140131/001221.png" alt="검색 조건으로 원본 질의를 선택"></p>

<p>이제 검색 조건을 원본 질의로 선택한다.</p>

<h1 id="원본-질의(raw-query)-조건식">원본 질의(Raw Query) 조건식</h1>

<p>원본 질의는 Mac 개발의 File Metadata Search를 사용하는듯 싶다. Mac 관련된 개발쪽은 자세히 모르기 때문에 패스...</p>

<p>그냥 일반적인 프로그래밍 언어의 조건식과 별다를바 없다. 자세한 사항들은 아래 링크에서...</p>

<ul>
<li><a href="http://osxnotes.net/spotlight.html">Spotlight syntax, mdfind examples, and metadata attributes</a></li>
<li><a href="https://developer.apple.com/library/mac/documentation/Carbon/Conceptual/SpotlightQuery/Concepts/QueryFormat.html">File Metadata Search Programming Guide</a> </li>
<li><a href="https://developer.apple.com/library/mac/documentation/carbon/reference/metadataattributesref/reference/commonattrs.html">File Metadata Attributes Reference</a></li>
</ul>

<h1 id="mavericks-tags-or-search">Mavericks Tags <code>OR</code> Search</h1>
<div class="highlight"><pre><code class="language-text" data-lang="text">(kMDItemUserTags == &#39;Inbox&#39;) || (kMDItemUserTags == &#39;Today&#39;) || (kMDItemUserTags == &#39;Priority&#39;) || (kMDItemUserTags == &#39;Complete&#39;)
</code></pre></div>
<p>OSX 10.9 Mavericks에 추가된 Tag는 <code>kMDItemUserTags</code>로 검색할 수 있고, <code>OR</code>는 일반적인 형태 그대로 <code>||</code> 문자를 사용해서 처리할 수 있다.</p>
]]></content>
</article>



<article>
<title><![CDATA[Flash Builder 성능 튜닝]]></title>
<url><![CDATA[/Flash/Environments/Flash%20Builder%20%E1%84%89%E1%85%A5%E1%86%BC%E1%84%82%E1%85%B3%E1%86%BC%20%E1%84%90%E1%85%B2%E1%84%82%E1%85%B5%E1%86%BC.html]]></url>
<content><![CDATA[<h1 id="jvm-memory-할당">JVM memory 할당</h1>

<h4 id="eclipse">eclipse</h4>

<ul>
<li>edit <code>Flash Builder.app/Contents/MacOS/Adobe Flash Builder 4.7.ini</code></li>
<li><code>-Xms</code>, <code>-Xmx</code>, <code>-XX:MaxPermSize</code>... 등 메모리 관련 설정을 적당히 올려줌</li>
</ul>

<h4 id="mxmlc,-compc">mxmlc, compc</h4>

<ul>
<li>edit <code>SDK/build.properties</code></li>
<li><code>jvm.args = ...</code> 라인에 있는 <code>-Xms</code>, <code>-Xmx</code> 등을 적당히 올려줌</li>
</ul>
]]></content>
</article>



<article>
<title><![CDATA[Flash Builder 에서 Theme Style 속성이 나오지 않을때]]></title>
<url><![CDATA[/Flash/Environments/Flash%20Builder%20%E1%84%8B%E1%85%A6%E1%84%89%E1%85%A5%20Theme%20Style%20%E1%84%89%E1%85%A9%E1%86%A8%E1%84%89%E1%85%A5%E1%86%BC%E1%84%8B%E1%85%B5%20%E1%84%82%E1%85%A1%E1%84%8B%E1%85%A9%E1%84%8C%E1%85%B5%20%E1%84%8B%E1%85%A1%E1%86%AD%E1%84%8B%E1%85%B3%E1%86%AF%E1%84%84%E1%85%A2.html]]></url>
<content><![CDATA[<h1 id="flash-builder-4.7-+-apach-flex-sdk-4.10-에서-[style(theme=&quot;spark&quot;)]-과-같은-속성들이-나오지-않을때">Flash Builder 4.7 + Apach Flex SDK 4.10 에서 <code>[Style(theme=&quot;spark&quot;)]</code> 과 같은 속성들이 나오지 않을때</h1>

<p>Project 내의 <code>.actionScriptProperties</code> 아래와 같이 수정한다</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">...
&lt;/compiler&gt;
&lt;applications&gt;
...
</code></pre></div>
<p>기존 이와 같은 부분을</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">...
&lt;/compiler&gt;
&lt;theme themeIsDefault=&quot;false&quot; themeIsSDK=&quot;true&quot; themeLocation=&quot;${SDK_THEMES_DIR}/frameworks/themes/Spark&quot;/&gt;
&lt;applications&gt;
...
</code></pre></div>
<p>위와 같이 수정해준다.</p>
]]></content>
</article>



<article>
<title><![CDATA[Flex Components]]></title>
<url><![CDATA[/Flash/Flex%20Component/Flex%20Components.html]]></url>
<content><![CDATA[<h1 id="flex-component-분석">Flex Component 분석</h1>

<h2 id="container-분석">container 분석</h2>

<ul>
<li>s:TileGroup</li>
<li>s:Panel</li>
<li>s:TitleWindow</li>
</ul>

<h2 id="controls-분석">controls 분석</h2>

<p>단순한 xml + image 를 통해서, skin file 들을 generate 시킬 수 있는 도구가 필요할 듯</p>

<h3 id="display-data">display data</h3>

<ul>
<li><p>s:DataGroup</p>

<ul>
<li>상당히 낮은 수준 (DataGroup &gt; GroupBase &gt; UIComponent) 의 API 에 속한다</li>
<li>complex 하지 않은 데이터들을 renderer 들을 통해 단순 출력 하는데 도움이 될듯

<ul>
<li>출력시 selection 에 의한 삭제 등도 간편하다. (데이터만 remove 하면 되니...)</li>
</ul></li>
<li>scroll 이 끊어지지 않는다. 끊어지는 scroll 의 경우는 List 를 이용해야 한다</li>
</ul></li>
<li><p>s:List</p>

<ul>
<li>skin control

<ul>
<li>Container 외곽을 Custom 해보기</li>
<li>Scroll 영역과 Container 영역의 스킨을 분할해보기</li>
<li>망할 이미지 튀지 않게 렌더링 해보기</li>
<li>Background 에 이미지 넣어보기</li>
<li>Validator 를 통해서 errorSkin 적용해보기</li>
</ul></li>
<li>layout control

<ul>
<li>Custom 시에 List 와 Renderer 가 분할하는 스킨 영역에 대해서 파악하기</li>
<li>Tree 형태로 custom 가능한지 확인</li>
<li>가로로 변경할 수 있는지 확인</li>
</ul></li>
<li>user control

<ul>
<li>Drag and drop 형식에 대해 정확히 파악하기</li>
<li>쓰기 입력을 시도해보기 (TextInput, CheckBox, ComboBox...)</li>
<li>Editable List

<ul>
<li><a href="http://dgrigg.com/blog/2010/06/25/editable-itemrenderer-for-flex-4-spark-list/">List Editable Cell</a></li>
</ul></li>
<li>Double Click 이벤트를 명확히 해보기</li>
<li>특정 index 로 스크롤링 시키기, 마지막으로 스크롤링 시키기</li>
<li>selection, unselection api 와 관련 event 모두 수집</li>
<li>invalidation 으로 drawing 컨트롤하기</li>
</ul></li>
<li>links

<ul>
<li><a href="http://help.adobe.com/en_US/flex/using/WSc2368ca491e3ff923c946c5112135c8ee9e-7fff.html">List 컴포넌트 개론</a></li>
<li><a href="http://invincure.tistory.com/entry/FLEX-Spark-List-control-in-Flex-4-%ED%8A%B9%EC%A0%95-%EC%9D%B8%EB%8D%B1%EC%8A%A4%EB%A1%9C-%EC%8A%A4%ED%81%AC%EB%A1%A4%EB%A7%81">특정 인덱스로 스크롤링</a></li>
<li><a href="http://dgrigg.com/blog/2010/07/06/flex-spark-list-with-custom-scroll-bar-and-itemrenderer/">List 컴포넌트 백그라운드 이미지 넣기</a></li>
<li><a href="http://evyatar-flex.blogspot.com/2012/05/reuse-spark-list-by-replacing-its-item.html">Layout 의 기준 데이터가 되는 typicalItem 1</a></li>
<li><a href="http://hansmuller-flex.blogspot.com/2011/05/using-datagrid-typicalitem-to-define.html">Layout 의 기준 데이터가 되는 typicalItem 2</a></li>
<li><a href="http://stackoverflow.com/questions/2554075/flex-4-enumerating-spark-list-items">List 아이템을 Looping</a></li>
<li><a href="http://flexponential.com/2011/02/13/scrolling-to-the-bottom-of-a-spark-list/">바닥으로 Scoll 이동 시키기</a></li>
<li><a href="http://blog.jidolstar.com/568">Spark Container 의 Layout, Scrolling, Viewports</a></li>
<li><a href="http://www.jeffryhouser.com/index.cfm/2011/1/25/How-do-you-force-rendereres-to-refresh-in-a-spark-list">invalidation 을 통한 전체 Renderer 리프레시</a></li>
<li><a href="http://help.adobe.com/en_US/flex/using/WS2db454920e96a9e51e63e3d11c0bf69084-7cfd.html">Data Container Drag and Drop 개론</a></li>
<li><a href="http://flexponential.com/2009/10/09/changing-the-position-of-the-scroll-bars-in-a-spark-list/">스크롤 대신 상, 하 버튼으로 커스터마이징 시키기</a></li>
<li><a href="http://www.rialitycheck.com/blog/index.cfm/2011/3/3/Animating-Spark-List-Items">타일리스트 Drag and Drop 시에 애니메이션 적용</a></li>
<li><a href="http://prsync.com/adobe/displaying-tree-like-hierarchical-data-in-a-spark-list-15515/">Tree Type List</a></li>
<li><a href="http://prsync.com/adobe/displaying-tree-like-hierarchical-data-in-a-spark-list-15515/">List Item Double Click</a></li>
</ul></li>
</ul></li>
<li><p>s:DataGrid</p></li>
<li><p>mx:AdvancedDataGrid</p>

<ul>
<li>writable

<ul>
<li>망할 writable 상태 컨트롤이 힘들다.

<ul>
<li>ElasticDataGrid 를 따로 만들어서 사용할 필요가 있다</li>
<li>writable 상태에서의 tab key control, validation 이 중요하다 </li>
</ul></li>
</ul></li>
<li>tree

<ul>
<li>Tree 형태 커스텀 시에 짜증이 치밀어오르게 된다.

<ul>
<li>새로운 control 을 만들기엔 손해가 크다.</li>
<li>skin custom 시킬 방식을 확보해두는 것이 좋다</li>
</ul></li>
</ul></li>
</ul></li>
<li><p>mx:OLAPDataGrid</p></li>
<li><p>mx:ProgressBar</p></li>
<li><p>mx:Tree</p>

<ul>
<li>menu 의 다양한 디자인으로 custom 시에 짜증이 치솟는다

<ul>
<li>새로운 control 을 만들기엔 손해가 크고, </li>
<li>skin custom 방식을 많이 확보해 두는 것이 좋다</li>
</ul></li>
<li>정말 custom 하느니 새로 만들고 말지 싶은 것들을 위해

<ul>
<li>Elastic Tree 를 만들어 두는 것도 나쁘지 않을 듯</li>
</ul></li>
</ul></li>
</ul>

<h3 id="chart">chart</h3>

<ul>
<li>mx:AreaChart</li>
<li>mx:BarChart</li>
<li>mx:BubbleChart</li>
<li>mx:CandlestickChart</li>
<li>mx:ColumnChart

<ul>
<li>stacked 형태를 확보할 방식을 찾자</li>
</ul></li>
<li>mx:HLOCChart</li>
<li>mx:LineChart</li>
<li>mx:PieChart</li>
<li>mx:PlotChart</li>
</ul>

<p>답이 없다. 가능한 다양한 사례들을 확보해두는 것이 최선이다.</p>

<h3 id="display-media">display media</h3>

<ul>
<li>s:Label</li>
<li><p>s:RichText</p></li>
<li><p>s:Image</p></li>
<li><p>mx:SWFLoader</p></li>
<li><p>s:VideoDisplay</p></li>
<li><p>s:VideoPlayer</p></li>
</ul>

<h3 id="trigger">trigger</h3>

<ul>
<li>s:Button

<ul>
<li>icon + label 을 한꺼번에 표현할 때 애매해진다</li>
</ul></li>
<li>s:PopUpAnchor</li>
<li>s:ToggleButton</li>
<li>mx:LinkButton</li>
<li>mx:PopUpButton</li>
</ul>

<h3 id="common">common</h3>

<ul>
<li>mx:ToolTip (and error tip)

<ul>
<li>기본 tooltip 과 errortip 의 독립 스타일링</li>
<li>drawing 을 자유롭게 할 수 있는 방법 찾기</li>
<li><a href="http://help.adobe.com/en_US/flex/using/WS2db454920e96a9e51e63e3d11c0bf69084-7f5c.html">Error Tip</a></li>
<li><a href="https://sites.google.com/site/koreanflexdoc/4-0/usingsdk/ws37cb61f8f3397d86-3c9628be12089177f65-8000/ws2db454920e96a9e51e63e3d11c0bf69084-7f3f/ws2db454920e96a9e51e63e3d11c0bf69084-7f5c-1">Error Tip 한글</a></li>
<li>[Error Tip 좌측으로 넣기)(<a href="http://cesaric.com/?p=663">http://cesaric.com/?p=663</a>)</li>
<li><a href="http://help.adobe.com/en_US/flex/using/WS2db454920e96a9e51e63e3d11c0bf69084-7f61.html">Tool Tip 스타일링</a></li>
<li><a href="http://www.tonyamoyal.com/2009/05/05/small-tool-tips-for-adobe-flex-validation-errors/">Tool Tip, Error Tip 스타일링</a></li>
</ul></li>
<li>mx:Validator

<ul>
<li>아마도 component 는 errorSkin 상태로 바꾸고, 동시에 errortip 을 띄우게 하는듯...</li>
<li><a href="http://ria-java.tistory.com/60">Validator</a></li>
<li><a href="http://help.adobe.com/en_US/flex/using/WS2db454920e96a9e51e63e3d11c0bf69084-7f52.html">Validator</a></li>
</ul></li>
</ul>

<h3 id="input">input</h3>

<ul>
<li>s:TextInput

<ul>
<li>custom component 에서도 validator 결합이 되는지 확인해보기</li>
<li>validator, restrict 결합된 mediator 만들어보기</li>
<li>Validator + restrict 로 보충하기 (숫자형, 문자형, 특수형)</li>
<li><a href="http://ria-java.tistory.com/60">http://ria-java.tistory.com/60</a></li>
<li><a href="http://flexscript.wordpress.com/2008/09/22/flex-creating-custom-validators/">http://flexscript.wordpress.com/2008/09/22/flex-creating-custom-validators/</a></li>
<li><a href="http://rduk.tistory.com/47">http://rduk.tistory.com/47</a></li>
</ul></li>
<li>s:TextArea</li>
<li>s:RichEditableText ??? TextArea 형태가 아니다. 안쓰는게 좋겄다...</li>
</ul>

<h3 id="choose">choose</h3>

<ul>
<li>s:CheckBox</li>
<li><p>s:RadioButton</p>

<ul>
<li>CheckBox 와 RadioButton 은 가능한 쓰지 않는다.</li>
<li>대신 만들고 있는 List 기반의 Selector 를 사용한다</li>
</ul></li>
<li><p>s:ComboBox ( + TextInput )</p>

<ul>
<li>DropDownList 를 사용해라. &quot;선택 이외의 사용자 입력이 가능하다&quot; 는 상황에서만 사용해라.</li>
</ul></li>
<li><p>s:DropDownList</p></li>
<li><p>mx:DateChooser</p>

<ul>
<li>Skin api 숙지가 필요</li>
<li><a href="http://visualscripts.blogspot.com/2011/10/spark-datefield-and-datechooser.html">Spark Date Chooser 1</a></li>
<li><a href="http://blogs.adobe.com/aharui/2010/01/spark_datefield_and_colorpicke.html">Spark Date Chooser 2</a></li>
</ul></li>
<li><p>mx:DateField ( + TextInput )</p>

<ul>
<li>기본 사용자 입력이 가능하게 Custom 해두자

<ul>
<li>TextInput focus 상황에서 tooltip 을 통해 입력 가능한 포맷에 대한 설명</li>
<li>입력 이후 Validate 해서, 검증되면 값 적용, 잘못된 포맷이면 값 지워버리기 ( 3 ~ 4초간 errorTip 띄워주기? )<br></li>
</ul></li>
<li><a href="http://invincure.tistory.com/entry/Flex-DateField-%EC%97%90-%EC%82%AC%EC%9A%A9%EC%9E%90%EA%B0%80-%EA%B0%92%EC%9D%84-%EC%9E%85%EB%A0%A5%ED%95%98%EB%8F%84%EB%A1%9D-%ED%95%98%EA%B3%A0-validate-%ED%95%98%EA%B8%B0">사용자 입력 이후 Validate</a></li>
</ul></li>
<li><p>mx:Menu</p></li>
<li><p>s:ButtonBar</p></li>
<li><p>s:TabBar</p></li>
<li><p>mx:ColorPicker</p></li>
</ul>

<h3 id="choose-number">choose number</h3>

<ul>
<li><p>s:NumericStepper ( + TextInput )</p>

<ul>
<li>정수형 숫자일 경우 쓰잘데기 없는 TextInput 작업보다 이걸로 표현하는게 더 나을수도 있다</li>
</ul></li>
<li><p>s:Slider</p></li>
<li><p>s:Spinner</p></li>
<li><p>s:ScrollBar</p></li>
<li><p>s:Scroller</p></li>
</ul>

<h3 id="layout">layout</h3>

<ul>
<li>s:Group</li>
<li>s:Panel</li>
<li>s:TitleWindow</li>
</ul>
]]></content>
</article>



<article>
<title><![CDATA[Flex Display Models]]></title>
<url><![CDATA[/Flash/Flex%20%E1%84%8B%E1%85%AF%E1%86%AB%E1%84%85%E1%85%A9%E1%86%AB/Flex%20Display%20Models.html]]></url>
<content><![CDATA[<h1 id="flex-의-주요-display-models">Flex 의 주요 Display Models</h1>

<h3 id="ivisualelement,-ivisualelementcontainer"><code>IVisualElement</code>, <code>IVisualElementContainer</code></h3>

<p>Flex4 의 display 최하 단위</p>

<ul>
<li><code>GraphicElement</code> container 에 graphics drawing 을 할 때 사용되어 지는 element. display object 가 아니기 때문에 가볍다.</li>
<li><code>SpriteVisualElement</code> sprite 를 상속 받았다. 기본 제공되는 display object 기반의 element 중에서 가장 가볍다.</li>
<li><code>UIComponent</code> display invalidation 이 지원되는 가장 최하위 단위의 element</li>
</ul>

<h3 id="skinnablecomponent-과-skin"><code>SkinnableComponent</code> 과 <code>Skin</code></h3>

<p>Flex4 spark component 의 기본 구조가 된다. Skin 구조를 이룬다.</p>

<ul>
<li><code>SkinnableComponent</code> 스킨 처리가 가능한 최하 단위 display object</li>
<li><code>SparkSkin --&gt; Skin --&gt; Group --&gt; UIComponent</code> spark theme 에 편승하는 구조라면 SparkSkin 을 상속 받는게 편하다.</li>
</ul>

<h1 id="display-invalidation-구조">Display Invalidation 구조</h1>

<p><a href="Display%20Invalidation.md">Display Invalidation</a></p>

<h1 id="skinnable-component-에서-[skinpart]-들이-모두-들어오는-시점">Skinnable Component 에서 [SkinPart] 들이 모두 들어오는 시점</h1>

<ol>
<li><code>FlexEvent.PREINITIALIZE</code> </li>
<li><code>getStyle(&quot;skinStyle&quot;)</code></li>
<li><code>partAdded</code></li>
<li><code>FlexEvent.INITIALIZE</code> 이 시점부터 [SkinPart] 들이 존재한다</li>
<li><code>FlexEvent.CREATION_COMPLETE</code></li>
<li><code>Event.ADDED_TO_STAGE</code></li>
</ol>

<p><code>FlexEvent.INITIALIZE</code> 에 기본 구성 요소들이 모두 들어오긴 하지만, <code>state + includeIn</code> 조합에 의해 포함되어지지 않는 요소들 역시 있으므로 Event 의 추가 삭제 등은 <code>partAdded()</code> 에서 선언되는 것이 좋다.</p>
]]></content>
</article>



<article>
<title><![CDATA[Flex Popup on Spark SkinnablePopUpContainer]]></title>
<url><![CDATA[/Flash/Flex%20Component/Flex%20Popup%20on%20Spark%20SkinnablePopUpContainer.html]]></url>
<content><![CDATA[<h1 id="flex-alert-with-spark-component">Flex Alert with Spark Component</h1>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;s:SkinnablePopUpContainer xmlns:fx=&quot;http://ns.adobe.com/mxml/2009&quot; xmlns:s=&quot;library://ns.adobe.com/flex/spark&quot; xmlns:mx=&quot;library://ns.adobe.com/flex/mx&quot;&gt;
    &lt;fx:Script&gt;
        &lt;![CDATA[
            import mx.core.FlexGlobals;
            import mx.managers.PopUpManager;

            import spark.components.Application;

            [Bindable]
            public var message:String;

            [Bindable]
            public var title:String;

            private static var alert:Alert;
            private static var app:Application;

            public static function show(message:String, title:String):void {
                if (!alert) {
                    alert=new Alert;
                    app=FlexGlobals.topLevelApplication as Application;
                }
                alert.message=message;
                alert.title=title;
                alert.open(app, true);

                PopUpManager.centerPopUp(alert);
            }
        ]]&gt;
    &lt;/fx:Script&gt;

    &lt;s:Panel title=&quot;{title}&quot;&gt;
        &lt;s:layout&gt;
            &lt;s:VerticalLayout paddingTop=&quot;35&quot; paddingBottom=&quot;25&quot; paddingLeft=&quot;40&quot; paddingRight=&quot;40&quot; gap=&quot;25&quot; horizontalAlign=&quot;center&quot; verticalAlign=&quot;middle&quot;/&gt;
        &lt;/s:layout&gt;

        &lt;s:Label text=&quot;{message}&quot; maxWidth=&quot;500&quot; fontFamily=&quot;pfsquareReg&quot; fontSize=&quot;13&quot; color=&quot;0x000000&quot;/&gt;
        &lt;s:Button label=&quot;OK&quot; click=&quot;close()&quot; width=&quot;88&quot; height=&quot;26&quot;/&gt;
    &lt;/s:Panel&gt;
&lt;/s:SkinnablePopUpContainer&gt;
</code></pre></div>
<p>Spark 에서는 Alert, Confirm, Prompt 와 같은 알림 처리를 모두 <a href="http://help.adobe.com/en_US/flex/using/WS67cd75b2532ad652-1abb110512d5bda966d-8000.html">SkinnablePopUpContainer</a> 를 통해 처리할 수 있다.</p>

<ul>
<li><code>open()</code> 팝업 형태로 연다</li>
<li><code>close()</code> 팝업을 닫는다</li>
</ul>

<h2 id="mission">Mission</h2>

<ol>
<li><code>ssen.displaykit</code> 에 간단하게 Alert, Confirm 을 기본 기능을 비롯한 여러 Selector 를 만들어놓자.</li>
<li><code>Selector</code> 라는 Button 을 통해서 UI 공간이 충분할 경우엔 DropdownList 형태로 열고, 공간이 좁을 경우엔 <a href="http://help.adobe.com/en_US/flex/using/WS67cd75b2532ad652-1abb110512d5bda966d-8000.html">SkinnablePopUpContainer</a> 형태로 여는 방식을 생각해보자</li>
</ol>
]]></content>
</article>



<article>
<title><![CDATA[Flex Spark Label]]></title>
<url><![CDATA[/Flash/Flex%20Component/Flex%20Spark%20Label.html]]></url>
<content><![CDATA[<h1 id="spark-label-linebreak">Spark Label linebreak</h1>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;s:Label text=&quot;line{&#39;\n&#39;}break&quot; maxDisplayedLine=&quot;2&quot; lineBreak=&quot;explicit&quot;/&gt;
</code></pre></div>
<p>필요한 요건들</p>

<ul>
<li><code>maxDisplayedLine</code> 이 <code>2</code> 를 넘어야 함</li>
<li>line break 문자는 <code>{&#39;\n&#39;}</code> 로 써줘야 함</li>
</ul>
]]></content>
</article>



<article>
<title><![CDATA[Flex Tooltip]]></title>
<url><![CDATA[/Flash/Flex%20Component/Flex%20Tooltip.html]]></url>
<content><![CDATA[<h1 id="flex-tooltip-component-customization">Flex Tooltip Component Customization</h1>
<div class="highlight"><pre><code class="language-xml" data-lang="xml"><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span>
<span class="nt">&lt;s:BorderContainer</span> <span class="na">xmlns:fx=</span><span class="s">&quot;http://ns.adobe.com/mxml/2009&quot;</span> <span class="na">xmlns:s=</span><span class="s">&quot;library://ns.adobe.com/flex/spark&quot;</span> <span class="na">xmlns:mx=</span><span class="s">&quot;library://ns.adobe.com/flex/mx&quot;</span> <span class="na">implements=</span><span class="s">&quot;mx.core.IToolTip&quot;</span>
                   <span class="na">backgroundColor=</span><span class="s">&quot;0xffffff&quot;</span> <span class="na">backgroundAlpha=</span><span class="s">&quot;0.9&quot;</span> <span class="na">borderColor=</span><span class="s">&quot;0x12478d&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;fx:Script&gt;</span>
        <span class="cp">&lt;![CDATA[</span>
<span class="cp">            import mx.events.ToolTipEvent;</span>

<span class="cp">            import flashx.textLayout.conversion.TextConverter;</span>
<span class="cp">            import flashx.textLayout.elements.TextFlow;</span>

<span class="cp">            [Bindable]</span>
<span class="cp">            private var tlf:TextFlow;</span>

<span class="cp">            private var _text:String;</span>

<span class="cp">            public function get text():String {</span>
<span class="cp">                return _text;</span>
<span class="cp">            }</span>

<span class="cp">            public function set text(value:String):void {</span>
<span class="cp">                _text=value;</span>

<span class="cp">                var format:String=(value.indexOf(&quot;&lt;&quot;) &gt; -1) ? TextConverter.TEXT_FIELD_HTML_FORMAT : TextConverter.PLAIN_TEXT_FORMAT;</span>
<span class="cp">                tlf=TextConverter.importToFlow(value, format);</span>
<span class="cp">            }</span>

<span class="cp">            public static function create(borderColor:uint, text:String, event:ToolTipEvent):void {</span>
<span class="cp">                var tip:HtmlTooltip=new HtmlTooltip;</span>
<span class="cp">                tip.setStyle(&quot;borderColor&quot;, borderColor);</span>
<span class="cp">                tip.text=text;</span>

<span class="cp">                event.toolTip=tip;</span>
<span class="cp">            }</span>
<span class="cp">        ]]&gt;</span>
    <span class="nt">&lt;/fx:Script&gt;</span>
    <span class="nt">&lt;s:RichText</span> <span class="na">textFlow=</span><span class="s">&quot;{tlf}&quot;</span> <span class="na">left=</span><span class="s">&quot;10&quot;</span> <span class="na">right=</span><span class="s">&quot;10&quot;</span> <span class="na">top=</span><span class="s">&quot;10&quot;</span> <span class="na">bottom=</span><span class="s">&quot;10&quot;</span> <span class="na">fontSize=</span><span class="s">&quot;11&quot;</span> <span class="na">color=</span><span class="s">&quot;0x000000&quot;</span><span class="nt">/&gt;</span>
<span class="nt">&lt;/s:BorderContainer&gt;</span>
</code></pre></div>
<p>기본 Plain Text 형식과 HTML 형식 모두를 지원하도록 Custom</p>

<ul>
<li>초기화 <code>ToolTipManager.toolTipClass=HtmlTooltip</code> 으로 초기화</li>
<li>기본 사용 <code>toolTip=&quot;Plain Text&quot;</code> 또는 <code>toolTip=&#39;&lt;b&gt;Html&lt;/b&gt;&lt;br /&gt;Text&#39;</code></li>
<li>좀 더 확장된 기능이 요구되는 경우에는 <code>toolTipCreate=&quot;HtmlTooltip.create(borderColor, text, event)&quot;</code> 형태로 사용한다</li>
</ul>
]]></content>
</article>



<article>
<title><![CDATA[Flex Tree]]></title>
<url><![CDATA[/Flash/Flex%20Component/Flex%20Tree.html]]></url>
<content><![CDATA[<ul>
<li><a href="http://chris.firlingcanada.com/flexdevtips/flex3/treelines/srcview/index.html">add line to Flex Tree Component</a></li>
<li><a href="http://flexdevtips.blogspot.kr/2009/04/tree-lines.html">Flex Tree Lines</a></li>
<li><a href="http://www.flex-blog.com/change-open-and-close-icons-on-flex-tree/">Change Open and Close</a></li>
</ul>
]]></content>
</article>



<article>
<title><![CDATA[Getting Started]]></title>
<url><![CDATA[/Web/Angular/Getting%20Started.html]]></url>
<content><![CDATA[<h1 id="directives">Directives</h1>

<ul>
<li>text binding

<ul>
<li><code>ng-bind</code> </li>
<li><code>ng-bind-html</code></li>
<li><code>ng-bind-template</code></li>
</ul></li>
<li></li>
</ul>

<h2 id="ng-bind"><code>ng-bind</code></h2>

<p>기본적인 model - view binding은 아래와 같이 처리 가능하다</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;body ng-app&gt;
    &lt;input type=&quot;text&quot; ng-model=&quot;user.name&quot;/&gt;
    &lt;h3&gt;Echo : &lt;/h3&gt;
&lt;/body&gt;
</code></pre></div>
<p><code>ng-bind</code>는 아래와 같은 사용을 가능하게 해준다</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;body ng-app&gt;
    &lt;input type=&quot;text&quot; ng-model=&quot;user.name&quot;/&gt;
    &lt;h3&gt;Echo : &lt;span ng-bind=&quot;user.name&quot;/&gt;&lt;/h3&gt;
&lt;/body&gt;
</code></pre></div>]]></content>
</article>



<article>
<title><![CDATA[HTTP Spec]]></title>
<url><![CDATA[/Programming/HTTP%20Spec.html]]></url>
<content><![CDATA[<h1 id="http-1.1-spec">HTTP 1.1 Spec</h1>

<h2 id="documentation">Documentation</h2>

<ul>
<li><a href="http://coffeenix.net/doc/network/http_1_0_vs_1_1.html">HTTP 1.0, HTTP 1.1 Spec</a></li>
<li><a href="http://kldp.org/node/44139">If-Modified-Since 에 대해</a></li>
</ul>

<h2 id="sample">Sample</h2>

<h3 id="daum">Daum</h3>

<p>Request</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">GET http://www.daum.net/ HTTP/1.1
Host: www.daum.net
Proxy-Connection: keep-alive
Cache-Control: max-age=0
User-Agent: Mozilla/5.0 (Windows NT 6.1) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.79 Safari/535.11
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
Accept-Encoding: gzip,deflate,sdch
Accept-Language: ko-KR,ko;q=0.8,en-US;q=0.6,en;q=0.4
Accept-Charset: windows-949,utf-8;q=0.7,*;q=0.3
Cookie: __utma=65144763.157943217.1331689556.1331689556.1331689556.1; __utmz=65144763.1331689556.1.1.utmcsr=clien.career.co.kr|utmccn=(referral)|utmcmd=referral|utmcct=/cs2/bbs/link.php; dtck_seq=180; dtck_refresh=0; TIARA=AMYKB7u5XL-oRm-QKrnKwWX58zFgTPMo1J3dMHQi5dp-Hemni--GQ.IAILEwtiwXq_Q4VJbmZ8A0
</code></pre></div>
<p>Response</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">HTTP/1.1 200 OK
Date: Mon, 19 Mar 2012 06:46:14 GMT
Server: Apache
Expires: Sat, 01, Jan 1970 22:00:00 GMT
Pragma: no-cache
Cache-Control: no-cache, no-store, must-revalidate
P3P: CP=&quot;ALL DSP COR MON LAW IVDi HIS IVAi DELi SAMi OUR LEG PHY UNI ONL DEM STA INT NAV PUR FIN OTC GOV&quot;
Vary: Accept-Encoding
Content-Type: text/html; charset=utf-8
Content-Length: 47784
Connection: close
Content-Encoding: gzip
Set-Cookie: dtck_seq=181; path=/; expires=Wed, 18-Apr-2012 06:46:14 GMT; domain=www.daum.net
</code></pre></div>
<h3 id="node.js-document-site">Node.js Document Site</h3>

<p>Request</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">GET http://nodejs.org/docs/latest/api/http.html HTTP/1.1
Host: nodejs.org
Proxy-Connection: keep-alive
Cache-Control: max-age=0
User-Agent: Mozilla/5.0 (Windows NT 6.1) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.79 Safari/535.11
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
Referer: http://nodejs.org/docs/latest/api/
Accept-Encoding: gzip,deflate,sdch
Accept-Language: ko-KR,ko;q=0.8,en-US;q=0.6,en;q=0.4
Accept-Charset: windows-949,utf-8;q=0.7,*;q=0.3
Cookie: __utma=212211339.1873282363.1331715866.1331877515.1332114742.6; __utmc=212211339; __utmz=212211339.1331715866.1.1.utmcsr=(direct)|utmccn=(direct)|utmcmd=(none)
If-Modified-Since: Sat, 17 Mar 2012 18:08:33 GMT
</code></pre></div>
<p>Response</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">HTTP/1.1 304 Not Modified
Server: nginx
Date: Mon, 19 Mar 2012 06:50:01 GMT
Content-Type: text/html
Last-Modified: Sat, 17 Mar 2012 18:08:33 GMT
Accept-Ranges: bytes
Connection: close
Age: 0
</code></pre></div>
<h2 id="http-1.1-spec">HTTP 1.1 Spec</h2>

<ul>
<li>상용 Head???

<ul>
<li>General Header

<ul>
<li>Date 

<ul>
<li>현재 시간 </li>
<li><code>Mon, 19 Mar 2012 06:46:14 GMT</code> 현재 시간</li>
</ul></li>
<li>Cache-Control

<ul>
<li>캐시 여부, 업데이트시간, 내용, 지움 등 컨트롤</li>
<li>Request 시에 캐시된 사본을 강제적으로 검증하게 하려면 <code>Cache-Control: max-age=0</code> 으로 지정</li>
<li><a href="http://blog.combel.net/entry/Cache-Control?category=0">Cache-Control 에 대해서</a></li>
</ul></li>
<li>Connection

<ul>
<li>연결 끊기 http1.1 은 연결 지속이 가능? </li>
<li>Response 시에 현재 연결 정보. 보통은 <code>Connection: close</code> </li>
</ul></li>
<li>Transfer-Encoding

<ul>
<li>Body 의 압축방식</li>
<li><a href="http://blog.bagesoft.com/917">Transfer-Encoding 정보</a></li>
</ul></li>
<li>Upgrade

<ul>
<li>프로토콜 변경시</li>
<li><code>Upgrade: HTTP/2.0, SHTTP/1.3, IRC/6.9, RTA/x11</code></li>
</ul></li>
<li>Via

<ul>
<li>중계서버(프록시, 게이트웨이 등)의 지원프로토이름, 버전, 호스트명</li>
</ul></li>
</ul></li>
<li>Entity Header

<ul>
<li>Allow</li>
<li>Content-Encoding</li>
<li>Content-Length</li>
<li>Content-Type</li>
<li>expires</li>
<li>Last-Modified</li>
<li>Content-Base</li>
<li>Content-Language</li>
<li>Content-Location</li>
<li>Content-MD5</li>
<li>Content-Range</li>
<li>ETag</li>
</ul></li>
</ul></li>
<li>Request

<ul>
<li>Request Line

<ul>
<li>Method</li>
<li>Request-URI</li>
<li>HTTP-Version</li>
</ul></li>
<li>Request Header

<ul>
<li>Authorization</li>
<li>From</li>
<li>If-Modified-Since</li>
<li>Refer</li>
<li>User-Agent</li>
<li>Accept</li>
<li>Accept-Charset</li>
<li>Accept-Encoding</li>
<li>Accept-Language</li>
<li>Host</li>
<li>If-Match</li>
<li>If-None-Match</li>
<li>If-Range</li>
<li>If-Unmodified-Since</li>
<li>Max-Forwards</li>
<li>Proxy-Authorization</li>
<li>Range</li>
</ul></li>
</ul></li>
<li>Response

<ul>
<li>Status Line

<ul>
<li>HTTP-Version</li>
<li>Status-Code</li>
<li>Respon-Phrase</li>
</ul></li>
<li>Response Header

<ul>
<li>Location</li>
<li>Server</li>
<li>WWW-Authenticate</li>
<li>Age</li>
<li>Proxy-Authenticate</li>
<li>Public</li>
<li>Retry-After</li>
<li>Warning</li>
<li>Vary</li>
</ul></li>
</ul></li>
</ul>

<h2 id="http-status">HTTP Status</h2>

<h2 id="multipart-form-data-의-이어-올리기,-이어-내리기">Multipart form data 의 이어 올리기, 이어 내리기</h2>

<h2 id="cache-control">Cache Control</h2>
]]></content>
</article>



<article>
<title><![CDATA[HTTP]]></title>
<url><![CDATA[/Programming/HTTP.html]]></url>
<content><![CDATA[<h1 id="rest---representational-state-transfer">REST - Representational State Transfer</h1>

<ul>
<li>URI 는 정보의 자원 위치를 표현해야 한다</li>
<li>자원에 대해 어떤 행동을 할지는 HTTP Method (GET, POST, PATCH, DELETE) 로 표현한다</li>
</ul>

<p>URI 의 자원은 Collection 과 Element 로 구성될 수 있으며, 그에 대한 Method 규칙은 아래와 같이 적용될 수 있다</p>

<table><thead>
<tr>
<th>URI</th>
<th>POST</th>
<th>GET</th>
<th>PATCH</th>
<th>DELETE</th>
</tr>
</thead><tbody>
<tr>
<td>/users</td>
<td>user 들을 저장할 collection을 만든다</td>
<td>user collection 의 리스트를 가져온다</td>
<td>user collection 의 목록을 수정한다</td>
<td>user collection 을 삭제한다</td>
</tr>
<tr>
<td>/users/ssen</td>
<td>새로운 user ssen 을 생성한다</td>
<td>user ssen 의 정보를 가져온다</td>
<td>user ssen 의 정보를 수정한다</td>
<td>user ssen 을 삭제한다</td>
</tr>
</tbody></table>

<p>REST API 설계 상 주요하게 사용될 수 있는 HTTP Request header 들은 아래와 같다</p>

<ul>
<li><code>User-Agent</code> 사용자의 Device 를 분석해서 그에 맞는 Contents 를 구성할 여지가 된다</li>
<li><code>Accept</code> 사용자가 원하는 정보를 지정할 수 있는 여지가 된다 (ex. html 을 원할때와 단순 api 로서 작동할 때)</li>
<li><code>Accept-Language</code> 다국어 처리에 대한 여지가 된다</li>
</ul>

<h2 id="참고-restful-api-설계의-5가지-확인-사항">참고 RESTful API 설계의 5가지 확인 사항</h2>

<ul>
<li>API 의 endpoint 를 여러 목적으로 재활용하지 말라 (자원의 주소를 정확히 표현하라)</li>
<li>모든 요청은 Method 의 의미에 맞게 사용하라 (POST 만 사용한다거나 하지 마라)</li>
<li>응답의 상태를 Body 에 표현하지 마라. (가능한 HTTP Status Code 를 사용하라)</li>
<li>URL 에 동사적 표현(Verb)을 사용하지 마라 (상태 조회시에 <code>/ticket/activate</code> 보다는 <code>/ticket/status</code> 가 명확하다)</li>
<li>REST 는 RPC 가 아니다. URL 에 호출해야 하는 메서드를 적지 마라.</li>
</ul>

<p>하지만, 무엇보다 중요한 것은 인간이 이해할 수 있도록 디자인 되는 것이다.</p>

<blockquote>
<p>URL 을 보고 자원의 특성을 바로 이해하고, 지원 Method 를 보고 어떤 작동을 시킬 수 있는지 바로 이해하고, 지원 Accept 를 보고 어떤 자원을 받을 수 있는지 바로 이해할 수 있도록 해라.</p>
</blockquote>

<h1 id="request">Request</h1>

<h2 id="http-method">HTTP Method</h2>

<p>method 를 통해 request 가 어떤 의도를 가지는지 분기할 수 있다</p>

<ul>
<li><code>GET</code> Read</li>
<li><code>POST</code> Create</li>
<li><code>PATCH</code> Update</li>
<li><code>DELETE</code> Delete</li>
<li><code>HEAD</code> GET 과 같지만, 특수하게 <code>http header</code> 만 가져오게 된다</li>
<li><code>PUT</code> POST 와 유사</li>
<li><code>OPTIONS</code> 요청한 URL 이 응답할 수 있는 <code>http method</code> 가 무엇인지 요청한다</li>
</ul>

<p>보안 상 기능을 구현하지 않을 method 는 비활성 시키는 것이 좋다</p>

<h2 id="&quot;accept&quot;-client-의-사용-가능한-상황을-알리기">&quot;Accept&quot; Client 의 사용 가능한 상황을 알리기</h2>

<ul>
<li><code>Accept &quot;text/html, image/*, *&quot;</code> client 가 받을 수 있는 type 들을 알림 </li>
<li><code>Accept-Language &quot;en, ko&quot;</code> client 의 사용 언어를 알림</li>
<li><code>Accept-Encoding &quot;gzip, compress&quot;</code> client 가 받을 수 있는 encoding type 을 알림</li>
<li><code>Accept-Charset &quot;iso8859-5&quot;</code> client 가 받을 수 있는 문자셋을 알림</li>
</ul>

<p>일반적인 경우 <code>Accept</code> 는 REST api 에서 되돌려 받을 return type 의 지정으로 사용 가능하고, <code>Accept-Language</code> 의 경우엔 다국어 처리의 기준으로 사용될 수 있다.</p>

<h2 id="브라우저-정보">브라우저 정보</h2>

<ul>
<li><code>User-Agent</code> Device 의 종류, Browser 의 종류 등을 알리는 정보</li>
</ul>

<h1 id="response">Response</h1>

<h2 id="cache-control">Cache Control</h2>

<p>Static file 과 같이 Cache 에 저장될 수 있는 정보들을 보낼때 의미가 있다</p>

<ul>
<li><code>Last-Modified &quot;Tue, 11 Jul 2000 18:23:51 GMT&quot;</code> 마지막 수정 시간을 알린다</li>
</ul>

<h1 id="file-upload,-download-시에-사용-가능한-http-정보들">File Upload, Download 시에 사용 가능한 HTTP 정보들</h1>

<p>&lt;&gt;</p>

<h1 id="http-status-code">HTTP Status Code</h1>

<p><a href="evernote:///view/2127944/s20/d9e60981-e470-49a6-8cea-d912f8c25aed/d9e60981-e470-49a6-8cea-d912f8c25aed/">evernote:///view/2127944/s20/d9e60981-e470-49a6-8cea-d912f8c25aed/d9e60981-e470-49a6-8cea-d912f8c25aed/</a></p>
]]></content>
</article>



<article>
<title><![CDATA[IFactory 가 해석되는 방식]]></title>
<url><![CDATA[/Flash/Flex%20%E1%84%8B%E1%85%AF%E1%86%AB%E1%84%85%E1%85%A9%E1%86%AB/IFactory%20%E1%84%80%E1%85%A1%20%E1%84%92%E1%85%A2%E1%84%89%E1%85%A5%E1%86%A8%E1%84%83%E1%85%AC%E1%84%82%E1%85%B3%E1%86%AB%20%E1%84%87%E1%85%A1%E1%86%BC%E1%84%89%E1%85%B5%E1%86%A8.html]]></url>
<content><![CDATA[<h1 id="실험과-결과">실험과 결과</h1>

<h3 id="실험-조건">실험 조건</h3>

<ul>
<li><code>keep-generated-actionscript=true</code> 옵션을 줘서, 산출되는 Actionscript Code 를 보고 작동 원리를 분석했다</li>
</ul>

<h3 id="실험-결과">실험 결과</h3>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;SomeContainer&gt;
    &lt;...&gt;
        &lt;fx:Component&gt;
            &lt;SomeClass a=&quot;1&quot; /&gt;
        &lt;/fx:Component&gt;
    &lt;...&gt;
&lt;/SomeContainer&gt;
</code></pre></div>
<p>과 같은 식으로 선언된 부분은 아래와 같은 새로운 Class 를 작성시키게 된다</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">// SomeContainerInnerClass0-generated.as
public class SomeContainerInnerClass0 extends SomeClass {
    ...
    public function SampleInnerClass0() {
        super();
        ...
        this.a = 1;
        ...
    }
    ...
}
</code></pre></div>
<p><strong>즉, <code>constructor</code> 상에서 선언된 값을 넣어주는 상속된 형태의 새로운 Class 를 생성시켜서 처리한다</strong></p>

<h3 id="결론">결론</h3>

<ol>
<li><strong>작동은 안정적이다.</strong> <code>&lt;fx:Component&gt;</code> 에서 선언된 속성을 런타임 시에 밀어넣지 않고 <code>constructor</code> 에서 선언하므로 문제 발생 여지가 적다.</li>
<li><strong>부하 가능성은 있다.</strong> <code>&lt;fx:Component&gt;</code> 마다 개벌적으로 상속 Class 를 만들기 때문에 리소스의 재활용성은 떨어지게 된다.</li>
</ol>

<h1 id="증명">증명</h1>

<h3 id="아래와-같은-세가지-파일을-작성">아래와 같은 세가지 파일을 작성</h3>

<p>Container.as</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">package samples.mxmlFactory {
import mx.core.IFactory;

public class Container {
    public var factory:IFactory;
}
}
</code></pre></div>
<p>Instance.as</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">package samples.mxmlFactory {

[Style(name=&quot;a&quot;, inherit=&quot;no&quot;, type=&quot;Number&quot;)]
[Style(name=&quot;b&quot;, inherit=&quot;no&quot;, type=&quot;Number&quot;)]

public class Instance {
}
}
</code></pre></div>
<p>Sample.mxml</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;fx:Object xmlns:fx=&quot;http://ns.adobe.com/mxml/2009&quot; xmlns:s=&quot;library://ns.adobe.com/flex/spark&quot; xmlns:mxmlFactory=&quot;samples.mxmlFactory.*&quot;&gt;
    &lt;fx:Declarations&gt;
        &lt;mxmlFactory:Container id=&quot;type1&quot; factory=&quot;samples.mxmlFactory.Instance&quot;/&gt;
        &lt;mxmlFactory:Container id=&quot;type2&quot;&gt;
            &lt;mxmlFactory:factory&gt;
                &lt;fx:Component&gt;
                    &lt;mxmlFactory:Instance a=&quot;3&quot;/&gt;
                &lt;/fx:Component&gt;
            &lt;/mxmlFactory:factory&gt;
        &lt;/mxmlFactory:Container&gt;
    &lt;/fx:Declarations&gt;
&lt;/fx:Object&gt;
</code></pre></div>
<h3 id="출력된-코드들은-아래와-같다-(너무-길어서-주요-부분만-발췌)">출력된 코드들은 아래와 같다 (너무 길어서 주요 부분만 발췌)</h3>

<p>Sample-generated.as</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">package samples.mxmlFactory
{

public class Sample
    extends Object
{

    [Bindable]
    public var type1 : samples.mxmlFactory.Container;

    [Bindable]
    public var type2 : samples.mxmlFactory.Container;

    public function Sample()
    {
        super();

        // properties
        _Sample_Container1_i();
        _Sample_Container2_i();
    }


private function _Sample_Container1_i() : samples.mxmlFactory.Container
{
    var temp : samples.mxmlFactory.Container = new samples.mxmlFactory.Container();
    temp.factory = _Sample_ClassFactory1_c();
    type1 = temp;
    mx.binding.BindingManager.executeBindings(this, &quot;type1&quot;, type1);
    return temp;
}

private function _Sample_ClassFactory1_c() : mx.core.ClassFactory
{
    var temp : mx.core.ClassFactory = new mx.core.ClassFactory();
    temp.generator = samples.mxmlFactory.Instance;
    return temp;
}

private function _Sample_Container2_i() : samples.mxmlFactory.Container
{
    var temp : samples.mxmlFactory.Container = new samples.mxmlFactory.Container();
    temp.factory = _Sample_ClassFactory2_c();
    type2 = temp;
    mx.binding.BindingManager.executeBindings(this, &quot;type2&quot;, type2);
    return temp;
}

private function _Sample_ClassFactory2_c() : mx.core.ClassFactory
{
    var temp : mx.core.ClassFactory = new mx.core.ClassFactory();
    temp.generator = samples.mxmlFactory.SampleInnerClass0;
    temp.properties = {outerDocument: this};
    return temp;
}
</code></pre></div>
<ol>
<li><code>factory=&quot;samples.mxmlFactory.Instance&quot;</code> 로 작성된 부분은 <code>ClassFactory</code> 에 <code>Instance</code> 가 들어가고<br></li>
<li><code>&lt;fx:Component&gt;</code> 로 작성된 부분은 <code>ClassFactory</code> 에 상속된 <code>SampleInnerClass0</code> 이 들어가는 것을 확인 할 수 있다</li>
</ol>

<hr>

<p>SampleInnerClass0-generated.as</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">public class SampleInnerClass0 extends samples.mxmlFactory.Instance {

    [Bindable]
    public var outerDocument : samples.mxmlFactory.Sample;

    public function SampleInnerClass0()
    {
        super();

        if (!this.styleDeclaration)
        {
            this.styleDeclaration = new CSSStyleDeclaration(null, styleManager);
        }

        this.styleDeclaration.defaultFactory = function():void
        {
            this.a = 3;
        };
    }
</code></pre></div>
<ol>
<li><code>&lt;fx:Component&gt;</code> 내에서 선언된 property <code>a</code> 를 <code>constructor</code> 상에서 초기화 시켜주는 것을 확인 할 수 있다</li>
</ol>
]]></content>
</article>



<article>
<title><![CDATA[Insert Tab Character In Text Area Component]]></title>
<url><![CDATA[/Flash/Flex%20Component/Insert%20Tab%20Character%20In%20Text%20Area%20Component.html]]></url>
<content><![CDATA[<h1 id="spark">spark</h1>
<div class="highlight"><pre><code class="language-text" data-lang="text">protected function ta_keyFocusChangeHandler(event:FocusEvent):void
{
    event.preventDefault();
    ta.insertText(&quot;\t&quot;);
}
----
&lt;s:TextArea id=&quot;ta&quot; keyFocusChange=&quot;ta_keyFocusChangeHandler(event)&quot;/&gt;
</code></pre></div>
<h1 id="mx">mx</h1>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;mx:TextArea width=&quot;300&quot; height=&quot;300&quot;&gt;
    &lt;mx:keyFocusChange&gt;
        event.preventDefault();
        this.textField.replaceSelectedText(&quot;\t&quot;);
    &lt;/mx:keyFocusChange&gt;
&lt;/mx:TextArea&gt;
</code></pre></div>]]></content>
</article>



<article>
<title><![CDATA[Install Jenkins On CentOS]]></title>
<url><![CDATA[/Server/Jenkins/Install%20Jenkins%20On%20CentOS.html]]></url>
<content><![CDATA[<h1 id="install">Install</h1>

<ul>
<li><code>sudo wget -O /etc/yum.repos.d/jenkins.repo http://pkg.jenkins-ci.org/redhat/jenkins.repo</code></li>
<li><code>sudo rpm --import http://pkg.jenkins-ci.org/redhat/jenkins-ci.org.key</code></li>
<li><code>sudo yum install jenkins</code></li>
</ul>

<h1 id="services">Services</h1>

<ul>
<li><code>sudo service jenkins start</code></li>
<li><code>sudo service jenkins stop</code></li>
<li><code>sudo service jenkins restart</code></li>
<li><code>sudo service jenkins status</code></li>
</ul>

<h1 id="참고한-자료들">참고한 자료들</h1>

<ul>
<li><a href="https://wiki.jenkins-ci.org/display/JENKINS/Installing+Jenkins+on+RedHat+distributions">https://wiki.jenkins-ci.org/display/JENKINS/Installing+Jenkins+on+RedHat+distributions</a></li>
</ul>
]]></content>
</article>



<article>
<title><![CDATA[Install Jenkins On Ubuntu]]></title>
<url><![CDATA[/Server/Jenkins/Install%20Jenkins%20On%20Ubuntu.html]]></url>
<content><![CDATA[<h1 id="install">Install</h1>
<div class="highlight"><pre><code class="language-text" data-lang="text">sudo aptitude install jenkins 
</code></pre></div>
<p>이걸로 설치하면 망한다. 버전이 1.4xx로 낮다. 플러그인들이 왕창 작동하지 않는 불상사가 발생한다.</p>

<p><a href="https://wiki.jenkins-ci.org/display/JENKINS/Installing+Jenkins+on+Ubuntu">https://wiki.jenkins-ci.org/display/JENKINS/Installing+Jenkins+on+Ubuntu</a> 이 url을 참고해서 설치해야 한다.</p>

<ul>
<li><code>wget -q -O - http://pkg.jenkins-ci.org/debian/jenkins-ci.org.key | sudo apt-key add -</code></li>
<li><code>sudo sh -c &#39;echo deb http://pkg.jenkins-ci.org/debian binary/ &gt; /etc/apt/sources.list.d/jenkins.list&#39;</code></li>
<li><code>sudo aptitude update</code></li>
<li><code>sudo aptitude install jenkins</code></li>
</ul>

<h1 id="services">Services</h1>

<ul>
<li><code>sudo service jenkins start</code></li>
<li><code>sudo service jenkins stop</code></li>
<li><code>sudo service jenkins restart</code></li>
<li><code>sudo service jenkins status</code></li>
</ul>
]]></content>
</article>



<article>
<title><![CDATA[Install NginX On CentOS]]></title>
<url><![CDATA[/Server/NginX/Install%20NginX%20On%20CentOS.html]]></url>
<content><![CDATA[<h1 id="nginx-설치">NginX 설치</h1>

<p>CentOS가 사용하는 <code>yum</code>에는 기본적으로 <code>nginx</code>가 존재하지 않는다. 고로 repository를 추가시켜주는 작업부터 해야한다.</p>

<p>NginX 웹사이트에서 제안하는 방식은 기본적으로 <a href="http://wiki.nginx.org/Install">http://wiki.nginx.org/Install</a> 처럼 수동으로 <code>/etc/yum.repos.d/nginx.repo</code>를 생성시켜주는 방식이지만, 상당히 귀찮은고로 <a href="http://www.cyberciti.biz/faq/install-nginx-centos-rhel-6-server-rpm-using-yum-command/">http://www.cyberciti.biz/faq/install-nginx-centos-rhel-6-server-rpm-using-yum-command/</a>에서 제안하는 방식을 따르도록 한다.</p>

<ul>
<li><code>wget http://nginx.org/packages/centos/6/noarch/RPMS/nginx-release-centos-6-0.el6.ngx.noarch.rpm</code> 그냥 wget으로 rpm 파일을 다운받는 것 뿐이다.</li>
<li><code>rpm -ivh nginx-release-centos-6-0.el6.ngx.noarch.rpm</code> rpm을 설치한다.</li>
<li><code>ls /etc/yum.repos.d/</code> 대충 확인해보면 <code>nginx.repo</code> 라는 파일이 생성되었음을 확인할 수 있다.</li>
<li><code>yum search nginx</code> 잘 모르겠으면 yum search를 해보면 nginx가 검색에 조회되는 것을 확인할 수 있다.</li>
</ul>

<p><code>nginx</code>가 <code>yum</code>에 등록되었으면 이제 설치를 하면 된다.</p>

<ul>
<li><code>sudo yum install nginx</code> 설치가 진행된다</li>
<li><code>sudo service nginx status</code> 설치 이후 서비스 상태를 보면 멈춰있다</li>
<li><code>sudo service nginx start</code> 서비스를 시작한다</li>
</ul>

<p>NginX 서비스를 시작한 뒤에 <code>http://localhost</code>로 접속해서 확인해 본다</p>

<p>NginX 설치 이후, 사용 가능한 명령어는 아래와 같다</p>

<ul>
<li><code>sudo service nginx start</code></li>
<li><code>sudo service nginx restart</code></li>
<li><code>sudo service nginx stop</code></li>
<li><code>sudo service nginx status</code></li>
</ul>

<h1 id="참고한-자료들">참고한 자료들</h1>

<ul>
<li><a href="http://wiki.nginx.org/Install">http://wiki.nginx.org/Install</a></li>
<li><a href="http://www.cyberciti.biz/faq/install-nginx-centos-rhel-6-server-rpm-using-yum-command/">http://www.cyberciti.biz/faq/install-nginx-centos-rhel-6-server-rpm-using-yum-command/</a></li>
</ul>
]]></content>
</article>



<article>
<title><![CDATA[Install NginX On Mac]]></title>
<url><![CDATA[/Server/NginX/Install%20NginX%20On%20Mac.html]]></url>
<content><![CDATA[<p><a href="http://learnaholic.me/2012/10/10/installing-nginx-in-mac-os-x-mountain-lion/">Installing Nginx in Mac OS X Mountain Lion With Homebrew</a></p>

<h1 id="nginx-설치">NginX 설치</h1>

<ol>
<li><code>brew install nginx</code></li>
</ol>

<p>서비스 사용 방식</p>

<ul>
<li><code>nginx</code> start</li>
<li><code>nginx -s stop</code> fast shutdown</li>
<li><code>nginx -s quit</code> graceful shutdown</li>
<li><code>nginx -s reload</code> reloading configuration file</li>
<li><code>nginx -s reopen</code></li>
</ul>

<h1 id="nginx-설정-나누기">NginX 설정 나누기</h1>

<p><code>brew</code>에서 설치한 NginX는 설정 파일이 <code>/usr/local/etc/nginx/nginx.conf</code>만 존재한다. (Ubuntu처럼 설정이 나뉘어져 있지 않다.)</p>

<p>효율적 관리를 위해서 <code>include</code>를 사용해 설정 파일을 나눠주는 것이 좋다.</p>

<h1 id="nginx를-launch-service로-등록하기">NginX를 launch Service로 등록하기</h1>
<div class="highlight"><pre><code class="language-text" data-lang="text">// TODO
</code></pre></div>]]></content>
</article>



<article>
<title><![CDATA[Install NginX On Ubuntu]]></title>
<url><![CDATA[/Server/NginX/Install%20NginX%20On%20Ubuntu.html]]></url>
<content><![CDATA[<h1 id="nginx-설치">NginX 설치</h1>

<p>기본 Static File Hosting을 NginX 에 맡기고, 동적 영역을 Node.js가 처리하는 구성으로 가고 싶은 경우에 추가한다.</p>

<ol>
<li><code>sudo apt-get install nginx</code></li>
<li><code>sudo service nginx start</code></li>
<li>서버의 ip 확인 후에 port 80 으로 접속해본다</li>
</ol>

<p>위와 같이 기본 설치를 완료할 경우, 아래와 같은 명령어 사용이 가능.</p>

<ul>
<li><code>sudo service nginx start</code></li>
<li><code>sudo service nginx restart</code></li>
<li><code>sudo service nginx stop</code></li>
<li><code>sudo service nginx status</code></li>
</ul>

<p>설정 파일은</p>

<ul>
<li><code>/etc/nginx/nginx.conf</code></li>
<li><code>/etc/nginx/sites-available/default</code></li>
</ul>

<p>로 나뉘게 되는데, 기본적인 라우팅 선언은 <code>/etc/nginx/sites-available/default</code> 에서 할 수 있다.</p>

<h1 id="nginx-설정-구조">NginX 설정 구조</h1>

<h3 id="기본-설정의-파악">기본 설정의 파악</h3>

<ul>
<li><code>/etc/init.d/nginx</code>

<ul>
<li><code>/etc/nginx/nginx.conf</code> 선언하고 있다</li>
</ul></li>
<li><code>/etc/nginx/nginx.conf</code>

<ul>
<li><code>/run/nginx.pid</code>를 불러오는데, 이 파일은 단순히 숫자만 떨렁 적혀있다. 뭐지?</li>
<li>include <code>/etc/nginx/mime.types</code> mimetype들을 선언하고 있는 파일</li>
<li>access log <code>/var/log/nginx/access.log</code></li>
<li>error log <code>/var/log/nignx/error.log</code> 에러 로그가 어디에 찍히고 있는지 확인</li>
<li>include <code>/etc/nginx/conf.d/*.conf</code></li>
<li>include <code>/etc/nginx/site-enabled/*</code> site-enabled 디렉토리의 site 설정들을 읽어들인다 (중요)</li>
</ul></li>
</ul>

<p>중요한 축을 담당하는 설정들은 <code>/etc/init.d/nginx</code> --&gt; <code>/etc/nginx/nginx.conf</code> --&gt; <code>/etc/nginx/site-enabled/*</code>로 이어지게 된다. 기본적으로 크게 건드릴 것 없이 <code>/etc/nginx/site-enabled/</code>에 있는 기본 <code>default</code>만 변경하거나, 삭제하고 새로운 설정을 넣어주면 된다.</p>
]]></content>
</article>



<article>
<title><![CDATA[JDK Java VisualVM으로 현재 실행중인 MBeans 확인하기]]></title>
<url><![CDATA[/Server/Java/JDK%20Java%20VisualVM%E1%84%8B%E1%85%B3%E1%84%85%E1%85%A9%20%E1%84%92%E1%85%A7%E1%86%AB%E1%84%8C%E1%85%A2%20%E1%84%89%E1%85%B5%E1%86%AF%E1%84%92%E1%85%A2%E1%86%BC%E1%84%8C%E1%85%AE%E1%86%BC%E1%84%8B%E1%85%B5%E1%86%AB%20MBeans%20%E1%84%92%E1%85%AA%E1%86%A8%E1%84%8B%E1%85%B5%E1%86%AB%E1%84%92%E1%85%A1%E1%84%80%E1%85%B5.html]]></url>
<content><![CDATA[<h1 id="소개">소개</h1>

<p>현재 실행중인 Bean 리스트를 확인할 수 있다.<br>
확인하기 힘든 AMF Message Broker 등을 확인할 때 유용하다.</p>

<h1 id="tracking-대상이-되는-어플리케이션을-실행하기">Tracking 대상이 되는 어플리케이션을 실행하기</h1>

<ul>
<li>Tracking 할 Weblogic, Tomcat 등 Java Application을 실행시킬 때 <code>-Dcom.sun.management.jmxremote</code> 옵션을 붙여서 실행시킨다.</li>
</ul>

<h2 id="예제-:-weblogic-설정">예제 : Weblogic 설정</h2>

<ul>
<li><code>$Domain/bin/setDomainEnv</code> 파일 열기</li>
<li><code>set JAVA_OPTIONS=%JAVA_OPTIONS% -Dapp.mode=local</code> 이 부분 뒤에 <code>-Dcom.sun.management.jmxremote</code> 옵션 붙임</li>
<li>재실행</li>
</ul>

<h1 id="jvisualvm">jvisualvm</h1>

<ul>
<li><code>$JDK/bin/jvisualvm.exe</code> 실행</li>
<li><code>Tools/Plugins</code> 메뉴에서 <strong>VisualVM-MBeans</strong> 플러그인을 인스톨</li>
</ul>

<p>이후 jvisualvm에서 Application을 선택하면 MBeans 리스트를 확인할 수 있다</p>
]]></content>
</article>



<article>
<title><![CDATA[Jenkins 계정으로 접속하기]]></title>
<url><![CDATA[/Server/Jenkins/Jenkins%20%E1%84%80%E1%85%A8%E1%84%8C%E1%85%A5%E1%86%BC%E1%84%8B%E1%85%B3%E1%84%85%E1%85%A9%20%E1%84%8C%E1%85%A5%E1%86%B8%E1%84%89%E1%85%A9%E1%86%A8%E1%84%92%E1%85%A1%E1%84%80%E1%85%B5.html]]></url>
<content><![CDATA[<h1 id="su-jenkins"><code>su jenkins</code></h1>

<ul>
<li><code>sudo su</code></li>
<li><code>su jenkins</code> </li>
<li><code>cd ~</code></li>
</ul>

<p><code>sudo su</code>를 경유하는 이유는 이 jenkins 계정의 패스워드를 모르겠어서이다... 도대체 뭘로 셋팅되는거지?</p>
]]></content>
</article>



<article>
<title><![CDATA[Jenkins에서 sudo 권한을 실행시키기]]></title>
<url><![CDATA[/Server/Jenkins/Jenkins%E1%84%8B%E1%85%A6%E1%84%89%E1%85%A5%20sudo%20%E1%84%80%E1%85%AF%E1%86%AB%E1%84%92%E1%85%A1%E1%86%AB%E1%84%8B%E1%85%B3%E1%86%AF%20%E1%84%89%E1%85%B5%E1%86%AF%E1%84%92%E1%85%A2%E1%86%BC%E1%84%89%E1%85%B5%E1%84%8F%E1%85%B5%E1%84%80%E1%85%B5.html]]></url>
<content><![CDATA[<h1 id="jenkins에서-sudo-권한이-필요한-명령어-실행시키기">Jenkins에서 <code>sudo</code> 권한이 필요한 명령어 실행시키기</h1>

<p>일단 확인을 좀 더 쉽게 하기 위해서 간단한 테스트용 job을 만들고, 아래와 같이 Execute shell을 설정해준다</p>

<p><img src="../../../files/captures/20140120/154921.png" alt="Execute shell"></p>

<p>실행을 시켜보면 아래와 같은 Console 결과가 떨어지게 된다.</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">Started by user anonymous
Building in workspace /var/lib/jenkins/workspace/test
[test] $ /bin/sh -xe /tmp/hudson6281119536679894390.sh
+ echo jenkins
jenkins
+ sudo echo &#39;Hello World&#39;
sudo: sorry, you must have a tty to run sudo
Build step &#39;Execute shell&#39; marked build as failure
Finished: FAILURE
</code></pre></div>
<p>문제점은 크게 두 가지로 나눌 수 있는데</p>

<ol>
<li>현재 설정이 <code>sudo</code> 명령어를 실행하는데 tty(tele type) 접속이 반드시 필요하다는 것이고</li>
<li>Jenkins가 <code>sudo</code> 명령어를 실행 할 권한을 가지고 있지 않다는 것 이다. (현재 메세지는 그냥 너 tty가 아니라서 sudo 실행 못해 정도인 것 같지만...)</li>
</ol>

<h1 id="뚫어보기-전에-jenkins에-왜-sudo-권한이-필요한가?">뚫어보기 전에 Jenkins에 왜 <code>sudo</code> 권한이 필요한가?</h1>

<p>뭐 Maven은 안써서 잘 모르겠지만, 기본적으로 Makefile이던, Shell Script이던, 심지어는 Grunt로 build를 할 때면 언제나 &quot;쬐끔 더 편하게 할 수 없을까?&quot; 라는 문제에 직면하게 된다.</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">make createNginXVirtualHostFile # NginX에서 사용할 파일을 만들어준다.
sudo make exportNginXVirtualHostFile # NginX site-enabled/ directory로 옮겨준다.
sudo service nginx reload # NginX가 설정을 다시 읽어오도록 한다
</code></pre></div>
<p>예를 들자면 위와 같은 류의 작업에서 첫 번째야 그럭저럭 별 문제없지만, 두 번째 NginX 설정 파일을 옮겨주는 작업이나, 세 번째 NginX를 재가동 시켜주는 작업등에는 <code>sudo</code> 권한이 필요하다.</p>

<p>위와 같이 전반적인 작업을 자동화 시켜주면 매우 편리하겠지만, 문제는 Jenkins에 <code>sudo</code> 권한을 준다거나, 그를 위해 필요한 <code>tty</code> 필수 요구 사항을 풀어버리면 보안에 예측하기 힘든 리스크가 생긴다는게 아닐까 싶다. 보안에 대해서 잘 모르기에 애매하지만, 언제나 편리와 보안은 등가 교환되는 면이 있으니...</p>

<p>구지 <code>sudo</code> 권한을 뚫어서까지 자동화 해줘야 할 정도로 작업이 빡시냐? 라는게 중요한 문제이지 않을까 싶다. (뭐 Git Push만 하면 Hook을 타고 지가 알아서 NginX 멈추고, 빌드하고, 다시 실행시키고 한다면 얼마나 편하긴 하겠냐만...)</p>

<h1 id="jenkins에-sudo-권한-주기">Jenkins에 <code>sudo</code> 권한 주기</h1>

<h3 id="centos">CentOS</h3>

<p>CentOS의 경우에는 <code>/etc/sudoers</code> 파일에 모든 내용이 다 적혀있는 편이다. 그래서 편집만 하면 된다</p>

<ul>
<li><code>sudo nano /etc/sudoers</code> 명령어로 <code>sudoers</code> 파일에 대한 수정을 시작한다</li>
<li>뭐 내용이 주르륵 나오는데 우선 <code>Defaults requiretty</code>를 찾아서 주석처리(#) 한다.</li>
<li>파일의 마지막 부분에 추가시켜준다. <code>jenkins ALL=(ALL) NOPASSWD: ALL</code></li>
</ul>

<h3 id="ubuntu">Ubuntu</h3>

<p>Ubuntu의 경우에는 CentOS에 비하면 <code>/etc/sudoers</code> 파일이 굉장히 휑하다... (이래도 되나 싶을 정도로...) 설정들을 <code>/etc/sudoers.d/</code>라는 디렉토리에 분산시켜놓은 다음에 include 해놓은 구성인데 CentOS처럼 <code>/etc/sudoers</code>에 그냥 적어도 되지만 구색을 맞춰주는 차원에서 <code>/etc/sudoers.d</code>에 새 설정을 추가하도록 한다.</p>

<ul>
<li><code>sudo su</code>로 root로 진입한다</li>
<li><code>cd /etc/sudoers.d</code>로 이동</li>
<li><code>sudo nano jenkins</code>로 새 설정 파일을 만든다</li>
<li><code>jenkins ALL=(ALL) NOPASSWD: ALL</code>를 입력해주고 편집에서 나온다</li>
<li><code>chmod 0440 jenkins</code>로 파일의 권한을 바꾼다</li>
<li><code>exit</code>로 root에서 나온다</li>
</ul>

<p>다시 위에서 만들었던 Jenkins job을 실행시켜보면 아래와 같이 정상적인 Console 결과가 떨어지게 된다.</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">Started by user anonymous
Building in workspace /var/lib/jenkins/workspace/test
[test] $ /bin/sh -xe /tmp/hudson6355458021182114475.sh
+ echo jenkins
jenkins
+ sudo echo &#39;Hello World&#39;
Hello World
Finished: SUCCESS
</code></pre></div>]]></content>
</article>



<article>
<title><![CDATA[Metadata Tags 기반의 Dependency Injection을 위한 describeType 분석]]></title>
<url><![CDATA[/Flash/Flex%20%E1%84%8B%E1%85%AF%E1%86%AB%E1%84%85%E1%85%A9%E1%86%AB/Metadata%20Tags%20%E1%84%80%E1%85%B5%E1%84%87%E1%85%A1%E1%86%AB%E1%84%8B%E1%85%B4%20Dependency%20Injection%E1%84%8B%E1%85%B3%E1%86%AF%20%E1%84%8B%E1%85%B1%E1%84%92%E1%85%A1%E1%86%AB%20describeType%20%E1%84%87%E1%85%AE%E1%86%AB%E1%84%89%E1%85%A5%E1%86%A8.html]]></url>
<content><![CDATA[<h1 id="files">Files</h1>
<div class="highlight"><pre><code class="language-text" data-lang="text">package test {

public class InjectionTarget {
    public var normalProperty:String;

    public function normalMethod(p1:String, p2:String):void {

    }

    [Inject]
    public var simpleInjectionProperty:String;

    [Inject(name=&quot;foo&quot;)]
    public var namedInjectionProperty:String;


    public function get accessorInjectionProperty():String {
        return null;
    }

    [Inject]
    public function set accessorInjectionProperty(d:String):void {
    }

    [Inject]
    public function simpleInjectionMethod(p1:String, p2:String, p3:String):void {

    }

    [Inject(name=&quot;&quot;, name=&quot;foo&quot;, name=&quot;&quot;)]
    public function namedInjectionMethod(p1:String, p2:String, p3:String):void {

    }
}
}
</code></pre></div>
<p>위의 Class를 describeType으로 열어보면 아래와 같은 결과를 받을 수 있다</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;type name=&quot;test::InjectionTarget&quot; base=&quot;Class&quot; isDynamic=&quot;true&quot; isFinal=&quot;true&quot; isStatic=&quot;true&quot;&gt;
    &lt;extendsClass type=&quot;Class&quot; /&gt;
    &lt;extendsClass type=&quot;Object&quot; /&gt;
    &lt;accessor name=&quot;prototype&quot; access=&quot;readonly&quot; type=&quot;*&quot; declaredBy=&quot;Class&quot; /&gt;
    &lt;factory type=&quot;test::InjectionTarget&quot;&gt;
        &lt;extendsClass type=&quot;Object&quot; /&gt;

        &lt;metadata name=&quot;__go_to_definition_help&quot;&gt;
            &lt;arg key=&quot;pos&quot; value=&quot;29&quot; /&gt;
        &lt;/metadata&gt;
    &lt;/factory&gt;
&lt;/type&gt;
</code></pre></div>
<h1 id="실제-코드와-xml-정보의-매칭">실제 코드와 XML 정보의 매칭</h1>
<div class="highlight"><pre><code class="language-text" data-lang="text">public var normalProperty:String;

&lt;variable name=&quot;normalProperty&quot; type=&quot;String&quot;&gt;
    &lt;metadata name=&quot;__go_to_definition_help&quot;&gt;
        &lt;arg key=&quot;pos&quot; value=&quot;59&quot; /&gt;
    &lt;/metadata&gt;
&lt;/variable&gt;

-------------------------------------

[Inject]
public var simpleInjectionProperty:String;

&lt;variable name=&quot;simpleInjectionProperty&quot; type=&quot;String&quot;&gt;
    &lt;metadata name=&quot;Inject&quot; /&gt;
    &lt;metadata name=&quot;__go_to_definition_help&quot;&gt;
        &lt;arg key=&quot;pos&quot; value=&quot;169&quot; /&gt;
    &lt;/metadata&gt;
&lt;/variable&gt;

-------------------------------------

[Inject(name=&quot;foo&quot;)]
public var namedInjectionProperty:String;

&lt;variable name=&quot;namedInjectionProperty&quot; type=&quot;String&quot;&gt;
    &lt;metadata name=&quot;Inject&quot;&gt;
        &lt;arg key=&quot;name&quot; value=&quot;foo&quot; /&gt;
    &lt;/metadata&gt;
    &lt;metadata name=&quot;__go_to_definition_help&quot;&gt;
        &lt;arg key=&quot;pos&quot; value=&quot;236&quot; /&gt;
    &lt;/metadata&gt;
&lt;/variable&gt;

-------------------------------------

public function get accessorInjectionProperty():String {
    return null;
}

[Inject]
public function set accessorInjectionProperty(d:String):void {
}

&lt;accessor name=&quot;accessorInjectionProperty&quot; access=&quot;readwrite&quot; type=&quot;String&quot; declaredBy=&quot;test::InjectionTarget&quot;&gt;
    &lt;metadata name=&quot;__go_to_definition_help&quot;&gt;
        &lt;arg key=&quot;pos&quot; value=&quot;290&quot; /&gt;
    &lt;/metadata&gt;
    &lt;metadata name=&quot;Inject&quot; /&gt;
    &lt;metadata name=&quot;__go_to_definition_help&quot;&gt;
        &lt;arg key=&quot;pos&quot; value=&quot;377&quot; /&gt;
    &lt;/metadata&gt;
&lt;/accessor&gt;

-------------------------------------

public function normalMethod(p1:String, p2:String):void {
}

&lt;method name=&quot;normalMethod&quot; declaredBy=&quot;test::InjectionTarget&quot; returnType=&quot;void&quot;&gt;
    &lt;parameter index=&quot;1&quot; type=&quot;String&quot; optional=&quot;false&quot; /&gt;
    &lt;parameter index=&quot;2&quot; type=&quot;String&quot; optional=&quot;false&quot; /&gt;
    &lt;metadata name=&quot;__go_to_definition_help&quot;&gt;
        &lt;arg key=&quot;pos&quot; value=&quot;100&quot; /&gt;
    &lt;/metadata&gt;
&lt;/method&gt;

-------------------------------------

[Inject]
public function simpleInjectionMethod(p1:String, p2:String, p3:String):void {
}

&lt;method name=&quot;simpleInjectionMethod&quot; declaredBy=&quot;test::InjectionTarget&quot; returnType=&quot;void&quot;&gt;
    &lt;parameter index=&quot;1&quot; type=&quot;String&quot; optional=&quot;false&quot; /&gt;
    &lt;parameter index=&quot;2&quot; type=&quot;String&quot; optional=&quot;false&quot; /&gt;
    &lt;parameter index=&quot;3&quot; type=&quot;String&quot; optional=&quot;false&quot; /&gt;
    &lt;metadata name=&quot;Inject&quot; /&gt;
    &lt;metadata name=&quot;__go_to_definition_help&quot;&gt;
        &lt;arg key=&quot;pos&quot; value=&quot;451&quot; /&gt;
    &lt;/metadata&gt;
&lt;/method&gt;

-------------------------------------

[Inject(name=&quot;&quot;, name=&quot;foo&quot;, name=&quot;&quot;)]
public function namedInjectionMethod(p1:String, p2:String, p3:String):void {
}

&lt;method name=&quot;namedInjectionMethod&quot; declaredBy=&quot;test::InjectionTarget&quot; returnType=&quot;void&quot;&gt;
    &lt;parameter index=&quot;1&quot; type=&quot;String&quot; optional=&quot;false&quot; /&gt;
    &lt;parameter index=&quot;2&quot; type=&quot;String&quot; optional=&quot;false&quot; /&gt;
    &lt;parameter index=&quot;3&quot; type=&quot;String&quot; optional=&quot;false&quot; /&gt;
    &lt;metadata name=&quot;Inject&quot;&gt;
        &lt;arg key=&quot;name&quot; value=&quot;&quot; /&gt;
        &lt;arg key=&quot;name&quot; value=&quot;foo&quot; /&gt;
        &lt;arg key=&quot;name&quot; value=&quot;&quot; /&gt;
    &lt;/metadata&gt;
    &lt;metadata name=&quot;__go_to_definition_help&quot;&gt;
        &lt;arg key=&quot;pos&quot; value=&quot;575&quot; /&gt;
    &lt;/metadata&gt;
&lt;/method&gt;
</code></pre></div>]]></content>
</article>



<article>
<title><![CDATA[Metadata Tags]]></title>
<url><![CDATA[/Flash/Flex%20%E1%84%8B%E1%85%AF%E1%86%AB%E1%84%85%E1%85%A9%E1%86%AB/Metadata%20Tags.html]]></url>
<content><![CDATA[<h1 id="참고">참고</h1>

<ul>
<li><a href="http://help.adobe.com/en_US/flex/using/WS2db454920e96a9e51e63e3d11c0bf680e1-7ffe.html">Flex Metadata Tags</a></li>
</ul>

<h1 id="property-에-추가-가능한-metadata-tags">property 에 추가 가능한 metadata tags</h1>

<ul>
<li>Flash Builder 에서 코드 편집시에 도움

<ul>
<li><code>[Deprecated]</code> 더 이상 사용되지 않는 (삭제 예정인) api 에 표시</li>
<li><code>[Inspectable]</code> 속성을 정의 한다 (Array 의 구성 요소를 정의 한다던가 하는...)</li>
<li><code>[SkinPart]</code> Skin 에 어떤 요소들이 포함되어져야 하는지 정의한다.</li>
</ul></li>
<li>Compile Time

<ul>
<li><code>[Embed]</code>

<ul>
<li><a href="http://help.adobe.com/en_US/flex/using/WS2db454920e96a9e51e63e3d11c0bf60546-7ffb.html#WS2db454920e96a9e51e63e3d11c0bf69084-7f96">사용 가능한 mime type</a>

<ul>
<li><code>application/octet-stream</code></li>
<li><code>application/x-font</code></li>
<li><code>application/x-font-truetype</code></li>
<li><code>application/x-shockwave-flash</code></li>
<li><code>audio/mpeg</code></li>
<li><code>image/gif</code></li>
<li><code>image/jpeg</code></li>
<li><code>image/png</code></li>
<li><code>image/svg</code></li>
<li><code>image/svg-xml</code></li>
</ul></li>
</ul></li>
</ul></li>
<li><code>[Bindable(event=&quot;propertyChanged&quot;)]</code></li>
<li><code>[NonCommittingChangeEvent]</code></li>
<li><code>[Transient]</code></li>
</ul>

<h1 id="class-에-선언-가능한-녀석들">class 에 선언 가능한 녀석들</h1>

<ul>
<li>Flash Builder 에서 코드 편집시에 도움

<ul>
<li><code>[Deprecated]</code> 더 이상 사용되지 않는 (삭제 예정인) api 에 표시</li>
</ul></li>
<li>Mxml 편의

<ul>
<li><code>[DefaultProperty]</code> mxml element 하부에 바로 쓸 수 있는 속성을 정한다. (ex: Group 의 children 같은 경우)</li>
<li><code>[SkinState]</code> Skin 에 어떤 state 들이 포함되어져야 하는지 정의</li>
<li><code>[Style]</code> Style 요소를 정의. IStyleClient 를 구현해줘야 함</li>
<li><code>[Event]</code> 현재 Class 에서 dispatch 되는 event 정의</li>
</ul></li>
<li><code>[Exclude]</code> 상속 구현 의해 사용되지 않는 mxml 속성 정의</li>
<li><code>[AccessibilityClass]</code></li>
<li><code>[Alternative]</code></li>
<li><code>[Bindable]</code></li>
<li><code>[ExcludeClass]</code> @private 과 유사한 효과</li>
<li><code>[IconFile]</code> component icon file. builder 4.7 이후로 gui 편집기가 사라졌으므로 별 쓸모 없음</li>
<li><code>[Managed]</code></li>
<li><code>[RemoteClass]</code> 직렬화를 위해 사용</li>
<li><code>[ResourceBundle]</code></li>
</ul>

<h1 id="interface-에-선언-가능한-녀석들">interface 에 선언 가능한 녀석들</h1>

<ul>
<li><code>[ArrayElementType]</code></li>
<li><code>[Bindable]</code></li>
<li><code>[Deprecated]</code></li>
<li><code>[Embed]</code></li>
<li><code>[Inspectable]</code></li>
<li><code>[NonCommittingChangeEvent]</code></li>
<li><code>[PercentProxy]</code></li>
<li><code>[RichTextContent]</code></li>
<li><code>[SkinPart]</code></li>
<li><code>[Transient]</code></li>
</ul>
]]></content>
</article>



<article>
<title><![CDATA[NginX Location Rule]]></title>
<url><![CDATA[/Server/NginX/NginX%20Location%20Rule.html]]></url>
<content><![CDATA[<h1 id="location-rule-테스트를-위한-환경">location rule 테스트를 위한 환경</h1>

<p>NginX 설정 작업시에 location rule을 테스트 하는 것은 상당히 짜증나는 일이 된다. <code>nginx.conf</code> 파일 수정과 NginX 리로딩, 테스트 하고자 하는 경로들에 대한 확인까지 꽤나 거쳐야 하는 작업들이 많아서인데,</p>

<p><code>Makefile</code>을 통해 몇 가지 명령어들을 조합하면 꽤나 간단해지게 된다. (<code>Makefile</code> 명령어는 Mac OSX + Homebrew 기준이다.)</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">test:
    nginx -s reload
    curl -I -L http://localhost:8080/devlog/Flash/Flex%20Chart/images/ChartAndDataTypes.swf
    curl -I -L http://localhost:8080/devlog/asset::jadetemplate/images/li.document.png
</code></pre></div>
<p>위의 <code>Makefile</code> Task를 설명하자면</p>

<ol>
<li><code>nginx -s reload</code> NginX가 설정을 새로 읽어들이게 한다</li>
<li><code>curl -I -L http://localhos...</code> 테스트하고자 하는 url의 경로

<ul>
<li><code>curl -I -L</code> 명령은 간단하게 해당하는 url의 header 정보만 출력해준다</li>
</ul></li>
</ol>

<p>이를 <code>make test</code>를 통해 실행해보면 아래와 같은 결과를 얻게 된다.</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">nginx -s reload
curl -I -L http://localhost:8080/devlog/Flash/Flex%20Chart/images/ChartAndDataTypes.swf
HTTP/1.1 200 OK
Server: nginx/1.4.2
Date: Wed, 25 Sep 2013 00:47:49 GMT
Content-Type: application/x-shockwave-flash
Content-Length: 1134076
Last-Modified: Tue, 23 Apr 2013 12:00:32 GMT
Connection: keep-alive
ETag: &quot;517677e0-114dfc&quot;
Expires: Thu, 31 Dec 2037 23:55:55 GMT
Cache-Control: max-age=315360000
Accept-Ranges: bytes

curl -I -L http://localhost:8080/devlog/asset::jadetemplate/images/li.document.png
HTTP/1.1 200 OK
Server: nginx/1.4.2
Date: Wed, 25 Sep 2013 00:47:49 GMT
Content-Type: image/png
Content-Length: 1221
Connection: keep-alive
X-Powered-By: Express
Accept-Ranges: bytes
ETag: &quot;1221-1378364862000&quot;
Cache-Control: public, max-age=0
Last-Modified: Thu, 05 Sep 2013 07:07:42 GMT
</code></pre></div>
<p>2번 라인의 경우 <code>expires max;</code>로 설정된 NginX에서 서비스 되는 파일이어야 하고, 3번 라인의 경우 Node.js 측에서 <code>express</code>를 통해 서비스 되는 파일이어야 했다.</p>

<p>2번 라인의 <code>Expires</code>를 통해 확인이 가능하고, 3번 라인의 <code>X-Powered-By: Express</code>를 통해 확인이 가능하다.</p>

<p>대충 위와 같이 <code>Makefile</code>을 통해서 <code>nginx -s reload</code> 명령과 동시에 <code>curl</code>을 통한 header 정보를 확인하는 Task를 만들어서 사용하면, <code>nginx.conf</code>를 수정하고 확인하는 작업을 좀 더 단순화 시킬 수 있다.</p>

<h1 id="location-선언의-종류">location 선언의 종류</h1>

<h3 id="1.-location-=-정확하게-일치되는-주소">1. <code>location =</code> 정확하게 일치되는 주소</h3>
<div class="highlight"><pre><code class="language-text" data-lang="text">location = /path {

}
</code></pre></div>
<p>보통 단일 주소에 대한 선언을 하기 위해 사용한다.</p>

<ul>
<li><code>location = /favicon.ico</code> 보통 뭐 이딴거 라던가</li>
<li><code>location = /404.html</code> 에러 페이지 라던가</li>
<li><code>location = /</code> 아예 인덱스 주소를 따로 만들고 싶다던가</li>
</ul>

<p>뭐 이런식으로 정확하게 주소가 일치하는 단일 주소에 대한 지정을 할 때 사용한다.</p>

<p><code>/path</code>라고 선언했을 경우, <code>/path/dir...</code>과 같은 하위 주소를 포함하지 않는다.</p>

<h3 id="2.-location-^~-우선-순위-높음">2. <code>location ^~</code> 우선 순위 높음</h3>
<div class="highlight"><pre><code class="language-text" data-lang="text">location ^~ /path {

}
</code></pre></div>
<p>우선 순위가 높은 선언이다.</p>

<p><code>location /path</code>라는 선언을 한 뒤에 <code>location ^~ /path/special</code>과 같은 예외적 처리가 필요할 때 사용한다.</p>

<h3 id="3.-location-~-정규식에-맞을-때,-location-~*-정규식에-맞지-않을-때">3. <code>location ~</code> 정규식에 맞을 때, <code>location ~*</code> 정규식에 맞지 않을 때</h3>
<div class="highlight"><pre><code class="language-text" data-lang="text">location ~ .+\.(jpg|png|gif)$ {

}

location ~* .+\.(jpg|png|gif)$ {

}
</code></pre></div>
<p>정규식을 사용하는 선언이고, 일반적인 <code>location /path</code>보다 순위가 높기 때문에 여러가지 예외를 만들 수 있다.</p>

<p><code>location ^~</code>보다 순위가 낮긴 하지만, 기본적인 <code>location /path</code>에 대한 예외처리를 한다는 점에서는 같은 순위로 생각해도 될 듯 싶다. 아무래도 <code>location ~</code>로 예외를 선언한 다음, 다시 <code>location ^~</code>로 선언을 할 필요는 크게 없을 듯 싶으니까...</p>

<h3 id="4.-location-/path-일반-선언">4. <code>location /path</code> 일반 선언</h3>
<div class="highlight"><pre><code class="language-text" data-lang="text">location /path {

}
</code></pre></div>
<p>가장 순위가 낮은 선언이다. 순위가 가장 낮기 때문에 큰 틀을 구성하는 선언을 할 때 좋다.</p>

<h3 id="조합-예제-:-reverse-proxy-+-static-file">조합 예제 : Reverse Proxy + Static File</h3>

<p>일반적으로 NginX의 사용법이 php가 아닌 이상, 대부분 Reverse Proxy 용도로 사용을 하게 되고, Reverse Proxy에 대응되는 대부분 플랫폼의 취약점이 느린 Static File 처리 속도임을 생각해보면 아래와 같은 구성이 자주 사용될 수 있다.</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">location / {
    # Node.js 혹은 Java 등의 Reverse Proxy
}

location ^~ /files {
    # Static File 주소를 예외적으로 처리한다
}

location ~ ^/blog/(?!asset::)(.*)\.(jpg|jpeg|gif|png|ico|zip|tgz|gz|rar|bz2|pdf|tar|wav|bmp|rtf|flv|swf)$ {
    # /blog 이하에서
    # /blog/asset:: 으로 시작되지 않는
    # 모든 jpg|jpeg|gif|png... 등의 Static File들을 예외적으로 처리한다
}
</code></pre></div>
<p>위와 같은 구성을 했을 때 처리되는 형태를 보자면</p>

<ul>
<li><code>/xxx/yyy</code>등의 대부분 처리는 Node.js가 하게 되고</li>
<li><code>/files/img.png</code>와 같은 Static File을 NginX가 처리하게 되고</li>
<li><code>/blog/post</code>와 같은 처리는 Node.js가 하게 되고</li>
<li><code>/blog/post/img.png</code>와 같은 처리는 NginX가 하게 된다.</li>
</ul>

<h1 id="root와-alias의-차이">root와 alias의 차이</h1>

<p>location 하위에 Static File Path를 연결하기 위한 방식에는 두 가지가 있다. </p>

<p><code>root</code>와 <code>alias</code>인데... 간단하게 설명하자면</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">location /public {
    root $HOME/files
}

# http://localhost/public/dir/file.jpg 를 요청할 경우
# $HOME/files/public/dir/file.jpg 를 찾게 된다.
# 즉, 선언된 Local Path($HOME/files) + 전체 URL Path(/public/dir/file.jpg) 로 찾게 된다.

location /public {
    alias $HOME/files
}

# http://localhost/public/dir/file.jpg 를 요청할 경우
# $HOME/files/dir/file.jpg 를 찾게 된다.
# 즉, 선언된 Local Path($HOME/files) + location에 선언된 Path 이하(/dir/file.jpg) 로 찾게 된다.
</code></pre></div>
<p>이 차이는 location rule을 정규식을 사용할 때 더욱 극명한 차이를 보이게 되는데</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">location ~ ^/path/(.*)\.(jpg|jpeg|gif|png)$ {
    root $HOME/files
}

# 당연히 들어온 URL Path 전체를 $HOME/files 아래에서 찾게 되지만 

location ~ ^/path/(.*)\.(jpg|jpeg|gif|png)$ {
    alias $HOME/files/$1.$2
}

# 마치 일반적인 프로그래밍의 String.replace()처럼 주소를 찾게 된다.
</code></pre></div>
<p>성능 차이는 잘 모르겠고...;;; Static File의 자원 구성에 따라 차이가 발생하게 될 듯 싶다.</p>

<p>뭐 디자이너들과의 협업 때 발생되는 자원들처럼 <code>/public</code> 같은 root 디렉토리 하위에 Static File 자원들을 주소에 맞게 정리해 놓았다면 <code>root</code>를 사용하는 것이 좋겠고, 그 외, 대체적인 뭔가 편집이 필요한 상황에서는 <code>alias</code>를 쓸 수 밖에 없지 않을까 싶다.</p>
]]></content>
</article>



<article>
<title><![CDATA[NginX를 Jenkins의 Reverse Proxy로 설정하기]]></title>
<url><![CDATA[/Server/NginX/NginX%E1%84%85%E1%85%B3%E1%86%AF%20Jenkins%E1%84%8B%E1%85%B4%20Reverse%20Proxy%E1%84%85%E1%85%A9%20%E1%84%89%E1%85%A5%E1%86%AF%E1%84%8C%E1%85%A5%E1%86%BC%E1%84%92%E1%85%A1%E1%84%80%E1%85%B5.html]]></url>
<content><![CDATA[<div class="highlight"><pre><code class="language-text" data-lang="text">server {
    listen 443;
    # listen 80;
    server_name jenkins.remote.com;

    ssl on;
    ssl_certificate /etc/nginx/ssl/server.crt;
    ssl_certificate_key /etc/nginx/ssl/server.key;

    location / {
        auth_basic &quot;Restricted!&quot;;
        auth_basic_user_file /etc/nginx/.htpasswd;
        proxy_pass http://localhost:8080;
        proxy_set_header Authorization &quot;&quot;;
        #proxy_pass_header Authorization;
    }
}
</code></pre></div>]]></content>
</article>



<article>
<title><![CDATA[NginX를 Node.js의 Reverse Proxy로 설정하기]]></title>
<url><![CDATA[/Server/NginX/NginX%E1%84%85%E1%85%B3%E1%86%AF%20Node.js%E1%84%8B%E1%85%B4%20Reverse%20Proxy%E1%84%85%E1%85%A9%20%E1%84%89%E1%85%A5%E1%86%AF%E1%84%8C%E1%85%A5%E1%86%BC%E1%84%92%E1%85%A1%E1%84%80%E1%85%B5.html]]></url>
<content><![CDATA[<h1 id="참고-자료들">참고 자료들</h1>

<ul>
<li><a href="http://blog.argteam.com/coding/hardening-node-js-for-production-part-2-using-nginx-to-avoid-node-js-load/">HARDENING NODE.JS FOR PRODUCTION PART 2: USING NGINX TO AVOID NODE.JS LOAD</a></li>
</ul>

<h1 id="nginx를-단순-reverse-proxy로-사용하기">NginX를 단순 Reverse Proxy로 사용하기</h1>

<p>주력 개발이 Node.js라고 할지라도 기본적으로 Node.js의 앞단에 NginX가 서있으면 장점이 많다. (실제 Node.js 개발자 마저도 이를 추천하고 있고...)</p>

<ol>
<li>일단 NginX에서 한 번 털고 들어오므로 보안에 좋다.</li>
<li>Static File을 NginX에 위임할 경우 보다 괜찮은 성능을 보여준다.</li>
</ol>

<p>부분적으로 라우팅을 따주는게 아니라, 데이터 전반은 Node.js에 위임하고, Static File들만 NginX가 호스팅 하도록 예외를 만들어주겠다 싶으면 큰 설정은 필요가 없다.</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">server {
    set $HOMEDIR /home/ssen.name/ssen.name;
    set $DROPBOX /data/Dropbox;
    set $NODE_PORT 9878;

    listen 80;
    server_name localhost;

    location ^~ /public {
        alias $HOMEDIR/public;
        autoindex off;
        expires max;
    }

    location ^~ /files {
        alias $DROPBOX/Contents/files;
        autoindex off;
        expires max;
    }

    location ~ ^/devlog/(?!asset::)(.*)\.(jpg|jpeg|gif|png|ico|zip|tgz|gz|rar|bz2|pdf|tar|wav|bmp|rtf|flv|swf)$ {
        alias $DROPBOX/Contents/devlog/$1.$2;
        expires max;
    }

    location / {
        proxy_redirect off;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $http_host;
        proxy_set_header X-NginX-Proxy true;
        proxy_set_header Connection &quot;&quot;;
        proxy_http_version 1.1;

        proxy_pass http://127.0.0.1:$NODE_PORT;
    }

}
</code></pre></div>
<p>부분별로 살펴보자면</p>

<ol>
<li><code>location /</code> 전체적으로는 Node.js에게 위임한다</li>
<li><code>location ~ ^/devlog/(?!asset::)(.*)\.(jpg|jpeg|gif|png|ico|zip|tgz|gz|rar|bz2|pdf|tar|wav|bmp|rtf|flv|swf)$</code>

<ul>
<li><code>/devlog/</code> 하단 주소에서 Static File만을 NginX가 처리하도록 한다.</li>
<li>기본적으로 Node.js가 Static File을 처리해주고 있긴 하지만, NginX가 중간에 가로채서 처리하는 것이 성능 상 더 좋다</li>
</ul></li>
<li><code>location ^~ /public</code>, <code>location ^~ /files</code> Static File 저장소들을 NginX가 처리하도록 선언해준다</li>
</ol>

<p>일반적인 경우에는 <code>location /</code>와 <code>lcoation ^~ /public</code> 조합만으로 처리가 가능하긴 하다. 정규식으로 처리한 부분은 좀 특수한 동작 (Node.js 서비스와 Static File 경로가 겹치는 경우)의 처리를 위해 선언한 부분이고...</p>

<h3 id="코드에-주석을-달아보자면">코드에 주석을 달아보자면</h3>
<div class="highlight"><pre><code class="language-text" data-lang="text">server {
    # 환경 변수들을 set
    set $HOMEDIR /home/ssen.name/ssen.name;
    set $DROPBOX /data/Dropbox;
    set $NODE_PORT 9878;

    # 80 포트로 서비스를 시작하고
    listen 80;
    # 걍 모든 도메인을 전부 처리한다. (특정 도메인만 처리하고 싶다면 해당 도메인을 적어주면 된다)
    server_name localhost;

    # 순위가 높은 선언을 사용해서 아래의 location / 의 예외를 작성해줌
    # /public 으로 시작하는 주소들을 잡아서
    location ^~ /public {
        # $HOMEDIR/public 디렉토리 아래의 파일들을 사용해서 호스팅 한다
        alias $HOMEDIR/public;
        # /public/dir 에 대해 /public/dir/index.html 을 보여주거나,
        # 자동으로 list를 보여줄 필요는 없으므로 autoindex를 꺼준다
        autoindex off;
        # 웹 브라우저가 캐시를 최대한 사용하도록 처리 (Http 헤더에 &quot;이건 변할 일이 없는 자료란다&quot;라고 알려주게 됨)
        expires max;
    }

    location ^~ /files {
        alias $DROPBOX/Contents/files;
        autoindex off;
        expires max;
    }

    # 순위가 좀 높은 정규식을 사용하는 prefix 선언을 사용해서 아래의 location / 의 예외를 작성해줌
    # ~ 정규식에 맞으면
    # ^/devlog/ 로 시작하는
    # (?!asset::) asset:: 을 포함하지 않는
    # (.*) 모든 경로 --&gt; $1 캡쳐
    # \. 쩜 찍고
    # (jpg|jpeg...)$ 이런 파일 확장자로 끝나는 것들 --&gt; $2 캡쳐
    location ~ ^/devlog/(?!asset::)(.*)\.(jpg|jpeg|gif|png|ico|zip|tgz|gz|rar|bz2|pdf|tar|wav|bmp|rtf|flv|swf)$ {
        # 캡쳐된 $1, $2 문자열을 사용해서 파일을 찾아 보내준다
        alias $DROPBOX/Contents/devlog/$1.$2;
        # 웹 브라우저가 캐시를 최대한 사용하도록 처리 (Http 헤더에 &quot;이건 변할 일이 없는 자료란다&quot;라고 알려주게 됨)
        expires max;
    }

    # 순위가 가장 낮은 location 선언 (prefix가 없음)
    location / {
        # Reverse Proxy 설정 관련...
        proxy_redirect off;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $http_host;
        proxy_set_header X-NginX-Proxy true;
        proxy_set_header Connection &quot;&quot;;
        proxy_http_version 1.1;

        # proxy pass... 뭐 대충 말 그대로 매칭된 url을 http://127.0.0.1:9878로 보낸다는 뜻 
        proxy_pass http://127.0.0.1:$NODE_PORT;
    }

}
</code></pre></div>]]></content>
</article>



<article>
<title><![CDATA[NginX에 Basic Authenication 적용하기]]></title>
<url><![CDATA[/Server/NginX/NginX%E1%84%8B%E1%85%A6%20Basic%20Authenication%20%E1%84%8C%E1%85%A5%E1%86%A8%E1%84%8B%E1%85%AD%E1%86%BC%E1%84%92%E1%85%A1%E1%84%80%E1%85%B5.html]]></url>
<content><![CDATA[<h1 id="htpasswd"><a href="../Shell/htpasswd.md">htpasswd</a></h1>

<p>우선 <a href="../Shell/htpasswd.md">htpasswd</a>에 대한 이해가 필요하다.</p>

<h1 id="인증-파일-생성">인증 파일 생성</h1>

<ul>
<li><code>cd /etc/nginx</code> 우선 nginx 설정 공간으로 이동</li>
<li><code>sudo htpasswd -c .htpasswd myid</code> .htpasswd 파일을 만들면서 myid라는 계정을 하나 생성한다. (password를 물어보는데 적어준다)</li>
<li><code>sudo htpasswd .htpasswd userid</code> .htpasswd 파일에 userid라는 계정을 추가한다.

<ul>
<li>중요하다. 멍청하게 <code>-c</code> 옵션을 계속 줘서 파일이 덮어쓰기가 되어버린걸 모르고 몇 시간 삽질의 원인이 되어버림...</li>
</ul></li>
</ul>

<h1 id="인증을-사용하기">인증을 사용하기</h1>

<p>만들어진 인증 파일을 적용하는 것은 간단하다. 기존 Site 설정에</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">server {
    ...
    location / {
        auth_basic &quot;Login시에 보여줄 메세지&quot;;
        auth_basic_user_file /etc/nginx/.htpasswd;
        ...
    }
}
</code></pre></div>
<p>위와 같이 <code>auth_basic</code>과 <code>auth_basic_user_file</code>만 적용시켜주면 해당 location에는 인증이 적용되게 된다.</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">sudo service nginx restart
</code></pre></div>
<p>참고로 nginx를 재가동 시켜야 적용된다.</p>
]]></content>
</article>



<article>
<title><![CDATA[Nginx Proxy Redirect]]></title>
<url><![CDATA[/Server/NginX/Nginx%20Proxy%20Redirect.html]]></url>
<content><![CDATA[<div class="highlight"><pre><code class="language-nginx" data-lang="nginx"><span class="k">server</span> <span class="p">{</span>
    <span class="kn">listen</span> <span class="mi">9889</span><span class="p">;</span>
    <span class="kn">server_name</span> <span class="s">localhost</span><span class="p">;</span>

    <span class="kn">index</span> <span class="s">index.html</span> <span class="s">index.htm</span> <span class="s">index.jsp</span><span class="p">;</span>

    <span class="kn">location</span> <span class="s">/</span> <span class="p">{</span>
        <span class="kn">proxy_pass</span>      <span class="s">http://localhost:8080/test-gradlexxx/</span><span class="p">;</span>
        <span class="kn">proxy_redirect</span>  <span class="s">http://localhost:8080/test-gradlexxx/</span> <span class="s">/</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>]]></content>
</article>



<article>
<title><![CDATA[Node.js 설치]]></title>
<url><![CDATA[/Server/Ubuntu%20Server/Node.js%20%E1%84%89%E1%85%A5%E1%86%AF%E1%84%8E%E1%85%B5.html]]></url>
<content><![CDATA[<h1 id="node.js-설치">Node.js 설치</h1>

<ol>
<li><code>sudo apt-get install python-software-properties python g++ make</code></li>
<li><code>sudo add-apt-repository ppa:chris-lea/node.js</code>

<ul>
<li>작동이 안될 경우 <code>sudo apt-get install software-properties-common</code></li>
</ul></li>
<li><code>sudo apt-get update</code> 새로운 repository 추가로 인해서 update 해줘야 함</li>
<li><code>sudo apt-get install nodejs</code></li>
</ol>

<p>repository를 추가하는 이유는?</p>

<ol>
<li><code>nodejs</code>와 <code>npm</code>을 따로 설치한다</li>
<li>실행 command 가 <code>nodejs</code> 가 된다. (<code>node</code>로 실행되지 않는다.)</li>
</ol>

<p>위의 이유 때문에 보통 chris-lea의 package 를 사용하는듯 싶다. (아마도?)</p>

<h1 id="node.js-설치-후-확인">Node.js 설치 후 확인</h1>

<ol>
<li><code>node --version</code></li>
<li><code>sudo npm install -g coffee-script</code> npm 설치 테스트</li>
<li><code>sudo npm install -g mocha</code></li>
<li><code>sudo npm install -g forever</code></li>
<li><code>node</code> console을 실행해본다</li>
</ol>

<p>위와 같이 설치한 <code>coffee</code> 같은 명령어들이 실행되지 않을 경우엔 일단 <code>npm</code> 설치 메세지를 확인해서, 설치된 경로를 본다.</p>

<p>보통 <code>/usr/bin/coffee -&gt; ...</code>와 같은 메세지가 나오면 따로 설정이 필요없이 실행이 가능할테고, 아닌 경우엔 </p>

<p><code>sudo nano ~/.zshrc</code> PATH 에 <code>:/usr/local/share/npm/bin</code> 와 같은 식으로 npm global path의 경로를 추가시켜주면 된다.</p>
]]></content>
</article>



<article>
<title><![CDATA[Polygonal Data Structures]]></title>
<url><![CDATA[/Flash/Polygonal%20Data%20Structures.html]]></url>
<content><![CDATA[<h1 id="구조들-간-속도-차이">구조들 간 속도 차이</h1>

<table><thead>
<tr>
<th>test</th>
<th>ds_fp9_debug.swc</th>
<th>ds_fp9.swc</th>
</tr>
</thead><tbody>
<tr>
<td>queue enqueue</td>
<td>34</td>
<td>23</td>
</tr>
<tr>
<td>stack push</td>
<td>39</td>
<td>16</td>
</tr>
<tr>
<td>deque pushBack</td>
<td>27</td>
<td>14</td>
</tr>
<tr>
<td>deque pushFront</td>
<td>27</td>
<td>15</td>
</tr>
<tr>
<td>array push</td>
<td>7</td>
<td>7</td>
</tr>
<tr>
<td>array unshift</td>
<td>1176</td>
<td>1183</td>
</tr>
<tr>
<td>dll append</td>
<td>63</td>
<td>32</td>
</tr>
<tr>
<td>dll prepend</td>
<td>61</td>
<td>32</td>
</tr>
<tr>
<td>queue dequeue</td>
<td>29</td>
<td>14</td>
</tr>
<tr>
<td>stack pop</td>
<td>21</td>
<td>12</td>
</tr>
<tr>
<td>deque popBack</td>
<td>22</td>
<td>13</td>
</tr>
<tr>
<td>deque popFront</td>
<td>22</td>
<td>14</td>
</tr>
<tr>
<td>array pop</td>
<td>6</td>
<td>7</td>
</tr>
<tr>
<td>array shift</td>
<td>442</td>
<td>435</td>
</tr>
<tr>
<td>dll removeTail</td>
<td>38</td>
<td>21</td>
</tr>
<tr>
<td>dll removeHead</td>
<td>39</td>
<td>22</td>
</tr>
</tbody></table>

<ul>
<li>전방 입출력이 필요한 경우 Array 보다는 Linked List 가 효율적일 수 있다</li>
<li>큰 차이는 아니지만, 일반적인 Linked List 보다는 Queue, Stack, Deque 등이 좀 더 빠르다. 유형이 맞다면 사용 하는 것이 좋다.</li>
</ul>

<h1 id="데이터-구조들">데이터 구조들</h1>

<h2 id="queue-(선입선출)">Queue (선입선출)</h2>

<p>뚫려있는 파이프의 한 쪽면은 넣을수만 있고, 다른 한쪽면은 뺄 수만 있는 형태의 구조</p>

<ul>
<li><a href="Queue__Example.as">example</a></li>
<li><a href="http://polygonal.github.com/ds/doc/types/de/polygonal/ds/Queue.html">de.polygonal.ds.Queue</a></li>
<li><a href="http://polygonal.github.com/ds/doc/types/de/polygonal/ds/ArrayedQueue.html">de.polygonal.ds.ArrayedQueue</a></li>
<li><a href="http://polygonal.github.com/ds/doc/types/de/polygonal/ds/LinkedQueue.html">de.polygonal.ds.LinkedQueue</a></li>
<li><code>enqueue(v:T):void</code></li>
<li><code>dequeue():T</code> with remove</li>
<li><code>peek():T</code></li>
<li><code>back():T</code></li>
</ul>

<h2 id="stack-(후입선출)">Stack (후입선출)</h2>

<p>한 쪽이 막혀있는 파이프의 한 쪽면에 넣게 되면, 마지막에 들어간 값을 최우선으로 뺄 수 밖에 없는 형태의 구조</p>

<ul>
<li><a href="Stack__Example.as">example</a></li>
<li><a href="http://polygonal.github.com/ds/doc/types/de/polygonal/ds/Stack.html">de.polygonal.ds.Stack</a></li>
<li><a href="http://polygonal.github.com/ds/doc/types/de/polygonal/ds/ArrayedStack.html">de.polygonal.ds.ArrayedStack</a></li>
<li><a href="http://polygonal.github.com/ds/doc/types/de/polygonal/ds/LinkedStack.html">de.polygonal.ds.LinkedStack</a></li>
<li><code>push(v:T):void</code></li>
<li><code>pop():T</code> with remove</li>
<li><code>top():T</code></li>
</ul>

<h2 id="deque-(후입선출-+-양방향)">Deque (후입선출 + 양방향)</h2>

<p>뚫려있는 파이프의 양옆으로 구슬을 집어넣고, 빼낼때도 양옆으로 마지막에 들어간 구슬을 빼낼 수 있는 형태의 구조</p>

<ul>
<li><a href="Deque__Example.as">example</a></li>
<li><a href="http://polygonal.github.com/ds/doc/types/de/polygonal/ds/Deque.html">de.polygonal.ds.Deque</a></li>
<li><a href="http://polygonal.github.com/ds/doc/types/de/polygonal/ds/ArrayedDeque.html">de.polygonal.ds.ArrayedDeque</a></li>
<li><a href="http://polygonal.github.com/ds/doc/types/de/polygonal/ds/LinkedDeque.html">de.polygonal.ds.LinkedDeque</a></li>
<li><code>pushBack(v:T):void</code></li>
<li><code>back():T</code></li>
<li><code>popBack():T</code> with remove</li>
<li><code>pushFront(v:T):void</code></li>
<li><code>front():T</code></li>
<li><code>popFront():T</code> with remove</li>
</ul>

<h2 id="heap-(순위-우선-내보내기)">Heap (순위 우선 내보내기)</h2>

<p>각 항목들을 순위 매겨서 순위가 높은 것들 부터 우선적으로 내보내준다</p>

<ul>
<li><a href="Heap__Example.as">example</a></li>
<li><a href="http://polygonal.github.com/ds/doc/types/de/polygonal/ds/Heap.html">de.polygonal.ds.Heap</a></li>
<li><a href="http://polygonal.github.com/ds/doc/types/de/polygonal/ds/Heapable.html">de.polygonal.ds.Heapable</a> &gt; <a href="http://polygonal.github.com/ds/doc/types/de/polygonal/ds/Comparable.html">de.polygonal.ds.Comparable</a></li>
<li><code>add(h:Heapable):void</code></li>
<li><code>top():Heapable</code></li>
<li><code>bottom():Heapable</code></li>
<li><code>pop():Heapable</code> with remove</li>
</ul>

<h2 id="array2,-array3-(grid-형-배열)">Array2, Array3 (Grid 형 배열)</h2>

<p>x, y 혹은 x, y, z 형태의 다차원 배열을 컨트롤 할 수 있다</p>

<p>표준적인 x, y grid 혹은 x, y, z grid 로 써도 큰 무리가 없을듯 싶다</p>

<ul>
<li><a href="Array2__Example.as">example</a></li>
<li><a href="http://polygonal.github.com/ds/doc/types/de/polygonal/ds/Array2.html">de.polygonal.ds.Array2</a></li>
<li><code>set(x:int, y:int, v:T):void</code></li>
<li><code>get(x:int, y:int):T</code></li>
<li><code>getH():int</code></li>
<li><code>getV():int</code></li>
<li><code>setH(h:int):void</code></li>
<li><code>setV(v:int):void</code></li>
</ul>

<h2 id="map-(dictionary-와-유사)">Map (Dictionary 와 유사)</h2>

<p>key id 로 값을 저장하고, 찾는다</p>

<p>Dictionary 와 유사한 형태 이므로 큰 문제는 없다.</p>

<p>당연히 Dictionary 가 더 빠르지만, <code>size()</code> 와 같이 <strong>크기를 요구하는 작업 이거나</strong>, <code>iterator()</code> 나 <code>toKeyArray()</code> 와 같은 <strong>명확한 순서를 요구하는 작업시에 쓸만하다</strong></p>

<ul>
<li><a href="Map__Example.as">example</a></li>
<li><a href="http://polygonal.github.com/ds/doc/types/de/polygonal/ds/Map.html">de.polygonal.ds.Map</a></li>
<li><a href="http://polygonal.github.com/ds/doc/types/de/polygonal/ds/HashMap.html">de.polygonal.ds.HashMap</a></li>
<li><code>set(k:String, v:T):void</code></li>
<li><code>get(k:String):T</code></li>
<li><code>has(k:String):Boolean</code></li>
<li><code>remap(k:String, v:T):void</code></li>
</ul>

<h2 id="tree">Tree</h2>

<p>Tree 형태의 데이터를 작업하는데 꼭 필요한 수준</p>

<ul>
<li><a href="Tree__Example.as">example</a></li>
<li><a href="http://polygonal.github.com/ds/doc/types/de/polygonal/ds/TreeBuilder.html">de.polygonal.ds.TreeBuilder</a></li>
<li><a href="http://polygonal.github.com/ds/doc/types/de/polygonal/ds/TreeNode.html">de.polygonal.ds.TreeNode</a></li>
</ul>

<h2 id="linkedlist">LinkedList</h2>

<p>Array 랑 기능적 면에서 큰 차이가 있지는 않다. (즉, Array 로도 되는 작업들 이라는 것)</p>

<p>단, <code>unshift()</code> 와 <code>shift()</code> 와 같은 <strong>전방 항목에 대한 편집을 필요로 할 경우 Array 보다 상당한 속도를 보여준다.</strong></p>

<p>그리고, <code>insertBefore()</code> 나 <code>insertAfter()</code> 와 같은 <strong>특정 위치 대비 항목 추가</strong> 와 같은 기능이나, <code>shiftUp()</code>, <code>popDown()</code> 과 같은 <strong>node 의 이동 기능들</strong> 은 작업에 유용함을 준다.</p>

<ul>
<li><a href="LinkedList__Example.as">example</a></li>
<li><a href="http://polygonal.github.com/ds/doc/types/de/polygonal/ds/SLL.html">de.polygonal.ds.SLL</a></li>
<li><a href="http://polygonal.github.com/ds/doc/types/de/polygonal/ds/SLLNode.html">de.polygonal.ds.SLLNode</a></li>
<li><a href="http://polygonal.github.com/ds/doc/types/de/polygonal/ds/DLL.html">de.polygonal.ds.DLL</a></li>
<li><a href="http://polygonal.github.com/ds/doc/types/de/polygonal/ds/DLLNode.html">de.polygonal.ds.DLLNode</a></li>
</ul>

<h1 id="pooling">Pooling</h1>

<h2 id="objectpool">ObjectPool</h2>

<p>new 에 들어가는 비용과 gabage collection 비용을 아껴야 할 만큼 instance 가 과격하게 많이 사용되는 경우 사용할 수 있다</p>

<ul>
<li><a href="ObjectPool__Example.as">example</a></li>
<li><a href="http://polygonal.github.com/ds/doc/types/de/polygonal/ds/pooling/ObjectPool.html">de.polygonal.ds.pooling.ObjectPool</a></li>
</ul>

<h2 id="linkedobjectpool">LinkedObjectPool</h2>

<p>id 기반으로 돌려야 하는 ObjectPool 과 다르게 object 단위로 사용이 가능하다</p>

<p>좀 더 편하게 쓸 수 있다</p>

<ul>
<li><a href="LinkedObjectPool__Example.as">example</a></li>
<li><a href="http://polygonal.github.com/ds/doc/types/de/polygonal/ds/pooling/LinkedObjectPool.html">de.polygonal.ds.pooling.LinkedObjectPool</a></li>
</ul>
]]></content>
</article>



<article>
<title><![CDATA[Redis]]></title>
<url><![CDATA[/Server/Redis/Redis.html]]></url>
<content><![CDATA[<h1 id="homebrew-를-통한-redis-설치와-실행">Homebrew 를 통한 Redis 설치와 실행</h1>

<ul>
<li><code>brew install redis</code></li>
<li><code>redis-server</code> server 가 실행된다</li>
<li><code>redis-cli</code> server 에 접속하는 cli client 가 실행된다</li>
</ul>

<h1 id="기본-명령어들">기본 명령어들</h1>

<ul>
<li>기본 CRUD

<ul>
<li><code>set key value</code></li>
<li><code>get key</code></li>
<li><code>del key</code></li>
</ul></li>
<li>증가

<ul>
<li><code>incr key</code> key 의 value 가 +1 된다 (increment)</li>
<li><code>incrby key 2</code> key 의 value 를 뒤에 적힌 수만큼 증가시킨다</li>
<li><code>decr key</code> key 의 value 가 -1 된다</li>
<li><code>decrby key 2</code> key 의 value 를 뒤에 적힌 수만큼 감소시킨다</li>
</ul></li>
<li>Data 의 수명 결정

<ul>
<li><code>expire key 10</code> 10초 후에 key 를 삭제한다</li>
<li><code>expireat key {unix time stamp}</code> 지정된 시간에 key 를 삭제한다</li>
<li><code>ttl key</code> expire 까지 남은 시간(초) 

<ul>
<li>expire 를 걸지 않은 값의 경우 -1 이 리턴됨</li>
<li>값이 set 으로 변경되거나 del 로 삭제되는 경우 expire 가 취소되고 ttl 이 -1 로 리턴됨</li>
</ul></li>
</ul></li>
<li>Array

<ul>
<li><code>rpush key value</code> key 배열의 후방(right)에 값을 추가한다</li>
<li><code>lpush key value</code> key 배열의 전방(left)에 값을 추가한다</li>
<li><code>lrange key 0 -1</code> 0 에서 모든 값을 가져온다 (뒤가 -1 이 아니면 끊어온다)</li>
<li><code>llen key</code> key 배열의 length</li>
<li><code>lpop key</code> key 배열의 전방값을 하나 삭제하며 가져온다</li>
<li><code>rpop key</code></li>
</ul></li>
<li>Set

<ul>
<li><code>sadd key &quot;a&quot;</code> key 에 &quot;a&quot; 를 넣는다</li>
<li><code>srem key &quot;a&quot;</code> key 에 &quot;a&quot; 를 뺀다</li>
<li><code>sismember key &quot;a&quot;</code> key 에 &quot;a&quot; 가 있는지 확인한다 (1 : true , 0 : false)</li>
<li><code>smembers key</code> key 의 모든 값들을 가져온다</li>
<li><code>sinter key1 key2</code> key1 과 key2 양쪽 모두에 있는 값들을 본다</li>
<li><code>sunion key1 key2</code> key1 과 key2 를 합쳐서 본다</li>
</ul></li>
<li>Sorted

<ul>
<li><code>zadd key 10 &quot;a&quot;</code> key 에 순위 10 으로 &quot;a&quot; 를 추가한다</li>
<li><code>zrange key 0 -1</code> key 를 가져온다 (순위에 따라서 자동정렬되어져 온다)</li>
</ul></li>
<li>Subscribe

<ul>
<li><code>subscribe &quot;channelname&quot;</code> &quot;channelname&quot; 이라는 channel 을 구독하기 시작한다 (수신측)</li>
<li><code>publish &quot;channelname&quot; &quot;message&quot;</code> &quot;channelname&quot; 이라는 channel 로 메세지를 전달한다 (송신측)</li>
<li>event <code>message (channelname, message)</code> subscribe 상태에서 message 라는 이벤트가 온다 (수신측)</li>
<li>event <code>subscribe (channelname, count)</code> subscribe 명령으로 channel 에 진입했을때 발동 (수신측)</li>
</ul></li>
<li>Hash

<ul>
<li><code>hset hash key value</code> hash 의 key 에 value 를 저장한다</li>
<li><code>hincrby hash key 1</code> hash 의 key 숫자값을 증가시킨다 (없을 경우엔 해당 숫자를 추가)</li>
<li><code>hget hash key</code> hash 의 key 값을 가져온다</li>
<li><code>hgetall hash</code> hash 에 있는 모든 값을 key, value 순서로 가져온다</li>
<li><code>hkeys hash</code> hash 에 있는 모든 key 들을 가져온다</li>
<li><code>hvals hash</code> hash 에 있는 모든 value 들을 가져온다</li>
</ul></li>
<li>Sets 를 key 의 집합으로 사용하기

<ul>
<li><code>sadd set key</code> set 에 특정 key 를 합류시킨다</li>
<li><code>smembers set</code> set 에 존재하는 모든 key 들을 본다</li>
<li><code>sinter set1 set2</code> set1 과 set2 에 동시에 존재하는 key 들을 본다 (교집합)</li>
<li><code>sunion set1 set2</code> set1 과 set2 의 key 들을 합쳐서 본다 (합집합)</li>
</ul></li>
<li>검색, 확인

<ul>
<li><code>keys *a*</code> &quot;name&quot; 과 같이 중간에 a가 포함된 이름을 가진 모든 key 들을 확인한다 (ex. <code>*</code>, <code>type:*</code>...)</li>
<li><code>type key</code> key 의 type 을 확인한다</li>
</ul></li>
</ul>

<h1 id="node.js-redis">Node.js redis</h1>

<h1 id="추가-자료들">추가 자료들</h1>

<ul>
<li><a href="http://kerocat.tistory.com/1">http://kerocat.tistory.com/1</a></li>
<li><a href="http://redis.io/commands">http://redis.io/commands</a></li>
<li><a href="https://npmjs.org/package/redis">https://npmjs.org/package/redis</a></li>
</ul>
]]></content>
</article>



<article>
<title><![CDATA[Regular Expressions]]></title>
<url><![CDATA[/Programming/Regular%20Expressions.html]]></url>
<content><![CDATA[<h1 id="정규식-참고">정규식 참고</h1>

<ul>
<li><a href="http://msdn.microsoft.com/ko-kr/library/yd1hzczs.aspx">msdn 정규식 flag 소개</a></li>
<li><a href="http://blog.naver.com/PostView.nhn?blogId=yonga&amp;logNo=150004198246">정규식 특수문자 소개</a></li>
<li><a href="http://help.adobe.com/ko_KR/FlashPlatform/reference/actionscript/3/RegExp.html">as3 RegExp</a></li>
<li><a href="http://help.adobe.com/ko_KR/as3/dev/WS5b3ccc516d4fbf351e63e3d118a9b90204-7ea7.html">adobe help 정규식</a></li>
</ul>

<h1 id="정규식-검색">정규식 검색</h1>

<h2 id="flag">Flag</h2>

<ul>
<li><code>g</code> 

<ul>
<li>내려쓰기를 무시</li>
<li>검출되는 전체를 replace</li>
</ul></li>
<li><code>i</code><br>

<ul>
<li>대소문자 무시</li>
</ul></li>
<li><code>m</code> Multiline

<ul>
<li><code>^</code>, <code>$</code> 옵션이 붙었을때, 내려쓰기를 포함해서 검색</li>
<li><code>&quot;aaa\nbbb\nccc&quot;.match(/^bbb/) // null</code></li>
<li><code>&quot;aaa\nbbb\nccc&quot;.match(/^bbb/m) // bbb</code></li>
</ul></li>
</ul>

<h2 id="or">or</h2>
<div class="highlight"><pre><code class="language-text" data-lang="text">var str:String = &quot;강아지는 멍멍멍\n고양이는 깽깽깽\n까마귀는 깍깍깍&quot;;
trace(str.match(/강아지|까마귀/g));

// 강아지,까마귀
</code></pre></div>
<h2 id="특수-문자">특수 문자</h2>

<ul>
<li><p>띄어쓰기 인접 검색</p>

<ul>
<li><code>\b</code> 띄어쓰기와 인접한 문자열을 찾는다

<ul>
<li><code>trace(&quot;macpro&quot;.match(/\bmac/)); // mac</code></li>
<li><code>trace(&quot;applemacpro&quot;.match(/\bmac/)); // null</code></li>
<li><code>trace(&quot;never&quot;.match(/er\b/)); // er</code></li>
<li><code>trace(&quot;verb&quot;.match(/er\b/)); // null</code></li>
</ul></li>
<li><code>\B</code> 띄어쓰기와 인접하지 않은 문자열을 찾는다</li>
</ul></li>
<li><p>숫자형 검색</p>

<ul>
<li><code>\d</code> 숫자로 된 문자열 <code>[0-9]</code></li>
<li><code>\D</code> 숫자가 아닌 문자열 <code>[^0-9]</code></li>
</ul></li>
<li><p>공백문자 검색</p>

<ul>
<li><code>\n</code> 줄바꿈 문자 <code>\x0d</code>, <code>\cM</code>

<ul>
<li><code>trace(&quot;aaa\nbbb\nccc&quot;.match(&quot;bb\nc&quot;)); // bb\nc</code></li>
</ul></li>
<li><code>\t</code> 탭 문자 <code>\x09</code> <code>\cl</code></li>
<li><code>\f</code> 용지 공급 문자 (정상작동 케이스를 찾지 못함) <code>\x0c</code> <code>\cL</code></li>
<li><code>\r</code> 캐리지 리턴 문자 (정상작동 케이스를 찾지 못함) <code>\x0d</code> <code>\cM</code>

<ul>
<li>개행에 있어서 유닉스는 LF (Line Feed) 를 사용하고, 윈도우는 CR/LF (Carriage Return) 을 사용</li>
<li>OS 차이인지 뭔지 확인이 안됨... 왠만한 경우 피할 것</li>
</ul></li>
<li><code>\v</code> 세로 탭 문자 (정상작동 케이스를 찾지 못함) <code>\x0b</code> <code>\cK</code></li>
<li><code>\s</code> 위에 나열된 모든 공백문자를 찾는다 <code>[\f\n\r\t\v]</code></li>
<li><code>\S</code> 모든 공백이 아닌 문자를 찾는다 <code>[^ \f\n\r\t\v]</code></li>
</ul></li>
<li><p>문자 그룹</p>

<ul>
<li><code>\w</code> 밑줄을 포함한 모든 알파벳 문자를 찾는다 <code>[A-Za-z0-9_]</code></li>
<li><code>\W</code> 알파벳이 아닌 문자를 찾는다 <code>[^A-Za-z0-9_]</code></li>
<li><code>[가-힣]</code> 한글 문자열 범위 (언어 지원에 따라 안될 수 있음, 그럴 경우 <code>\uac00-\ud7a3</code> 로 시도해 볼 수 있음)

<ul>
<li><code>trace(&quot;aaa다람쥐bbbccc나나나ddd&quot;.match(/[가-힣]+/g)); // 다람쥐, 나나나</code></li>
</ul></li>
</ul></li>
</ul>

<h2 id="수량">수량</h2>

<ul>
<li><code>{n}</code> 정확하게 n개</li>
<li><code>{n,}</code> n개 이상</li>
<li><code>{n,m}</code> n개 이상, m개 이하</li>
<li><code>*</code> 0개 이상 <code>{0,}</code></li>
<li><code>+</code> 1개 이상 <code>{1,}</code></li>
<li><code>?</code> 0 또는 1개 <code>{0,1}</code></li>
<li><code>.</code> <code>\n</code> 을 제외한 단일 문자</li>
<li><code>+?</code>, <code>{}?</code> none-greedy pattern 검색 가능 범위 내에서 최소를 찾음

<ul>
<li><code>trace(&quot;aaabbbccc&quot;.match(/b+/)); // bbb</code></li>
<li><code>trace(&quot;aaabbbccc&quot;.match(/b+?/)); // b</code></li>
<li><code>trace(&quot;aaabbbccc&quot;.match(/b{2,3}/)); // bbb</code></li>
<li><code>trace(&quot;aaabbbccc&quot;.match(/b{2,3}?/)); // bb</code></li>
</ul></li>
</ul>

<h2 id="캡쳐">캡쳐</h2>

<ul>
<li><code>()</code>

<ul>
<li><code>trace(&quot;winxp, win98, winvista, win7, win8&quot;.match(/win(xp|98|vista)/g));</code>

<ul>
<li><code>&gt; winxp, win98, winvista</code></li>
</ul></li>
</ul></li>
<li><code>(?:)</code>

<ul>
<li><code>trace(&quot;winxp, win98, winvista, win7, win8&quot;.match(/win(?:xp|98|vista)/g));</code>

<ul>
<li><code>&gt; winxp, win98, winvista</code></li>
</ul></li>
</ul></li>
<li><code>(?=)</code> 캡쳐 그룹 미포함, 캡쳐의 조건이 맞을 경우

<ul>
<li><code>trace(&quot;winxp, win98, winvista, win7, win8&quot;.match(/win(?=xp|98|vista)/g));</code>

<ul>
<li><code>&gt; win, win, win</code></li>
</ul></li>
</ul></li>
<li><code>(?!)</code> 캡쳐 그룹 미포함, 캡쳐의 조건이 맞지 않을 경우 

<ul>
<li><code>trace(&quot;winxp, win98, winvista, win7, win8&quot;.match(/win(?!xp|98|vista)/g));</code>

<ul>
<li><code>&gt; win, win</code></li>
</ul></li>
</ul></li>
</ul>

<h1 id="정규식의-검색-순서">정규식의 검색 순서</h1>

<p>정규식에 옵션이 없는 경우 첫번째만 검출된다</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">var str:String=&quot;aaabbbcccaaabbbcccaaabbbccc\naaabbbccc\ndddaaabbbccc&quot;;

trace(str.replace(/aabb/, &quot;####&quot;));

// a####bcccaaabbbcccaaabbbccc
// aaabbbccc
// dddaaabbbccc
</code></pre></div>
<p>정규식에 global 옵션이 있는 경우 전체가 검출된다</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">var str:String=&quot;aaabbbcccaaabbbcccaaabbbccc\naaabbbccc\ndddaaabbbccc&quot;;

trace(str.replace(/aabb/g, &quot;####&quot;));

// a####bccca####bccca####bccc
// a####bccc
// ddda####bccc
</code></pre></div>
<p>match 를 통해 검출을 목록화 시키고, loop 를 통한 처리가 가능하다</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">var str:String=&quot;aaabbbcccaaabbbcccaaabbbccc\naaabbbccc\ndddaaabbbccc&quot;;

// match 를 통해 목록화 시키고, loop + replace 를 통해 순차적 변경이 가능하다
var matchs:Array=str.match(/aabb/g);

var f:int=-1;
var fmax:int=matchs.length;
while (++f &lt; fmax) {
    str=str.replace(matchs[f], &quot;#&quot; + f + &quot;##&quot;);
}

trace(str);

// a#0##bccca#1##bccca#2##bccc
// a#3##bccc
// ddda#4##bccc
</code></pre></div>
<p>markdown header 와 같이 라인의 전방 기준으로 라인을 검출할 때는 아래처럼 <code>mg</code> 옵션을 써서 처리가 가능하다</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">reg = /^\#{1,6}.*/mg
str = &#39;# A\n## AA\n### AA BB&#39;

console.log(str.match(reg))

// [&quot;# A&quot;, &quot;## AA&quot;, &quot;### AA BB&quot;]
</code></pre></div>]]></content>
</article>



<article>
<title><![CDATA[SSH Key를 통한 Server 접속]]></title>
<url><![CDATA[/Shell/SSH%20Authentication/SSH%20Key%E1%84%85%E1%85%B3%E1%86%AF%20%E1%84%90%E1%85%A9%E1%86%BC%E1%84%92%E1%85%A1%E1%86%AB%20Server%20%E1%84%8C%E1%85%A5%E1%86%B8%E1%84%89%E1%85%A9%E1%86%A8.html]]></url>
<content><![CDATA[<h1 id="ssh-key-생성"><a href="ssh-keygen.md">SSH Key 생성</a></h1>

<p>우선적으로 SSH Key를 생성 해야 한다.</p>

<h1 id="ssh-copy-id">ssh-copy-id</h1>

<p>간단하게 ssh key를 Server측에 심는 방법으로는 <code>ssh-copy-id</code>가 있다.</p>

<p>Mac의 경우 Homebrew를 통해 간단하게 설치가 가능하다</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">brew install ssh-copy-id
</code></pre></div>
<p>설치가 완료되었으면 아래와 같이 공개키를 전달한다</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">ssh-copy-id -i ~/.ssh/you_rsa.pub id@remote.com -p 22
</code></pre></div>
<p>몇 가지 중요한 사항들을 살펴보자면</p>

<ul>
<li><code>ssh-copy-id</code> 명령어</li>
<li><code>-i ~/.ssh/you_rsa.pub</code> 전달할 공개키</li>
<li><code>id@remote.com</code> 전달할 Server에서의 아이디와 도메인 (혹은 IP)</li>
<li><code>-p 22</code> 전달할 Server의 SSH port (기본은 22)</li>
</ul>

<p>이렇게 하면 <code>~/.ssh/you_rsa.pub</code> 공개 키 파일이 <code>remote.com</code>에 <code>~/.ssh/authroized_keys</code>로 저장되게 된다.</p>

<p>이와 같은 작업이 끝이 난 다음엔</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">ssh -p 22 id@remote.com
</code></pre></div>
<p>과 같이 비밀번호를 제외한 상태에서 <code>remote.com</code>에 접속이 가능해진다.</p>

<h2 id="예외적인-에러-상황에서-수동으로-authrozied_keys를-생성-시키기-(예를-들어-fish를-사용할-때)">예외적인 에러 상황에서 수동으로 <code>authrozied_keys</code>를 생성 시키기 (예를 들어 <a href="../Shell/fish.md">fish</a>를 사용할 때)</h2>

<p><a href="../Shell/fish.md">fish</a>를 사용할 경우 <code>ssh-copy-id</code>의 명령어 중 <code>&amp;&amp;</code>가 에러를 발생시키게 된다. (<a href="../Shell/fish.md">fish</a>에서는 <code>&amp;&amp;</code>를 사용한 명령어의 연결이 허락되지 않는다.)</p>

<p>이와 같은 에러의 경우 수동으로 <code>authrozied_keys</code>를 생성시킬 수가 있다.</p>

<ol>
<li>Local에서 <code>cat ~/.ssh/you_rsa.pub | pbcopy</code> 와 같이 공개키의 내용을 클립보드에 복사한다.</li>
<li>Remote Server에 접속한다</li>
<li><code>sudo nano ~/.ssh/authrozied_keys</code> 로 파일을 수동 생성한다.</li>
<li>nano 편집기에서 복사했던 공개키의 내용을 붙여넣기 해준다. (편집기 탈출 및 저장은 <code>ctrl+x</code>)</li>
</ol>

<p>위와 같이 <code>authrozied_keys</code>를 수동으로 생성시켜줘도 된다.</p>

<h1 id="참고한-자료들">참고한 자료들</h1>

<ul>
<li><a href="http://www.thegeekstuff.com/2008/11/3-steps-to-perform-ssh-login-without-password-using-ssh-keygen-ssh-copy-id/">http://www.thegeekstuff.com/2008/11/3-steps-to-perform-ssh-login-without-password-using-ssh-keygen-ssh-copy-id/</a></li>
</ul>
]]></content>
</article>



<article>
<title><![CDATA[Search XML]]></title>
<url><![CDATA[/Flash/Search%20XML.html]]></url>
<content><![CDATA[<h1 id="e4x-형식을-사용한-필터링">E4X 형식을 사용한 필터링</h1>

<ul>
<li>기본적으로 <code>node.list.(boolean)</code> 형태로 필터링 된 XMLList 를 만들어낼 수 있다.</li>
<li>지정한 list 의 하위 method 를 다룰 수 있는듯 싶다.</li>
<li>상당히 피곤하다. 왠만하면 쓰지 말자...</li>
</ul>

<h1 id="검색-방식들">검색 방식들</h1>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;xml&gt;
    &lt;a bbb=&quot;123&quot; /&gt;
    &lt;a ccc=&quot;223&quot; /&gt;
    &lt;a&gt;
        &lt;bb&gt;35&lt;/bb&gt;
        &lt;bb cc=&quot;125&quot;&gt;Schall&lt;/bb&gt;
        &lt;bb&gt;Smith&lt;/bb&gt;
        &lt;bb&gt;Schala&lt;/bb&gt;
        &lt;cc aa=&quot;123&quot;&gt;55&lt;/cc&gt;
    &lt;/a&gt;
    &lt;a bbb=&quot;145&quot; /&gt;
    &lt;a bbb=&quot;1234&quot; /&gt;
    &lt;bb&gt;66&lt;/bb&gt;
&lt;/xml&gt;
</code></pre></div>
<h2 id="node-다루기">Node 다루기</h2>

<p>node 의 name 을 가져오는 <code>name()</code> 을 정규식 검사를 통해 필터링 한다</p>
<div class="highlight"><pre><code class="language-actionscript" data-lang="actionscript"><span class="k">var</span> <span class="nx">xlist</span><span class="o">:</span><span class="nb">XMLList</span><span class="o">=</span><span class="nx">xml</span><span class="p">..</span><span class="o">*;</span>

<span class="nf">trace</span><span class="p">(</span><span class="nx">xlist</span><span class="p">.(</span><span class="nx">name</span><span class="p">()</span><span class="o">==</span><span class="s2">&quot;bb&quot;</span><span class="p">).</span><span class="nx">toXMLString</span><span class="p">());</span>
<span class="c1">// </span>

<span class="nf">trace</span><span class="p">(</span><span class="nx">xlist</span><span class="p">.(</span><span class="sr">/bb/</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">name</span><span class="p">())).</span><span class="nx">toXMLString</span><span class="p">());</span>
<span class="c1">// &lt;bb&gt;35&lt;/bb&gt;</span>
<span class="c1">// &lt;bb cc=&quot;125&quot;&gt;Schall&lt;/bb&gt;</span>
<span class="c1">// &lt;bb&gt;Schala&lt;/bb&gt;</span>
<span class="c1">// &lt;bb&gt;66&lt;/bb&gt;</span>

<span class="nf">trace</span><span class="p">(</span><span class="nx">xlist</span><span class="p">.(</span><span class="sr">/a+/</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">name</span><span class="p">())).</span><span class="nx">toXMLString</span><span class="p">());</span>
<span class="c1">// &lt;a bbb=&quot;123&quot;/&gt;</span>
<span class="c1">// &lt;a ccc=&quot;223&quot;/&gt;</span>
<span class="c1">// &lt;a&gt;</span>
<span class="c1">//   &lt;bb&gt;35&lt;/bb&gt;</span>
<span class="c1">//   &lt;bb cc=&quot;125&quot;&gt;Schall&lt;/bb&gt;</span>
<span class="c1">//   &lt;aa&gt;Smith&lt;/aa&gt;</span>
<span class="c1">//   &lt;bb&gt;Schala&lt;/bb&gt;</span>
<span class="c1">//   &lt;cc aa=&quot;123&quot;&gt;55&lt;/cc&gt;</span>
<span class="c1">// &lt;/a&gt;</span>
<span class="c1">// &lt;aa&gt;Smith&lt;/aa&gt;</span>
<span class="c1">// &lt;a bbb=&quot;145&quot;/&gt;</span>
<span class="c1">// &lt;a bbb=&quot;1234&quot;/&gt;</span>
</code></pre></div>
<p><del>문제는 <code>xlist.(boolean)</code> 을 기초로 하는듯 보이는데도 불구하고, <code>name()===&quot;bb&quot;</code> 는 제대로 작동되지 않는다는 것이다.</del> <code>name()==&quot;bb&quot;</code> 처럼 type 정합성을 배제한 테스트를 해줘야 한다. <sub><code>name() : String</code> 이기에 이해는 잘 안된다만...</sub></p>

<blockquote>
<p>정규식 필터링이 구지 필요없는 경우엔
단순하게 <code>xlist..bb</code> 를 통해 가져오는게 좋을듯 싶다</p>
</blockquote>

<p>node value 의 경우는 <code>toString()</code> 을 정규식 검사를 통해 필터링 한다 </p>
<div class="highlight"><pre><code class="language-text" data-lang="text">var xlist:XMLList=xml.a.bb;

trace(xlist.(/Sch.*?/.test(toString())).toXMLString());
// &lt;bb cc=&quot;125&quot;&gt;Schall&lt;/bb&gt;
// &lt;bb&gt;Schala&lt;/bb&gt;
</code></pre></div>
<h2 id="attribute-다루기">Attribute 다루기</h2>

<p>attribute 의 이름을 가져오는 방식은 없다. 그래서, 특정 attribute 의 이름으로 검색하는데는 문제가 약간 있는듯...</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">var xlist:XMLList=xml.a;

trace(xlist.attribute(&quot;bbb&quot;).toXMLString());
// 123
// 145
// 1234
</code></pre></div>
<p>문제는 node 단위로 가져오는게 아니라는 것</p>

<p>attribute value 의 경우에는 <code>attributes()</code> 를 사용한다.</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">var xlist:XMLList=xml[&quot;a&quot;].*;

trace(xlist.(/12.*?/.test(attributes())).toXMLString());
// &lt;bb cc=&quot;125&quot;&gt;Schall&lt;/bb&gt;
// &lt;cc aa=&quot;123&quot;&gt;55&lt;/cc&gt;

xlist=xml[&quot;a&quot;][2].cc;
trace(xlist.(@aa == &quot;123&quot;).toXMLString());
// &lt;cc aa=&quot;123&quot;&gt;55&lt;/cc&gt;
</code></pre></div>
<p>대소문자 처리를 통해 검색할 수도 있다</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">trace(xlist.(@name.toString().toLowerCase() == &#39;test&#39;))
</code></pre></div>]]></content>
</article>



<article>
<title><![CDATA[Sort Compare Functions]]></title>
<url><![CDATA[/Flash/Sort%20Compare%20Functions.html]]></url>
<content><![CDATA[<p><code>Vector.sort()</code> 보다 <code>Array.sortOn()</code> 이 더 빠르다.</p>

<p><code>function(a:int, b:int):int</code> 의 공식에서 <code>a &gt; b</code> 큰 상황. 즉, <code>a - b</code> 가 1보다 커지는 상황 이라면 1...10 의 순서로 정렬되게 된다. </p>

<h1 id="숫자형-정렬-1...10">숫자형 정렬 1...10</h1>
<div class="highlight"><pre><code class="language-text" data-lang="text">function func(a:int, b:int):int {
    return a - b;
}
</code></pre></div>
<h1 id="숫자형-정렬-10...1">숫자형 정렬 10...1</h1>
<div class="highlight"><pre><code class="language-text" data-lang="text">function func(a:int, b:int):int {
    return b - a;
}
</code></pre></div>
<h1 id="문자형-정렬-a...z">문자형 정렬 a...z</h1>
<div class="highlight"><pre><code class="language-text" data-lang="text">function func(a:String, b:String):int {
    var a1:int;
    var b1:int;
    var i:int = 0;
    while (true) {
        a1 = a.charCodeAt(i);
        b1 = b.charCodeAt(i);
        if (a1 - b1 != 0) {
            return a1 - b1;
        } else if (a1 + b1 &gt; 0) {
            i++;
        } else {
            return 0;
        }
    }
    return 0;
}
</code></pre></div>
<h1 id="문자형-정렬-z...a">문자형 정렬 z...a</h1>
<div class="highlight"><pre><code class="language-text" data-lang="text">function func(a:String, b:String):int {
    var a1:int;
    var b1:int;
    var i:int = 0;
    while (true) {
        a1 = a.charCodeAt(i);
        b1 = b.charCodeAt(i);
        if (b1 - a1 != 0) {
            return b1 - a1;
        } else if (a1 + b1 &gt; 0) {
            i++;
        } else {
            return 0;
        }
    }
    return 0;
}
</code></pre></div>
<h1 id="랜덤-정렬">랜덤 정렬</h1>
<div class="highlight"><pre><code class="language-text" data-lang="text">function func(a:int, b:int):int {
    return MathUtils.rand(-1, 1);
}   
</code></pre></div>]]></content>
</article>



<article>
<title><![CDATA[Stacked, Box Model]]></title>
<url><![CDATA[/Flash/Flex%20Chart/Stacked,%20Box%20Model.html]]></url>
<content><![CDATA[<h1 id="bar,-column-chart-api">Bar, Column Chart Api</h1>

<ul>
<li>chart type control <code>stacked</code>, <code>clustered</code>, <code>overlaid</code>, <code>100%</code>

<ul>
<li><a href="http://blog.flexexamples.com/2007/10/11/creating-clustered-stacked-overlaid-and-100-bar-charts-in-flex-3/">http://blog.flexexamples.com/2007/10/11/creating-clustered-stacked-overlaid-and-100-bar-charts-in-flex-3/</a></li>
</ul></li>
<li>datatip control

<ul>
<li><a href="http://blog.flexexamples.com/2007/10/11/creating-clustered-stacked-overlaid-and-100-bar-charts-in-flex-3/">http://blog.flexexamples.com/2007/10/11/creating-clustered-stacked-overlaid-and-100-bar-charts-in-flex-3/</a></li>
</ul></li>
<li>box model control

<ul>
<li>padding</li>
<li>gutter</li>
<li>axis</li>
<li>label gap</li>
<li>axis label</li>
<li><a href="http://help.adobe.com/en_US/flex/using/WS2db454920e96a9e51e63e3d11c0bf65816-7ff6.html">http://help.adobe.com/en_US/flex/using/WS2db454920e96a9e51e63e3d11c0bf65816-7ff6.html</a></li>
</ul></li>
<li>bar data animation</li>
</ul>

<h2 id="clustered-와-stacked">clustered 와 stacked</h2>
<div class="highlight"><pre><code class="language-text" data-lang="text">// Data
[Bindable]
public var data:IList=new ArrayCollection([
    {Country: &quot;USA&quot;, Gold: 35, Silver: 39, Bronze: 29}, 
    {Country: &quot;China&quot;, Gold: 32, Silver: 17, Bronze: 3},
    {Country: &quot;Russia&quot;, Gold: 27, Silver: 27, Bronze: 38}
]);

// Chart
&lt;s:Panel title=&quot;BartChart Staked Sample&quot; width=&quot;600&quot; height=&quot;400&quot;&gt;
    &lt;mx:BarChart showDataTips=&quot;true&quot; dataProvider=&quot;{data}&quot; width=&quot;100%&quot; height=&quot;100%&quot;&gt;

        &lt;mx:verticalAxis&gt;
            &lt;mx:CategoryAxis categoryField=&quot;Country&quot;/&gt;
        &lt;/mx:verticalAxis&gt;

        &lt;mx:series&gt;
            &lt;mx:BarSet type=&quot;clustered&quot;&gt;
                &lt;mx:BarSet type=&quot;stacked&quot;&gt;
                    &lt;mx:BarSeries yField=&quot;Country&quot; xField=&quot;Gold&quot; displayName=&quot;Gold&quot;/&gt;
                    &lt;mx:BarSeries yField=&quot;Country&quot; xField=&quot;Silver&quot; displayName=&quot;Silver&quot;/&gt;
                    &lt;mx:BarSeries yField=&quot;Country&quot; xField=&quot;Bronze&quot; displayName=&quot;Bronze&quot;/&gt;
                &lt;/mx:BarSet&gt;
                &lt;mx:BarSeries yField=&quot;Country&quot; xField=&quot;Gold&quot; displayName=&quot;Gold&quot;/&gt;
                &lt;mx:BarSet type=&quot;stacked&quot;&gt;
                    &lt;mx:BarSeries yField=&quot;Country&quot; xField=&quot;Silver&quot; displayName=&quot;Silver&quot;/&gt;
                    &lt;mx:BarSeries yField=&quot;Country&quot; xField=&quot;Bronze&quot; displayName=&quot;Bronze&quot;/&gt;
                &lt;/mx:BarSet&gt;
            &lt;/mx:BarSet&gt;
        &lt;/mx:series&gt;
    &lt;/mx:BarChart&gt;
&lt;/s:Panel&gt;
</code></pre></div>
<p><img src="images/Stacked.png" alt="series"></p>

<ul>
<li><code>BarSet.type==&quot;clustered&quot;</code> 는 개별 막대로 보여질 데이터의 그룹임을 표현</li>
<li><code>BarSet.type==&quot;stacked&quot;</code> 는 하나의 막대 내에서 보여질 데이터의 그룹임을 표현</li>
<li>당연히 여러 막대 그룹을 정의하는<code>clustered</code> 는 하나의 막대 그룹을 정의하는 <code>stacked</code> 를 포함할 수 있으나, 반대의 경우에는 에러가 됨</li>
</ul>

<h2 id="chart-의-box-model">Chart 의 Box model</h2>

<p><img src="images/ChartBoxModel.png" alt="box model"></p>

<ul>
<li><code>A</code> 는 <code>paddingLeft</code>, <code>paddingRight</code>, <code>paddingTop</code>, <code>paddingBottom</code> 의 <code>padding area</code></li>
<li><code>B</code> 는 <code>gutterLeft</code>, <code>gutterRight</code>, <code>gutterTop</code>, <code>gutterBottom</code> 의 <code>gutter</code></li>
</ul>
]]></content>
</article>



<article>
<title><![CDATA[Start Travis]]></title>
<url><![CDATA[/Web/Travis/Start%20Travis.html]]></url>
<content><![CDATA[]]></content>
</article>



<article>
<title><![CDATA[Sublime Text2 Key Bindings]]></title>
<url><![CDATA[/Web/Sublime%20Text/Sublime%20Text2%20Key%20Bindings.html]]></url>
<content><![CDATA[<h1 id="단축키-설정">단축키 설정</h1>

<p>Preferences &gt; Key Bindings - User (<code>.sublime-keymap</code>)</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">[
    { &quot;keys&quot;: [&quot;alt+up&quot;], &quot;command&quot;: &quot;swap_line_up&quot; },
    { &quot;keys&quot;: [&quot;alt+down&quot;], &quot;command&quot;: &quot;swap_line_down&quot; },
    { &quot;keys&quot;: [&quot;super+d&quot;], &quot;command&quot;: &quot;run_macro_file&quot;, &quot;args&quot;: {&quot;file&quot;: &quot;Packages/Default/Delete Line.sublime-macro&quot;} },
    { &quot;keys&quot;: [&quot;super+shift+f&quot;], &quot;command&quot;: &quot;show_panel&quot;, &quot;args&quot;: {&quot;panel&quot;: &quot;replace&quot;} },

    { &quot;keys&quot;: [&quot;super+/&quot;], &quot;command&quot;: &quot;plain_tasks_complete&quot;,&quot;context&quot;: [{ &quot;key&quot;: &quot;selector&quot;, &quot;operator&quot;: &quot;equal&quot;, &quot;operand&quot;: &quot;text.todo&quot; }] },
    { &quot;keys&quot;: [&quot;super+shift+/&quot;], &quot;command&quot;: &quot;plain_tasks_cancel&quot;, &quot;context&quot;: [{&quot;key&quot;: &quot;selector&quot;, &quot;operator&quot;: &quot;equal&quot;, &quot;operand&quot;: &quot;text.todo&quot; }] },
    { &quot;keys&quot;: [&quot;super+space&quot;], &quot;command&quot;: &quot;auto_complete&quot; },
    { &quot;keys&quot;: [&quot;super+space&quot;], &quot;command&quot;: &quot;replace_completion_with_auto_complete&quot;, &quot;context&quot;:
        [
            { &quot;key&quot;: &quot;last_command&quot;, &quot;operator&quot;: &quot;equal&quot;, &quot;operand&quot;: &quot;insert_best_completion&quot; },
            { &quot;key&quot;: &quot;auto_complete_visible&quot;, &quot;operator&quot;: &quot;equal&quot;, &quot;operand&quot;: false },
            { &quot;key&quot;: &quot;setting.tab_completion&quot;, &quot;operator&quot;: &quot;equal&quot;, &quot;operand&quot;: true }
        ]
    }
]
</code></pre></div>]]></content>
</article>



<article>
<title><![CDATA[Sublime Text2 Monokai Customize Theme]]></title>
<url><![CDATA[/Web/Sublime%20Text/Sublime%20Text2%20Monokai%20Customize%20Theme.html]]></url>
<content><![CDATA[<h1 id="monokai-customize.tmtheme">Monokai Customize.tmTheme</h1>

<ul>
<li>Original : <a href="https://github.com/amelandri/Monokai-Customized">https://github.com/amelandri/Monokai-Customized</a></li>
<li>Save to <code>${Sublime Text2 Packages Folder}/Color Scheme - Default/Monokai Customize.tmTheme</code></li>
</ul>

<h2 id="theme-code">Theme Code</h2>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;!DOCTYPE plist PUBLIC &quot;-//Apple Computer//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt;
&lt;plist version=&quot;1.0&quot;&gt;
&lt;dict&gt;
    &lt;key&gt;name&lt;/key&gt;
    &lt;string&gt;Monokai&lt;/string&gt;
    &lt;key&gt;settings&lt;/key&gt;
    &lt;array&gt;
        &lt;dict&gt;
            &lt;key&gt;settings&lt;/key&gt;
            &lt;dict&gt;
                &lt;key&gt;background&lt;/key&gt;
                &lt;string&gt;#1B1E24&lt;/string&gt;
                &lt;key&gt;caret&lt;/key&gt;
                &lt;string&gt;#3299E3&lt;/string&gt;
                &lt;key&gt;foreground&lt;/key&gt;
                &lt;string&gt;#F8F8F2&lt;/string&gt;
                &lt;key&gt;invisibles&lt;/key&gt;
                &lt;string&gt;#3B3A32&lt;/string&gt;
                &lt;key&gt;lineHighlight&lt;/key&gt;
                &lt;string&gt;#292D36&lt;/string&gt;
                &lt;key&gt;selection&lt;/key&gt;
                &lt;string&gt;#49483E&lt;/string&gt;
                &lt;key&gt;findHighlight&lt;/key&gt;
                &lt;string&gt;#FFE792&lt;/string&gt;
                &lt;key&gt;findHighlightForeground&lt;/key&gt;
                &lt;string&gt;#000000&lt;/string&gt;
                &lt;key&gt;selectionBorder&lt;/key&gt;
                &lt;string&gt;#222218&lt;/string&gt;
                &lt;key&gt;activeGuide&lt;/key&gt;
                &lt;string&gt;#9D550FB0&lt;/string&gt;

                &lt;key&gt;bracketsForeground&lt;/key&gt;
                &lt;string&gt;#F8F8F2A5&lt;/string&gt;
                &lt;key&gt;bracketsOptions&lt;/key&gt;
                &lt;string&gt;underline&lt;/string&gt;

                &lt;key&gt;bracketContentsForeground&lt;/key&gt;
                &lt;string&gt;#F8F8F2A5&lt;/string&gt;
                &lt;key&gt;bracketContentsOptions&lt;/key&gt;
                &lt;string&gt;underline&lt;/string&gt;

                &lt;key&gt;tagsOptions&lt;/key&gt;
                &lt;string&gt;stippled_underline&lt;/string&gt;
            &lt;/dict&gt;
        &lt;/dict&gt;
        &lt;dict&gt;
            &lt;key&gt;name&lt;/key&gt;
            &lt;string&gt;Comment&lt;/string&gt;
            &lt;key&gt;scope&lt;/key&gt;
            &lt;string&gt;comment&lt;/string&gt;
            &lt;key&gt;settings&lt;/key&gt;
            &lt;dict&gt;
                &lt;key&gt;foreground&lt;/key&gt;
                &lt;string&gt;#5C5B57&lt;/string&gt;
            &lt;/dict&gt;
        &lt;/dict&gt;
        &lt;dict&gt;
            &lt;key&gt;name&lt;/key&gt;
            &lt;string&gt;String&lt;/string&gt;
            &lt;key&gt;scope&lt;/key&gt;
            &lt;string&gt;string&lt;/string&gt;
            &lt;key&gt;settings&lt;/key&gt;
            &lt;dict&gt;
                &lt;key&gt;foreground&lt;/key&gt;
                &lt;string&gt;#E6DB74&lt;/string&gt;
            &lt;/dict&gt;
        &lt;/dict&gt;
        &lt;dict&gt;
            &lt;key&gt;name&lt;/key&gt;
            &lt;string&gt;Number&lt;/string&gt;
            &lt;key&gt;scope&lt;/key&gt;
            &lt;string&gt;constant.numeric&lt;/string&gt;
            &lt;key&gt;settings&lt;/key&gt;
            &lt;dict&gt;
                &lt;key&gt;foreground&lt;/key&gt;
                &lt;string&gt;#AE81FF&lt;/string&gt;
            &lt;/dict&gt;
        &lt;/dict&gt;

        &lt;dict&gt;
            &lt;key&gt;name&lt;/key&gt;
            &lt;string&gt;Built-in constant&lt;/string&gt;
            &lt;key&gt;scope&lt;/key&gt;
            &lt;string&gt;constant.language&lt;/string&gt;
            &lt;key&gt;settings&lt;/key&gt;
            &lt;dict&gt;
                &lt;key&gt;foreground&lt;/key&gt;
                &lt;string&gt;#AE81FF&lt;/string&gt;
            &lt;/dict&gt;
        &lt;/dict&gt;
        &lt;dict&gt;
            &lt;key&gt;name&lt;/key&gt;
            &lt;string&gt;User-defined constant&lt;/string&gt;
            &lt;key&gt;scope&lt;/key&gt;
            &lt;string&gt;constant.character, constant.other&lt;/string&gt;
            &lt;key&gt;settings&lt;/key&gt;
            &lt;dict&gt;
                &lt;key&gt;foreground&lt;/key&gt;
                &lt;string&gt;#AE81FF&lt;/string&gt;
            &lt;/dict&gt;
        &lt;/dict&gt;
        &lt;dict&gt;
            &lt;key&gt;name&lt;/key&gt;
            &lt;string&gt;Variable&lt;/string&gt;
            &lt;key&gt;scope&lt;/key&gt;
            &lt;string&gt;variable&lt;/string&gt;
            &lt;key&gt;settings&lt;/key&gt;
            &lt;dict&gt;
                &lt;key&gt;fontStyle&lt;/key&gt;
                &lt;string&gt;&lt;/string&gt;
            &lt;/dict&gt;
        &lt;/dict&gt;
        &lt;dict&gt;
            &lt;key&gt;name&lt;/key&gt;
            &lt;string&gt;Keyword&lt;/string&gt;
            &lt;key&gt;scope&lt;/key&gt;
            &lt;string&gt;keyword&lt;/string&gt;
            &lt;key&gt;settings&lt;/key&gt;
            &lt;dict&gt;
                &lt;key&gt;foreground&lt;/key&gt;
                &lt;string&gt;#FF7700&lt;/string&gt;
            &lt;/dict&gt;
        &lt;/dict&gt;
        &lt;dict&gt;
            &lt;key&gt;name&lt;/key&gt;
            &lt;string&gt;Storage&lt;/string&gt;
            &lt;key&gt;scope&lt;/key&gt;
            &lt;string&gt;storage&lt;/string&gt;
            &lt;key&gt;settings&lt;/key&gt;
            &lt;dict&gt;
                &lt;key&gt;fontStyle&lt;/key&gt;
                &lt;string&gt;&lt;/string&gt;
                &lt;key&gt;foreground&lt;/key&gt;
                &lt;string&gt;#F92672&lt;/string&gt;
            &lt;/dict&gt;
        &lt;/dict&gt;
        &lt;dict&gt;
            &lt;key&gt;name&lt;/key&gt;
            &lt;string&gt;Storage type&lt;/string&gt;
            &lt;key&gt;scope&lt;/key&gt;
            &lt;string&gt;storage.type&lt;/string&gt;
            &lt;key&gt;settings&lt;/key&gt;
            &lt;dict&gt;
                &lt;key&gt;fontStyle&lt;/key&gt;
                &lt;string&gt;italic&lt;/string&gt;
                &lt;key&gt;foreground&lt;/key&gt;
                &lt;string&gt;#66D9EF&lt;/string&gt;
            &lt;/dict&gt;
        &lt;/dict&gt;
        &lt;dict&gt;
            &lt;key&gt;name&lt;/key&gt;
            &lt;string&gt;Class name&lt;/string&gt;
            &lt;key&gt;scope&lt;/key&gt;
            &lt;string&gt;entity.name.class&lt;/string&gt;
            &lt;key&gt;settings&lt;/key&gt;
            &lt;dict&gt;
                &lt;key&gt;fontStyle&lt;/key&gt;
                &lt;string&gt;underline&lt;/string&gt;
                &lt;key&gt;foreground&lt;/key&gt;
                &lt;string&gt;#A6E22E&lt;/string&gt;
            &lt;/dict&gt;
        &lt;/dict&gt;
        &lt;dict&gt;
            &lt;key&gt;name&lt;/key&gt;
            &lt;string&gt;Inherited class&lt;/string&gt;
            &lt;key&gt;scope&lt;/key&gt;
            &lt;string&gt;entity.other.inherited-class&lt;/string&gt;
            &lt;key&gt;settings&lt;/key&gt;
            &lt;dict&gt;
                &lt;key&gt;fontStyle&lt;/key&gt;
                &lt;string&gt;italic underline&lt;/string&gt;
                &lt;key&gt;foreground&lt;/key&gt;
                &lt;string&gt;#A6E22E&lt;/string&gt;
            &lt;/dict&gt;
        &lt;/dict&gt;
        &lt;dict&gt;
            &lt;key&gt;name&lt;/key&gt;
            &lt;string&gt;Function name&lt;/string&gt;
            &lt;key&gt;scope&lt;/key&gt;
            &lt;string&gt;entity.name.function&lt;/string&gt;
            &lt;key&gt;settings&lt;/key&gt;
            &lt;dict&gt;
                &lt;key&gt;fontStyle&lt;/key&gt;
                &lt;string&gt;&lt;/string&gt;
                &lt;key&gt;foreground&lt;/key&gt;
                &lt;string&gt;#A6E22E&lt;/string&gt;
            &lt;/dict&gt;
        &lt;/dict&gt;
        &lt;dict&gt;
            &lt;key&gt;name&lt;/key&gt;
            &lt;string&gt;Function argument&lt;/string&gt;
            &lt;key&gt;scope&lt;/key&gt;
            &lt;string&gt;variable.parameter&lt;/string&gt;
            &lt;key&gt;settings&lt;/key&gt;
            &lt;dict&gt;
                &lt;key&gt;fontStyle&lt;/key&gt;
                &lt;string&gt;italic&lt;/string&gt;
                &lt;key&gt;foreground&lt;/key&gt;
                &lt;string&gt;#FD971F&lt;/string&gt;
            &lt;/dict&gt;
        &lt;/dict&gt;
        &lt;dict&gt;
            &lt;key&gt;name&lt;/key&gt;
            &lt;string&gt;Tag name&lt;/string&gt;
            &lt;key&gt;scope&lt;/key&gt;
            &lt;string&gt;entity.name.tag&lt;/string&gt;
            &lt;key&gt;settings&lt;/key&gt;
            &lt;dict&gt;
                &lt;key&gt;fontStyle&lt;/key&gt;
                &lt;string&gt;&lt;/string&gt;
                &lt;key&gt;foreground&lt;/key&gt;
                &lt;string&gt;#F92672&lt;/string&gt;
            &lt;/dict&gt;
        &lt;/dict&gt;
        &lt;dict&gt;
            &lt;key&gt;name&lt;/key&gt;
            &lt;string&gt;Tag attribute&lt;/string&gt;
            &lt;key&gt;scope&lt;/key&gt;
            &lt;string&gt;entity.other.attribute-name&lt;/string&gt;
            &lt;key&gt;settings&lt;/key&gt;
            &lt;dict&gt;
                &lt;key&gt;fontStyle&lt;/key&gt;
                &lt;string&gt;&lt;/string&gt;
                &lt;key&gt;foreground&lt;/key&gt;
                &lt;string&gt;#A6E22E&lt;/string&gt;
            &lt;/dict&gt;
        &lt;/dict&gt;
        &lt;dict&gt;
            &lt;key&gt;name&lt;/key&gt;
            &lt;string&gt;Library function&lt;/string&gt;
            &lt;key&gt;scope&lt;/key&gt;
            &lt;string&gt;support.function&lt;/string&gt;
            &lt;key&gt;settings&lt;/key&gt;
            &lt;dict&gt;
                &lt;key&gt;fontStyle&lt;/key&gt;
                &lt;string&gt;&lt;/string&gt;
                &lt;key&gt;foreground&lt;/key&gt;
                &lt;string&gt;#66D9EF&lt;/string&gt;
            &lt;/dict&gt;
        &lt;/dict&gt;
        &lt;dict&gt;
            &lt;key&gt;name&lt;/key&gt;
            &lt;string&gt;Library constant&lt;/string&gt;
            &lt;key&gt;scope&lt;/key&gt;
            &lt;string&gt;support.constant&lt;/string&gt;
            &lt;key&gt;settings&lt;/key&gt;
            &lt;dict&gt;
                &lt;key&gt;fontStyle&lt;/key&gt;
                &lt;string&gt;&lt;/string&gt;
                &lt;key&gt;foreground&lt;/key&gt;
                &lt;string&gt;#66D9EF&lt;/string&gt;
            &lt;/dict&gt;
        &lt;/dict&gt;
        &lt;dict&gt;
            &lt;key&gt;name&lt;/key&gt;
            &lt;string&gt;Library class/type&lt;/string&gt;
            &lt;key&gt;scope&lt;/key&gt;
            &lt;string&gt;support.type, support.class&lt;/string&gt;
            &lt;key&gt;settings&lt;/key&gt;
            &lt;dict&gt;
                &lt;key&gt;fontStyle&lt;/key&gt;
                &lt;string&gt;italic&lt;/string&gt;
                &lt;key&gt;foreground&lt;/key&gt;
                &lt;string&gt;#66D9EF&lt;/string&gt;
            &lt;/dict&gt;
        &lt;/dict&gt;
        &lt;dict&gt;
            &lt;key&gt;name&lt;/key&gt;
            &lt;string&gt;Library variable&lt;/string&gt;
            &lt;key&gt;scope&lt;/key&gt;
            &lt;string&gt;support.other.variable&lt;/string&gt;
            &lt;key&gt;settings&lt;/key&gt;
            &lt;dict&gt;
                &lt;key&gt;fontStyle&lt;/key&gt;
                &lt;string&gt;&lt;/string&gt;
            &lt;/dict&gt;
        &lt;/dict&gt;
        &lt;dict&gt;
            &lt;key&gt;name&lt;/key&gt;
            &lt;string&gt;Invalid&lt;/string&gt;
            &lt;key&gt;scope&lt;/key&gt;
            &lt;string&gt;invalid&lt;/string&gt;
            &lt;key&gt;settings&lt;/key&gt;
            &lt;dict&gt;
                &lt;key&gt;background&lt;/key&gt;
                &lt;string&gt;#F92672&lt;/string&gt;
                &lt;key&gt;fontStyle&lt;/key&gt;
                &lt;string&gt;&lt;/string&gt;
                &lt;key&gt;foreground&lt;/key&gt;
                &lt;string&gt;#F8F8F0&lt;/string&gt;
            &lt;/dict&gt;
        &lt;/dict&gt;
        &lt;dict&gt;
            &lt;key&gt;name&lt;/key&gt;
            &lt;string&gt;Invalid deprecated&lt;/string&gt;
            &lt;key&gt;scope&lt;/key&gt;
            &lt;string&gt;invalid.deprecated&lt;/string&gt;
            &lt;key&gt;settings&lt;/key&gt;
            &lt;dict&gt;
                &lt;key&gt;background&lt;/key&gt;
                &lt;string&gt;#AE81FF&lt;/string&gt;
                &lt;key&gt;foreground&lt;/key&gt;
                &lt;string&gt;#F8F8F0&lt;/string&gt;
            &lt;/dict&gt;
        &lt;/dict&gt;
        &lt;dict&gt;
            &lt;key&gt;name&lt;/key&gt;
            &lt;string&gt;JSON String&lt;/string&gt;
            &lt;key&gt;scope&lt;/key&gt;
            &lt;string&gt;meta.structure.dictionary.json string.quoted.double.json&lt;/string&gt;
            &lt;key&gt;settings&lt;/key&gt;
            &lt;dict&gt;
                &lt;key&gt;foreground&lt;/key&gt;
                &lt;string&gt;#CFCFC2&lt;/string&gt;
            &lt;/dict&gt;
        &lt;/dict&gt;

        &lt;dict&gt;
            &lt;key&gt;name&lt;/key&gt;
            &lt;string&gt;diff.header&lt;/string&gt;
            &lt;key&gt;scope&lt;/key&gt;
            &lt;string&gt;meta.diff, meta.diff.header&lt;/string&gt;
            &lt;key&gt;settings&lt;/key&gt;
            &lt;dict&gt;
                &lt;key&gt;foreground&lt;/key&gt;
                &lt;string&gt;#75715E&lt;/string&gt;
            &lt;/dict&gt;
        &lt;/dict&gt;
        &lt;dict&gt;
            &lt;key&gt;name&lt;/key&gt;
            &lt;string&gt;diff.deleted&lt;/string&gt;
            &lt;key&gt;scope&lt;/key&gt;
            &lt;string&gt;markup.deleted&lt;/string&gt;
            &lt;key&gt;settings&lt;/key&gt;
            &lt;dict&gt;
                &lt;key&gt;foreground&lt;/key&gt;
                &lt;string&gt;#F92672&lt;/string&gt;
            &lt;/dict&gt;
        &lt;/dict&gt;
        &lt;dict&gt;
            &lt;key&gt;name&lt;/key&gt;
            &lt;string&gt;diff.inserted&lt;/string&gt;
            &lt;key&gt;scope&lt;/key&gt;
            &lt;string&gt;markup.inserted&lt;/string&gt;
            &lt;key&gt;settings&lt;/key&gt;
            &lt;dict&gt;
                &lt;key&gt;foreground&lt;/key&gt;
                &lt;string&gt;#A6E22E&lt;/string&gt;
            &lt;/dict&gt;
        &lt;/dict&gt;
        &lt;dict&gt;
            &lt;key&gt;name&lt;/key&gt;
            &lt;string&gt;diff.changed&lt;/string&gt;
            &lt;key&gt;scope&lt;/key&gt;
            &lt;string&gt;markup.changed&lt;/string&gt;
            &lt;key&gt;settings&lt;/key&gt;
            &lt;dict&gt;
                &lt;key&gt;foreground&lt;/key&gt;
                &lt;string&gt;#E6DB74&lt;/string&gt;
            &lt;/dict&gt;
        &lt;/dict&gt;

        &lt;dict&gt;
            &lt;key&gt;scope&lt;/key&gt;
            &lt;string&gt;constant.numeric.line-number.find-in-files - match&lt;/string&gt;
            &lt;key&gt;settings&lt;/key&gt;
            &lt;dict&gt;
                &lt;key&gt;foreground&lt;/key&gt;
                &lt;string&gt;#AE81FFA0&lt;/string&gt;
            &lt;/dict&gt;
        &lt;/dict&gt;
        &lt;dict&gt;
            &lt;key&gt;scope&lt;/key&gt;
            &lt;string&gt;entity.name.filename.find-in-files&lt;/string&gt;
            &lt;key&gt;settings&lt;/key&gt;
            &lt;dict&gt;
                &lt;key&gt;foreground&lt;/key&gt;
                &lt;string&gt;#E6DB74&lt;/string&gt;
            &lt;/dict&gt;
        &lt;/dict&gt;


        &lt;!-- Markdown syntax highligh - Based on Gist 1904917 by eleclerc https://gist.github.com/1904917 --&gt;


        &lt;dict&gt;
            &lt;key&gt;name&lt;/key&gt;
            &lt;string&gt;Markup: Heading&lt;/string&gt;
            &lt;key&gt;scope&lt;/key&gt;
            &lt;string&gt;markup.heading&lt;/string&gt;
            &lt;key&gt;settings&lt;/key&gt;
            &lt;dict&gt;
                &lt;key&gt;fontStyle&lt;/key&gt;
                &lt;string&gt;bold&lt;/string&gt;
                &lt;key&gt;foreground&lt;/key&gt;
                &lt;string&gt;#2DB0E3&lt;/string&gt;
            &lt;/dict&gt;
        &lt;/dict&gt;
        &lt;dict&gt;
           &lt;key&gt;name&lt;/key&gt;
           &lt;string&gt;Markup: Italic&lt;/string&gt;
           &lt;key&gt;scope&lt;/key&gt;
           &lt;string&gt;markup.italic&lt;/string&gt;
           &lt;key&gt;settings&lt;/key&gt;
           &lt;dict&gt;
                   &lt;key&gt;fontStyle&lt;/key&gt;
                   &lt;string&gt;italic&lt;/string&gt;
                   &lt;key&gt;foreground&lt;/key&gt;
                   &lt;string&gt;#839496&lt;/string&gt;
           &lt;/dict&gt;
        &lt;/dict&gt;
        &lt;dict&gt;
           &lt;key&gt;name&lt;/key&gt;
           &lt;string&gt;Markup: Bold&lt;/string&gt;
           &lt;key&gt;scope&lt;/key&gt;
           &lt;string&gt;markup.bold&lt;/string&gt;
           &lt;key&gt;settings&lt;/key&gt;
           &lt;dict&gt;
                   &lt;key&gt;fontStyle&lt;/key&gt;
                   &lt;string&gt;bold&lt;/string&gt;
                   &lt;key&gt;foreground&lt;/key&gt;
                   &lt;string&gt;#7C949C&lt;/string&gt;
           &lt;/dict&gt;
        &lt;/dict&gt;
        &lt;dict&gt;
           &lt;key&gt;name&lt;/key&gt;
           &lt;string&gt;Markup: Underline&lt;/string&gt;
           &lt;key&gt;scope&lt;/key&gt;
           &lt;string&gt;markup.underline&lt;/string&gt;
           &lt;key&gt;settings&lt;/key&gt;
           &lt;dict&gt;
                   &lt;key&gt;fontStyle&lt;/key&gt;
                   &lt;string&gt;underline&lt;/string&gt;
                   &lt;key&gt;foreground&lt;/key&gt;
                   &lt;string&gt;#839496&lt;/string&gt;
           &lt;/dict&gt;
        &lt;/dict&gt;
        &lt;dict&gt;
           &lt;key&gt;name&lt;/key&gt;
           &lt;string&gt;Markup: Quote&lt;/string&gt;
           &lt;key&gt;scope&lt;/key&gt;
           &lt;string&gt;markup.quote&lt;/string&gt;
           &lt;key&gt;settings&lt;/key&gt;
           &lt;dict&gt;
                   &lt;key&gt;fontStyle&lt;/key&gt;
                   &lt;string&gt;italic&lt;/string&gt;
                   &lt;key&gt;foreground&lt;/key&gt;
                   &lt;string&gt;#268bd2&lt;/string&gt;
           &lt;/dict&gt;
        &lt;/dict&gt;
        &lt;dict&gt;
           &lt;key&gt;name&lt;/key&gt;
           &lt;string&gt;Markup: List&lt;/string&gt;
           &lt;key&gt;scope&lt;/key&gt;
           &lt;string&gt;markup.list&lt;/string&gt;
           &lt;key&gt;settings&lt;/key&gt;
           &lt;dict&gt;
                    &lt;key&gt;foreground&lt;/key&gt;
                    &lt;string&gt;#FFFFFF&lt;/string&gt;
           &lt;/dict&gt;
        &lt;/dict&gt;
        &lt;dict&gt;
           &lt;key&gt;name&lt;/key&gt;
           &lt;string&gt;Markup: Raw&lt;/string&gt;
           &lt;key&gt;scope&lt;/key&gt;
           &lt;string&gt;markup.raw&lt;/string&gt;
           &lt;key&gt;settings&lt;/key&gt;
           &lt;dict&gt;
                   &lt;key&gt;foreground&lt;/key&gt;
                   &lt;string&gt;#E8A435&lt;/string&gt;
           &lt;/dict&gt;
        &lt;/dict&gt;
        &lt;dict&gt;
           &lt;key&gt;name&lt;/key&gt;
           &lt;string&gt;Markup: Separator&lt;/string&gt;
           &lt;key&gt;scope&lt;/key&gt;
           &lt;string&gt;meta.separator&lt;/string&gt;
           &lt;key&gt;settings&lt;/key&gt;
           &lt;dict&gt;
                   &lt;key&gt;foreground&lt;/key&gt;
                   &lt;string&gt;#268bd2&lt;/string&gt;
           &lt;/dict&gt;
        &lt;/dict&gt;


    &lt;/array&gt;
    &lt;key&gt;uuid&lt;/key&gt;
    &lt;string&gt;D8D5E82E-3D5B-46B5-B38E-8C841C21347D&lt;/string&gt;
&lt;/dict&gt;
&lt;/plist&gt;
</code></pre></div>]]></content>
</article>



<article>
<title><![CDATA[Sublime Text2 Settings]]></title>
<url><![CDATA[/Web/Sublime%20Text/Sublime%20Text2%20Settings.html]]></url>
<content><![CDATA[<h1 id="설정">설정</h1>

<p>Preferences &gt; Settings - User (<code>Preferences.sublime-settings</code>)</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">{
    &quot;color_scheme&quot;: &quot;Packages/Color Scheme - Default/Monokai Customize.tmTheme&quot;,
    &quot;font_size&quot;: 12,
    &quot;ignored_packages&quot;:
    [
        &quot;Vintage&quot;
    ],
    &quot;line_padding_bottom&quot;: 1,
    &quot;line_padding_top&quot;: 1,
    &quot;open_files_in_new_window&quot;: false,
    &quot;soda_classic_tabs&quot;: false,
    &quot;soda_folder_icons&quot;: true,
    &quot;tab_completion&quot;: false,
    &quot;tab_size&quot;: 4,
    &quot;theme&quot;: &quot;Soda Dark.sublime-theme&quot;
}
</code></pre></div>]]></content>
</article>



<article>
<title><![CDATA[Tomcat 개발 로그]]></title>
<url><![CDATA[/Server/Java/Tomcat%20%E1%84%80%E1%85%A2%E1%84%87%E1%85%A1%E1%86%AF%20%E1%84%85%E1%85%A9%E1%84%80%E1%85%B3.html]]></url>
<content><![CDATA[<h1 id="osx에-tomcat-설치">OSX에 Tomcat 설치</h1>
<div class="highlight"><pre><code class="language-sh" data-lang="sh">brew install tomcat

<span class="c"># tomcat7 로 설치 된다</span>
</code></pre></div>
<p>Gradle 설치</p>
<div class="highlight"><pre><code class="language-sh" data-lang="sh">brew install gradle

gradle -v
</code></pre></div>
<h1 id="ubuntu-에-tomcat-설치">Ubuntu 에 Tomcat 설치</h1>
<div class="highlight"><pre><code class="language-sh" data-lang="sh">sudo aptitude update
sudo aptitude install tomcat7
</code></pre></div>
<p>Ubuntu Tomcat7의 디렉토리 구조들</p>
<div class="highlight"><pre><code class="language-sh" data-lang="sh"><span class="nv">$ </span>tree /etc/tomcat7/
/etc/tomcat7/
├── Catalina
│   └── localhost
├── catalina.properties
├── context.xml
├── logging.properties
├── policy.d
│   ├── 01system.policy
│   ├── 02debian.policy
│   ├── 03catalina.policy
│   ├── 04webapps.policy
│   └── 50local.policy
├── server.xml
├── tomcat-users.xml
└── web.xml

<span class="nv">$ </span>tree /usr/share/tomcat7/
/usr/share/tomcat7/
├── bin
│   ├── bootstrap.jar
│   ├── catalina.sh
│   ├── catalina-tasks.xml
│   ├── configtest.sh
│   ├── daemon.sh
│   ├── digest.sh
│   ├── setclasspath.sh
│   ├── shutdown.sh
│   ├── startup.sh
│   ├── tomcat-juli.jar -&gt; ../../java/tomcat-juli.jar
│   ├── tool-wrapper.sh
│   └── version.sh
├── defaults.md5sum
├── defaults.template
└── lib
    ├── annotations-api.jar -&gt; ../../java/tomcat-annotations-api-7.0.26.jar
    ├── catalina-ant.jar -&gt; ../../java/catalina-ant-7.0.26.jar
    ├── catalina-ha.jar -&gt; ../../java/tomcat-catalina-ha-7.0.26.jar
    ├── catalina.jar -&gt; ../../java/tomcat-catalina-7.0.26.jar
    ├── catalina-tribes.jar -&gt; ../../java/catalina-tribes-7.0.26.jar
    ├── commons-dbcp.jar -&gt; ../../java/commons-dbcp.jar
    ├── commons-pool.jar -&gt; ../../java/commons-pool.jar
    ├── el-api.jar -&gt; ../../java/tomcat-el-api-2.2.jar
    ├── jasper-el.jar -&gt; ../../java/tomcat-jasper-el-7.0.26.jar
    ├── jasper.jar -&gt; ../../java/tomcat-jasper-7.0.26.jar
    ├── jsp-api.jar -&gt; ../../java/tomcat-jsp-api-2.2.jar
    ├── servlet-api.jar -&gt; ../../java/tomcat-servlet-api-3.0.jar
    ├── tomcat-api.jar -&gt; ../../java/tomcat-api-7.0.26.jar
    ├── tomcat-coyote.jar -&gt; ../../java/tomcat-coyote-7.0.26.jar
    ├── tomcat-i18n-es.jar -&gt; ../../java/tomcat-i18n-es-7.0.26.jar
    ├── tomcat-i18n-fr.jar -&gt; ../../java/tomcat-i18n-fr-7.0.26.jar
    ├── tomcat-i18n-ja.jar -&gt; ../../java/tomcat-i18n-ja-7.0.26.jar
    └── tomcat-util.jar -&gt; ../../java/tomcat-util-7.0.26.jar

<span class="nv">$ </span>tree /usr/share/tomcat7-root/
/usr/share/tomcat7-root/
└── default_root
    ├── index.html
    └── META-INF
        └── context.xml

<span class="nv">$ </span>tree /var/cache/tomcat7/
/var/cache/tomcat7/
├── Catalina
│   └── localhost
│       └── _
└── catalina.policy

<span class="nv">$ </span>tree /var/lib/tomcat7/
/var/lib/tomcat7/
├── common
│   └── classes
├── conf -&gt; /etc/tomcat7
├── logs -&gt; ../../log/tomcat7
├── server
│   └── classes
├── shared
│   └── classes
├── webapps
│   └── ROOT
│       ├── index.html
│       └── META-INF
│           └── context.xml
└── work -&gt; ../../cache/tomcat7

<span class="nv">$ </span>tree /var/log/tomcat7/
/var/log/tomcat7/
├── catalina.2014-06-11.log
├── catalina.2014-06-12.log
├── catalina.out
├── localhost.2014-06-11.log
├── localhost.2014-06-12.log
├── localhost_access_log.2014-06-11.txt
└── localhost_access_log.2014-06-12.txt
</code></pre></div>]]></content>
</article>



<article>
<title><![CDATA[Ubuntu Server 13.04 Setting Log]]></title>
<url><![CDATA[/Server/Ubuntu%20Server%2013.04%20Setting%20Log.html]]></url>
<content><![CDATA[<h1 id="ssh">ssh</h1>

<p>vmware 에서 test 구동시에 iterm 으로 ssh 접속해서 사용하는 것이 더 편함. 기본 ssh 접속이 안될때</p>

<ul>
<li><code>sudo apt-get install openssh-server</code></li>
<li><code>sudo nano /etc/ssh/ssh_config</code> 로 port 열어줌</li>
<li><code>/etc/init.d/ssh restart</code></li>
</ul>

<h1 id="apt-commands">apt commands</h1>

<ul>
<li><code>apt-cache search {keyword}</code> 패키지 찾기</li>
<li><code>apt-get install {package name}</code> 패키지 설치</li>
<li><code>apt-get remove {package name}</code>

<ul>
<li><code>apt-get --purge remove {package name}</code> 설정 파일들까지 모두 삭제시</li>
</ul></li>
<li><code>apt-get reinstall {package name}</code></li>
<li>apt-get install 로 받은 deb file 의 위치 <code>/var/cache/apt/archive</code></li>
<li><code>apt-get clean</code> 위의 cache 들 비우기</li>
<li><code>apt-cache show {package name}</code></li>
<li><code>apt-get update</code> 소스 리스트 업데이트</li>
<li><code>apt-get upgrade</code> 설치된 패키지들 업그레이드</li>
<li><code>apt-get -s dist-upgrade</code> 의존성 검사 수행하면서 업그레이드</li>
<li><code>dpkg -l</code> 설치된 deb 패키지들 리스트 보기</li>
</ul>

<h1 id="language-setting">language setting</h1>

<ul>
<li><code>sudo locale-gen ko_KR.UTF-8</code></li>
<li><code>sudo nano /etc/default/locale</code> 파일 에서 <code>LANG=&quot;ko_KR.UTF-8&quot;</code> 로 수정</li>
</ul>

<h1 id="install-zsh">install zsh</h1>

<ul>
<li><code>sudo apt-get install zsh</code> zsh 설치</li>
<li><code>sudo apt-get install curl</code> curl 설치 필요</li>
<li><code>sudo apt-get install git</code> git 설치 필요</li>
<li><code>sudo curl -L https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh | sudo sh</code></li>
<li><code>sudo chsh -s /bin/zsh</code></li>
<li><code>cat /etc/passwd</code></li>
<li><code>sudo su</code> </li>
<li><code>chsh -s /bin/zsh {cat /etc/passwd 로 찾아낸 계정 아이디}</code></li>
</ul>

<h1 id="install-bittorrent-sync">install bittorrent sync</h1>

<ul>
<li><code>uname -m</code> 으로 cpu type 알아내기</li>
<li><a href="http://labs.bittorrent.com/experiments/sync.html">http://labs.bittorrent.com/experiments/sync.html</a> 에서 linux 패키지들 확인</li>
<li><code>wget http://btsync.s3-website-us-east-1.amazonaws.com/btsync_x64.tar.gz</code></li>
<li><code>tar xzpf btsync_x64.tar.gz</code></li>
<li><code>./btsync --dump-sample-config &gt; btsync.conf</code> sync config 를 새로 만듬. password 설정 등 해줌</li>
<li><code>nano btsync.conf</code> 에서 home folder 위치와 id, password 등을 설정</li>
<li><code>./btsync --config btsync.conf</code> BitTorrent Sync forked to background. 라는 메세지 나옴</li>
<li><code>ifconfig</code> 로 확인 뒤에 <code>ip:8888/gui</code> 로 접속</li>
</ul>

<p>오류가 많다. 사용하지 않는 것이 좋다.</p>

<h1 id="install-dropbox">install Dropbox</h1>

<p>실제 사용하는 계정이 아니라, 서버로 사용할 별도의 계정을 하나 만들고,<br>
디렉토리를 공유하는 방식으로 사용하는 것이 좋다.<br>
<strong>공유하지 않을 디렉토리를 비활성 시키는 기능이 상당히 불편하기 때문인데</strong><br>
공유하는 방식으로 사용하면 서버측에 어떤 디렉토리를 포함시킬지에 대해 Dropbox 웹사이트에서 컨트롤이 가능해진다.</p>

<h3 id="dropbox-설치하기">dropbox 설치하기</h3>

<ul>
<li><code>cd ~</code></li>
<li><a href="https://www.dropbox.com/install?os=lnx">https://www.dropbox.com/install?os=lnx</a> 에서 OS에 맞는 명령어로 설치</li>
<li><code>.dropbox-dist/dropboxd</code> 를 실행시켜서 안내에 따라 계정을 활성화 시킨 후에 <code>Ctrl + C</code> 로 빠져나옴</li>
</ul>

<h3 id="dropbox를-system-startup때-실행시키기">dropbox를 system startup때 실행시키기</h3>

<ul>
<li><a href="http://www.dropboxwiki.com/tips-and-tricks/install-dropbox-in-an-entirely-text-based-linux-environment">Install Dropbox In An Entirely Text-Based Linux Environment</a>에서 OS에 맞는 스크립트 찾아서 따라하기</li>
<li>Ubuntu 설치를 요약...

<ul>
<li><code>sudo nano /etc/init.d/dropbox</code> 로 편집시작</li>
<li>링크에 적혀 있는 Ubuntu 관련 스크립트를 붙여넣은 뒤에, User 항목에 자신의 Ubuntu 계정 아이디를 적어줌</li>
<li><code>sudo chmod +x /etc/init.d/dropbox</code></li>
<li><code>sudo update-rc.d dropbox defaults</code></li>
<li><code>sudo service dropbox start</code></li>
</ul></li>
</ul>

<p>daemon 등록 이후에 아래 명령어들 사용 가능</p>

<ul>
<li><code>sudo service dropbox start</code></li>
<li><code>sudo service dropbox stop</code></li>
</ul>

<h3 id="dropbox-cli-script">dropbox cli script</h3>

<ul>
<li><a href="https://www.dropbox.com/install?os=lnx">https://www.dropbox.com/install?os=lnx</a> 에서 python script 링크 확인 (아래 주소 변경 가능성 있으니...)</li>
<li><code>wget -O dropbox.py &quot;https://www.dropbox.com/download?dl=packages/dropbox.py&quot;</code> </li>
<li><code>chmod 755 dropbox.py</code></li>
</ul>

<p>위의 스크립트들을 사용해서 아래 명령어들 사용 가능</p>

<ul>
<li><code>dropbox.py status</code> 상태 확인</li>
<li><code>cd ~/Dropbox</code> 이후 <code>~/dropbox.py exclude add Images</code> 싱크에서 제외할 폴더들 추가 (왠만하면 공유 디렉토리 기능을 사용하고 이 기능은 쓰지 마라...)</li>
</ul>

<h1 id="node.js-설치">Node.js 설치</h1>

<ul>
<li><code>sudo apt-get update</code></li>
<li><code>sudo apt-get install python-software-properties python g++ make</code></li>
<li><code>sudo add-apt-repository ppa:chris-lea/node.js</code>

<ul>
<li>작동이 안될 경우 <code>sudo apt-get install software-properties-common</code></li>
</ul></li>
<li><code>sudo apt-get update</code></li>
<li><code>sudo apt-get install nodejs</code></li>
<li><code>node --version</code></li>
<li><code>sudo nano ~/.zshrc</code> PATH 에 <code>:/usr/local/share/npm/bin</code> 추가 시켜줌</li>
<li><code>sudo npm install -g coffee-script</code></li>
<li><code>sudo npm install -g mocha</code></li>
</ul>

<h1 id="install-redis">install Redis</h1>

<ul>
<li><code>sudo apt-get install redis-server</code></li>
<li><code>sudo apt-cache showpkg redis-server</code></li>
<li><code>sudo cp /etc/redis/redis.conf ~/redis.conf</code> redis config file copy</li>
<li><code>sudo redis-server ~/redis.conf</code> 우선 conf file 에서 demonize option 이 yes 로 되어 있는지 확인</li>
</ul>

<h1 id="get-website-application-from-git-and-install,-run">get website application from git and install, run</h1>

<ul>
<li><code>git clone http://...git</code> ssen.name 을 git 으로 가져온다</li>
<li><code>screen</code> 지속적인 실행을 위해 screen mode 로 진입

<ul>
<li>screen 이 없을 경우 <code>sudo apt-get install screen</code></li>
</ul></li>
<li><code>sudo npm install --production</code> production mode 로 module 들을 install</li>
<li><code>sudo -E node server.js</code> process.env 를 읽기 위해 <code>-E</code> 를 붙여서 실행</li>
</ul>

<h1 id="screen-commands">screen commands</h1>

<ul>
<li><code>$ screen -list</code> 스크린 리스트 보기</li>
<li><code>$ screen -r 16546.pts-1.ssenbuntu</code> 스크린 재접속</li>
<li><code>$ screen -d</code> or <code>ctrl + d</code> or <code>ctrl + a, d</code> 스크린 나오기</li>
<li><code>ctrl + a, w</code> 윈도우 리스트 보기</li>
<li><code>ctrl + a, &quot;</code> 윈도우 선택</li>
<li><code>ctrl + a, c</code> 새 윈도우 만들기</li>
<li><code>ctrl + a, a</code> 바로 전 윈도우로 이동</li>
<li><code>ctrl + a, 숫자</code> 해당 윈도우로 이동</li>
<li><code>exit</code> 윈도우 닫기</li>
</ul>

<h1 id="nginx-install">nginx install</h1>

<ul>
<li><code>sudo add-apt-repository ppa:nginx/stable</code></li>
<li><code>sudo apt-get update</code></li>
<li><code>sudo apt-get install nginx</code></li>
</ul>

<p>만일 문제가 발생할 경우</p>

<ul>
<li><code>echo &quot;deb http://ppa.launchpad.net/nginx/stable/ubuntu lucid main&quot; &gt; /etc/apt/sources.list.d/nginx-$nginx-lucid.list</code></li>
<li><code>sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys C300EE8C</code></li>
<li><code>sudo apt-get update</code></li>
<li><code>sudo apt-get install nginx</code></li>
</ul>

<p>서비스의 실행, 정지 등은</p>

<ul>
<li><code>service nginx start</code></li>
<li><code>service nginx restart</code></li>
<li><code>service nginx stop</code></li>
</ul>
]]></content>
</article>



<article>
<title><![CDATA[Webstorm Settings]]></title>
<url><![CDATA[/Web/Webstorm/Webstorm%20Settings.html]]></url>
<content><![CDATA[<h1 id="open-&quot;iterm2&quot;">Open &quot;iterm2&quot;</h1>

<p>iterm2 open script save to <code>~/somedirectory/oepn.iterm.scpt</code></p>
<div class="highlight"><pre><code class="language-text" data-lang="text">on run argv
    set cdTo to item 1 of argv
    tell application &quot;iTerm&quot;
        activate
        make new terminal
        tell the first terminal
            try
                launch session &quot;Default Session&quot;
            on error
                display dialog &quot;There was an error creating a new tab in iTerm.&quot; buttons {&quot;OK&quot;}
            end try
            tell the last session
                try
                    write text &quot;cd &quot; &amp; cdTo
                on error
                    display dialog &quot;There was an error cding to the requested path.&quot; buttons {&quot;OK&quot;}
                end try
            end tell
        end tell
    end tell
    return
end run
</code></pre></div>
<p>Settings &gt; External Tools</p>

<ul>
<li>Open Project Root Directory

<ul>
<li>Options 

<ul>
<li>uncheck all</li>
</ul></li>
<li>Tool settings

<ul>
<li>program <code>/usr/bin/osascript</code></li>
<li>parameters <code>~/somedirectory/open.iterm.scpt &#39;$ProjectFileDir$&#39;</code></li>
</ul></li>
</ul></li>
<li>Open Parent Directory of Edit File

<ul>
<li>Options

<ul>
<li>uncheck all</li>
</ul></li>
<li>Tool settings

<ul>
<li>program <code>/usr/bin/osascript</code></li>
<li>parameters <code>~/somedirectory/open.iterm.scpt &#39;$FileDir$&#39;</code></li>
</ul></li>
</ul></li>
</ul>

<h2 id="open-dkw-on-windows">Open <a href="http://dev.naver.com/projects/dkw">dkw</a> on Windows</h2>

<ul>
<li>Open Project Root Directory

<ul>
<li>Options

<ul>
<li>uncheck all</li>
</ul></li>
<li>Tool settings

<ul>
<li>program <code>C:\Program Files\dkw\dkw.exe</code></li>
<li>parameters <code>&quot;chdir=$ProjectFileDir$&quot;</code></li>
</ul></li>
</ul></li>
<li>Open Parent Directory of Edit File

<ul>
<li>Options

<ul>
<li>uncheck all</li>
</ul></li>
<li>Tool settings

<ul>
<li>program <code>C:\Program Files\dkw\dkw.exe</code></li>
<li>parameters <code>&quot;chdir=$FileDir$&quot;</code></li>
</ul></li>
</ul></li>
</ul>
]]></content>
</article>



<article>
<title><![CDATA[apt-get 명령어]]></title>
<url><![CDATA[/Server/Ubuntu%20Server/apt-get%20%E1%84%86%E1%85%A7%E1%86%BC%E1%84%85%E1%85%A7%E1%86%BC%E1%84%8B%E1%85%A5.html]]></url>
<content><![CDATA[<h1 id="update">update</h1>

<ul>
<li><code>apt-get update</code> 소스 리스트 업데이트 (apt 작업 시작 전에 항상 업데이트 해주는게 좋다)</li>
</ul>

<h1 id="upgrade">upgrade</h1>

<ul>
<li><code>apt-get upgrade</code> 설치된 패키지들 업그레이드</li>
<li><code>apt-get -s dist-upgrade</code> 의존성 검사 수행하면서 업그레이드</li>
</ul>

<h1 id="search-and-install">search and install</h1>

<ul>
<li><code>apt-cache search {keyword}</code> 패키지 찾기</li>
<li><code>apt-get install {package name}</code> 패키지 설치</li>
<li><code>apt-get remove {package name}</code>

<ul>
<li>설정 파일들까지 모두 삭제 하려 할때는 <code>apt-get --purge remove {package name}</code></li>
</ul></li>
<li><code>apt-get reinstall {package name}</code> 재설치</li>
<li><code>/var/cache/apt/archive</code> apt-get install 로 받은 deb file 의 위치 </li>
<li><code>apt-get clean</code> 위의 cache 들 비우기</li>
<li><code>apt-cache show {package name}</code></li>
<li><code>dpkg -l</code> 설치된 deb 패키지들 리스트 보기</li>
</ul>
]]></content>
</article>





<article>
<title><![CDATA[asdoc]]></title>
<url><![CDATA[/Flash/Environments/asdoc.html]]></url>
<content><![CDATA[<h1 id="asdoc-컴파일러"><code>asdoc</code> 컴파일러</h1>

<ul>
<li><a href="http://help.adobe.com/en_US/flex/using/WSd0ded3821e0d52fe1e63e3d11c2f44bc36-7ffa.html">Using the ASDoc tool</a></li>
</ul>

<h2 id="기본">기본</h2>

<ul>
<li><code>asdoc</code></li>
<li><code>-source-path /project/src</code> 문서에 포함할 소스 디렉토리 경로 지정</li>
<li><code>-examples-path /examples/src</code> @includeExample 로 포함시킬 소스들의 디렉토리 지정</li>
<li><code>-doc-sources /project/src/doc/sources</code> 문서화 시킬 소스들 지정 (소스 디렉토리의 일부분만 문서화 시키고 싶을때)</li>
<li><code>-library-path /project/libs</code> 소스가 의존하는 swc 라이브러리들의 디렉토리 경로 지정 <strong>(중요 : 에러의 주요 원인이 된다)</strong></li>
<li><code>-window-title &quot;SSen MVC Framework ASDoc&quot;</code> 문서 제목</li>
<li><code>-main-title &quot;SSen MVC Framework ASDoc&quot;</code> 문서 제목</li>
<li><code>-output /output/asdoc</code> 문서들을 출력시킬 디렉토리 지정 </li>
</ul>

<h2 id="특수한-작동을-하는-parameter-들">특수한 작동을 하는 Parameter 들</h2>

<ul>
<li><code>-keep-xml=false|true</code> true 일 경우 .xml 파일을 삭제하지 않고 남긴다</li>
<li><code>-skip-xsl=false|true</code> false 일 경우 .html 파일들을 만들지 않는다</li>
</ul>

<h1 id="actionscript-asdoc-주석-작업">Actionscript ASDoc 주석 작업</h1>

<ul>
<li><a href="http://help.adobe.com/en_US/flex/using/WSd0ded3821e0d52fe1e63e3d11c2f44bc36-7ff6.html">ASDoc Tags</a></li>
<li><a href="http://help.adobe.com/en_US/flex/using/WSd0ded3821e0d52fe1e63e3d11c2f44bc36-7ff8.html">Using ASDoc @see Tags</a></li>
</ul>

<h2 id="기본-주석">기본 주석</h2>

<ul>
<li><code>@private</code> 문서 상에 요소가 나타나지 않게 한다.</li>
<li><code>@inheritDoc</code> 상속 관계에 있는 class 나 구현 관계에 있는 interface 의 주석을 사용하도록 지정한다</li>
<li><code>@see ${reference}</code> 해당 요소에 대한 참조를 추가한다.</li>
<li><code>@includeExample ${file}</code> 예제 코드를 추가한다. (includeExample 로 불러오는 file 은 utf-8 이면 한글이 깨진다. euc-kr 로 해야한다???)</li>
<li><code>@param ${parameter name} ${description}</code> method 의 parameter 를 설명한다.</li>
<li><code>@throws ${package.errors.ErrorClass} ${description}</code> 실행시 발생 가능한 Error 를 설명한다.</li>
<li><code>@return ${description}</code> method 의 return value 를 설명한다.</li>
</ul>

<h2 id="@see-tag-사용-방식"><code>@see</code> Tag 사용 방식</h2>

<ul>
<li>resource selector 

<ul>
<li><code>@see http://ssen.name ${description}</code> website</li>
<li><code>@see example.html ${description}</code> local file</li>
</ul></li>
<li>api selector

<ul>
<li>class and class members

<ul>
<li><code>@see #variable ${description}</code></li>
<li><code>@see #method() ${description}</code></li>
<li><code>@see #event:change ${description}</code></li>
<li><code>@see #style:paddingLeft ${description}</code></li>
<li><code>@see #effect:creationCompleteEffect ${description}</code></li>
<li><code>@see Class#variable ${description}</code></li>
<li><code>@see Class#method() ${description}</code></li>
<li><code>@see Class#event:change ${description}</code></li>
<li><code>@see Class#style:paddingLeft ${description}</code></li>
<li><code>@see Class#effect:creationCompleteEffect ${description}</code></li>
<li><code>@see fl.test.Class#variable ${description}</code></li>
<li><code>@see fl.test.Class#method() ${description}</code></li>
<li><code>@see fl.test.Class#event:change ${description}</code></li>
<li><code>@see fl.test.Class#style:paddingLeft ${description}</code></li>
<li><code>@see fl.test.Class#effect:creationCompleteEffect ${description}</code></li>
</ul></li>
<li>package members

<ul>
<li><code>@see fl.test.#variable ${description}</code></li>
<li><code>@see fl.test.#metod() ${description}</code></li>
</ul></li>
</ul></li>
</ul>
]]></content>
</article>



<article>
<title><![CDATA[basic commands]]></title>
<url><![CDATA[/Shell/basic%20commands.html]]></url>
<content><![CDATA[<h1 id="globbing">globbing</h1>

<ul>
<li><a href="http://tldp.org/LDP/abs/html/globbingref.html">http://tldp.org/LDP/abs/html/globbingref.html</a></li>
<li><a href="http://www.linuxjournal.com/content/bash-extended-globbing">http://www.linuxjournal.com/content/bash-extended-globbing</a></li>
<li><code>*.jpg</code> all jpg</li>
<li><code>AIR?.jpg</code> ? is some 1 character</li>
<li><code>src/**/*.as</code> 하위 모든 디렉토리</li>
<li><code>{a,b,c}</code> a and b and c</li>
<li><code>file{1..5}</code> file1 ~ file5</li>
</ul>

<h1 id="cp-:-copy-file-or-directory"><a href="http://ko.wikipedia.org/wiki/Cp_(%EC%9C%A0%EB%8B%89%EC%8A%A4)">cp</a> : copy file or directory</h1>

<ul>
<li><code>cp source_file target_file</code>

<ul>
<li><code>cp source.jpg target.jpg</code></li>
</ul></li>
<li><code>cp source_file ... target_directory</code>

<ul>
<li><code>cp source.jpg target</code></li>
<li><code>cp dir/**/source*.jpg target</code></li>
<li><code>cp dir/{sourceA,sourceB}.jpg target</code></li>
<li><code>cp dir/source[1234] target</code></li>
<li><code>cp dir/source{1..4} target</code></li>
</ul></li>
<li><code>cp -r source_directory ... target_directory</code>

<ul>
<li><code>cp -r source target</code></li>
<li><code>cp -r source/*kit target</code></li>
</ul></li>
</ul>

<h1 id="cpio">cpio</h1>

<ul>
<li><code>cd src &amp;&amp; find . -type f -iname &#39;*.js&#39; | cpio -pdm ../lib</code> src 디렉토리 내의 모든 js 파일들을 찾아서 lib 디렉토리 내부로 디렉토리 구조까지 합해서 복사한다</li>
</ul>

<h1 id="mv-:-move,-rename-file-or-directory"><a href="http://ko.wikipedia.org/wiki/Mv">mv</a> : move, rename file or directory</h1>

<ul>
<li><code>mv source target</code>

<ul>
<li><code>mv source.jpg raname.jpg</code> rename</li>
<li><code>mv source.jpg target/moved.jpg</code> move</li>
<li><code>mv source/*.jpg target</code> move multiple</li>
</ul></li>
</ul>

<h1 id="rm,-rmdir-:-remove-file-or-directory"><a href="http://ko.wikipedia.org/wiki/Rm_(%EC%9C%A0%EB%8B%89%EC%8A%A4)">rm</a>, rmdir : remove file or directory</h1>

<ul>
<li><code>rm target</code>

<ul>
<li><code>rm target.jpg</code> remove single file</li>
<li><code>rm target/**/*.jpg</code> remove multiple files</li>
<li><code>rm -r target/**/*kit</code> remove multiple directory</li>
</ul></li>
<li><code>rmdir target</code> <code>rm -r</code> 과 유사하지만 디렉토리 내의 파일들은 삭제되지 않는다.</li>
</ul>

<h1 id="mkdir-:-make-directory">mkdir : make directory</h1>

<ul>
<li><code>mkdir name</code>

<ul>
<li><code>mkdir dir</code></li>
<li><code>mkdir -p a/b/c/d</code> 필요한 상위 디렉토리들까지 한꺼번에 만든다 </li>
</ul></li>
</ul>
]]></content>
</article>





<article>
<title><![CDATA[curl]]></title>
<url><![CDATA[/Shell/curl.html]]></url>
<content><![CDATA[<h1 id="curl">curl</h1>

<ul>
<li><code>curl http://example.com/index.html &gt; save.html</code> 출력을 저장</li>
<li><code>curl http://example.com/sample.jpg -o save.jpg</code> 파일 다운로드</li>
<li><code>curl http://example.com/sample[1-5].jpg -o save#1.jpg</code> 여러 파일 다운로드</li>
<li><code>curl http://example.com/{a,b,c}.jpg -o #1.jpg</code> 여러 파일 다운로드</li>
<li><code>curl ftp://example.com/sample.jpg -u user:password -o save.jpg</code> ftp 다운로드</li>
</ul>
]]></content>
</article>



<article>
<title><![CDATA[express]]></title>
<url><![CDATA[/Web/Node.js/express.html]]></url>
<content><![CDATA[<h1 id="여러-function들을-차례로">여러 function들을 차례로</h1>
<div class="highlight"><pre><code class="language-text" data-lang="text">express = require(&#39;express&#39;)

func1 = (req, res, next) -&gt;
    console.log(&#39;function1&#39;)
    next()

func2 = (req, res, next) -&gt;
    console.log(&#39;function2&#39;)
    next()

func3 = (req, res, next) -&gt;
    console.log(&#39;function3&#39;)
    res.send(&#39;hello world&#39;)

app = express()
app.get(&#39;/aaa&#39;, func1, func2, func3)

app.listen(9901)
</code></pre></div>
<p><code>app.get()</code>에는 여러 <code>function(req, res, next)</code>들을 차례로 이어붙일 수 있다. 실제 마지막 서비스가 이루어지기 이전에 보안 등의 처리가 가능하다.</p>
]]></content>
</article>





<article>
<title><![CDATA[fish]]></title>
<url><![CDATA[/Shell/fish.html]]></url>
<content><![CDATA[<h1 id="fish-:-friendly-interactive-shell"><a href="http://fishshell.com">fish</a> : Friendly Interactive Shell</h1>

<ol>
<li>man page나 log 등을 활용해서 <strong>꽤 강력한 수준의 자동완성 기능을 지원</strong> 해준다.</li>
<li>기존 Shell 들에 비해서, 공식 웹사이트(<a href="http://fishshell.com">http://fishshell.com</a>)에 <a href="http://fishshell.com/docs/current/tutorial.html">fish tutorial</a>과 같은 문서를 제공하는 등 가이드가 탄탄하다.</li>
<li><a href="zsh.md">zsh</a>의 장점이던, <a href="https://github.com/robbyrussell/oh-my-zsh">oh-my-zsh</a>와 같은 <a href="https://github.com/bpinto/oh-my-fish">oh-my-fish</a>가 있다.</li>
</ol>

<h1 id="install">Install</h1>

<p>기본 설치 과정 및 <a href="https://github.com/bpinto/oh-my-fish">oh-my-fish</a> 설치까지 모두 진행한다</p>

<h3 id="mac-(brew)">Mac (brew)</h3>

<ul>
<li><code>brew install fish</code> 설치</li>
<li><code>chsh -s /usr/local/bin/fish</code> Shell 바꾸기</li>
<li><code>sudo su</code> root 진입</li>
<li><code>chsh -s /usr/local/bin/fish</code> root Shell 바꾸기</li>
<li><code>exit</code> root 에서 나가기</li>
<li><code>curl -L https://github.com/bpinto/oh-my-fish/raw/master/tools/install.sh | sh</code> <a href="https://github.com/bpinto/oh-my-fish">oh-my-fish</a> 설치</li>
</ul>

<h3 id="ubuntu-(apt-get)">Ubuntu (apt-get)</h3>

<ul>
<li><code>wget http://fishshell.com/files/2.1.0/linux/Ubuntu/fish_2.1.0-1~precise_amd64.deb</code> 다운로드</li>
<li><code>sudo dpkg -i fish_2.1.0-1~precise_amd64.deb</code> 설치</li>
<li><code>chsh -s /usr/local/bin/fish</code> Shell 바꾸기</li>
<li><code>sudo su</code> root 진입</li>
<li><code>chsh -s /usr/local/bin/fish</code> root Shell 바꾸기</li>
<li><code>exit</code> root 에서 나가기</li>
<li><code>curl -L https://github.com/bpinto/oh-my-fish/raw/master/tools/install.sh | sh</code> <a href="https://github.com/bpinto/oh-my-fish">oh-my-fish</a> 설치</li>
</ul>

<p>원래는 아래의 방식대로 해도 되지만, 뭔가 자동 설치 버전에서는 문제가 많이 생기더라. (<code>source</code> command가 없다던가 하는 뭐 그런...) 하도 이상하게 뭐가 안되길래 그냥 다운로드 받아서 설치해버렸음 <a href="http://hackercodex.com/guide/install-fish-shell-mac-ubuntu/">참조 자료</a></p>

<ul>
<li><code>sudo apt-get install fish</code> 설치</li>
<li><code>chsh -s /usr/local/bin/fish</code> Shell 바꾸기</li>
<li><code>sudo su</code> root 진입</li>
<li><code>chsh -s /usr/local/bin/fish</code> root Shell 바꾸기</li>
<li><code>exit</code> root 에서 나가기</li>
<li><code>curl -L https://github.com/bpinto/oh-my-fish/raw/master/tools/install.sh | sh</code> <a href="https://github.com/bpinto/oh-my-fish">oh-my-fish</a> 설치</li>
</ul>

<h3 id="centos-(yum)">CentOS (yum)</h3>

<p>기본적으로 yum에는 fish가 없기 때문에 reposotory를 추가해주고 나서 진행해야 한다. 설치 참고는 <a href="http://fishshell.com/files/2.1.0/linux/">http://fishshell.com/files/2.1.0/linux/</a> 에서 할 수 있다.</p>

<ul>
<li><code>yum search fish</code> fish.x86_64를 발견할 수 없다</li>
<li><code>sudo yum-config-manager --add-repo http://fishshell.com/files/linux/RedHat_RHEL-6/fish.release:2.repo</code> yum repository 추가</li>
<li><code>yum search fish</code> fish.x86_64가 추가된 것을 확인할 수 있다</li>
<li><code>sudo yum install fish</code> 설치</li>
<li><code>chsh -s /usr/local/bin/fish</code> Shell 바꾸기</li>
<li><code>sudo su</code> root 진입</li>
<li><code>chsh -s /usr/local/bin/fish</code> root Shell 바꾸기</li>
<li><code>exit</code> root 에서 나가기</li>
<li><code>curl -L https://github.com/bpinto/oh-my-fish/raw/master/tools/install.sh | sh</code> <a href="https://github.com/bpinto/oh-my-fish">oh-my-fish</a> 설치</li>
</ul>

<h1 id="config">Config</h1>

<p><a href="http://fishshell.com">fish</a>의 설정에서 중요한 항목들은 아래 두 가지 이다.</p>

<ul>
<li><code>~/.config/fish/config.fish</code></li>
<li><code>~/.oh-my-fish/</code></li>
</ul>

<p>bash와 큰 차이가 없던 <a href="zsh.md">zsh</a>와는 다르게 <a href="http://fishshell.com">fish</a>는 사소한 부분들에서 꽤 차이를 보이게 된다. (편리할 수도 편리하지 않을 수도 있다.)</p>

<h2 id="environment-variables">Environment Variables</h2>

<p>일단 가장 큰 문제는 기존 <code>export VAR = ...</code>과 같은 방식으로 선언하던 환경 변수 설정 부터가 다르다는 것...</p>

<p>기초적인 환경 변수들은 <code>~/.config/fish/config.fish</code>에서 선언 가능하며 선언 방식은 아래와 같다.</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">set -x FLEX_SDK /Users/ssen/Data/settings/Apache\ Flex\ SDK\ 4.9.0/bin
set -x PATH /usr/local/bin /usr/local/share/npm/bin $FLEX_SDK $PATH
set -x DROPBOX $HOME/Dropbox
</code></pre></div>
<p>선언 방식의 차이라면</p>

<ol>
<li><code>export</code> 대신 <code>set -x</code>를 사용</li>
<li><code>PATH</code>와 같은 다중 선언이 필요한 경우 <code>/usr/local/bin:$PATH</code>와 같은 식으로 :를 사용해서 연결하지 않고, <code>/usr/local/bin $PATH</code>와 같이 띄어쓰기를 통해서 선언하게 된다</li>
</ol>
]]></content>
</article>



<article>
<title><![CDATA[fswatch]]></title>
<url><![CDATA[/Shell/fswatch.html]]></url>
<content><![CDATA[<h1 id="fswatch"><a href="https://github.com/alandipert/fswatch">fswatch</a></h1>

<p><strong>Mac에서만 사용 가능한</strong> 작고 사용하기 간단한 File Watcher.</p>

<p>Mac OS의 FSEvents API를 사용하기 때문에 다른 OS에서는 안된다.</p>

<ul>
<li><code>fswatch $dir &quot;$command&quot;</code> $dir이 변경되면 문자열로 된 $command가 실행된다</li>
<li><code>fswatch $dir1:dir2 &quot;$command&quot;</code> $dir1 또는 $dir2이 변경되면 문자열로 된 $command가 실행된다</li>
</ul>

<h1 id="makefile과-함께-사용하기"><a href="../Shell/make.md">Makefile</a>과 함께 사용하기</h1>

<h3 id="src가-변경될-때-다시-시작하기"><code>src</code>가 변경될 때 다시 시작하기</h3>
<div class="highlight"><pre><code class="language-text" data-lang="text"># 최초 watcher를 시작한다
watch: build start
    fswatch src &quot;make reload&quot;
    @echo &quot;=========================== start watch&quot;

# 디렉토리 변경이 감지되면 실행될 task
reload: stop build start
    @echo &quot;---------------- reloaded&quot;

build:
    # build source

start:
    # server start

stop:
    # server stop
</code></pre></div>
<p>Coffeescript처럼 Compile이 필요한 언어와 Node.js처럼 실행이 필요한 서버가 맞물렸을 때 사용할만 하다.</p>

<p>src의 소스가 수정될 때 마다 서버를 정지시키고, 소스를 빌드하고, 다시 서버를 실행시키는 작업을 한다.</p>
]]></content>
</article>



<article>
<title><![CDATA[git-flow]]></title>
<url><![CDATA[/Web/VCS/git-flow.html]]></url>
<content><![CDATA[<h1 id="git을-어떻게-써나갈-것인가?-라는-문제...">Git을 어떻게 써나갈 것인가? 라는 문제...</h1>

<p>우선 아래 글들을 먼저 읽어보는 것이 좋다.</p>

<ul>
<li><a href="http://dogfeet.github.io/articles/2011/a-successful-git-branching-model.html">http://dogfeet.github.io/articles/2011/a-successful-git-branching-model.html</a></li>
<li><a href="http://dogfeet.github.io/articles/2011/git-flow.html">http://dogfeet.github.io/articles/2011/git-flow.html</a></li>
</ul>

<p>위 글에 자세히 나와있겠고, <code>git-flow</code>를 검색하면 언제나 나오는 글 이지만, <code>git-flow</code>의 배경을 대충 설명하자면</p>

<ol>
<li>Cvs던, Svn이던, Git이던 간에 일반적으로 Brach라는 기능에 대해서는 &quot;어떤 변화를 줄 때 타는 옆으로 뻗어나가기 (나무의 가지치기)&quot; 라는 의미로만 사용되어 왔고, 막상 큰 사용 빈도는 없는 편이었다. (실제로 막상 Branch 기능을 쓰는 사람들은 별로 없는 편이지... 쓰기도 애매하고...)</li>
<li><a href="http://nvie.com/posts/a-successful-git-branching-model/">A successful Git branching model</a>이라는 글에서 그 Brach 기능을 &quot;작업 흐름&quot;으로서 사용할 수 있는 어떤 방법론을 제시했다는 것.</li>
<li>글과 동시에 <code>git-flow</code>라는 그 방법론을 좀 더 수월하게 따를 수 있는 도구 역시 만들어서 배포되어져서 지금까지 사용되어 지고 있더라... 뭐 이런 이야기.</li>
</ol>

<h1 id="git-flow-사용-이전에-필요한-것들"><code>git-flow</code> 사용 이전에 필요한 것들</h1>

<h2 id="branch-라는-기능이-주는-심리적-부담감-떨치기">Branch 라는 기능이 주는 심리적 부담감 떨치기</h2>

<p>일반적으로 Branch라는 기능 자체가 주는 부담감이 있는 편이다. 심리적이랄까? &quot;Branch에는 뭔가 특별한 의미가 있어야 하지 않는가?&quot; 라는 그런 부담감 말이다.</p>

<p><code>git-flow</code>에서는 그런 Branch를 단순히 작업 흐름의 한 부분으로 사용하기 때문에 &quot;막 만들고, 막 없애고, 막 합치는&quot; 그런 흐름을 가지게 된다. 그냥 흐름에 맞게 막 만들어낼 수 있도록 Branch에 대한 부담감을 떨치는게 가장 우선이다.</p>

<p>컴퓨터 안에 데이터를 만드는 것 뿐이다. 돈 드는 것도 아니니 막 만든다고 지구가 멸망하진 않는다.</p>

<h2 id="branch-간-전환에-대한-부담감-떨치기">Branch 간 전환에 대한 부담감 떨치기</h2>

<p><code>git-flow</code>가 작업 흐름을 Branch를 통해 관리한다는 것은... 결국 빈번한 Branch간 이동을 발생시키게 된다.</p>

<p>즉, feature에서 새로운 기능에 대한 작업을 하다가 어느 순간, hotfix를 해야할 일이 생긴다는 것.</p>

<p>그럼 feature에서 작업하던 내용을 commit 한 다음, master로 Branch 변경을 하고, hotfix 하나를 새로 만들어내면 된다.</p>

<p>간단한 일이지만 Branch 간 전환 역시 심리적으로 익숙하지 않은 일일수 있고,</p>

<p>새로운 Branch를 만들어내는데 부담감을 느끼거나 Branch간 전환이 뭔가 큰 일인양 취급하다. 전환을 하지 않는다면, 각기 <strong>하나의 새 기능을 만들어야 하는 feature에 hotfix성향의 bug fix가 들어가버린다거나, master로 보내기 이전에 테스트를 해보려 만드는 release에 feature성의 일이 섞여버리는 등... 작업흐름이 개족보가 되어버리는 상황이 발생해버릴 수 있다.</strong></p>

<p>역시 Branch를 졸라 많이 만들고, 그 Branch들간의 전환을 미친듯이 한다고 해도 지구가 멸망하지 않는다.</p>

<h2 id="conflict-merge에-대해-익숙해지기">Conflict Merge에 대해 익숙해지기</h2>

<p>사실 이건 Git과 같은 DVCS를 사용하기 위한 조건이다. Conflict Merge 처리에 익숙하지 않다면 Git을 사용하는 것은 상당히 고통스러운 일이 된다.</p>

<p>DVCS라는 이름 그대로 분산 저장소 라는 개념에 의한 작업은 개발자 A와 B의 작업물이 어디선가에서는 필연적으로 달라지는 결과를 만들어내게 된다. 결국 그 달라짐은 충돌을 만들어내게 되고... </p>

<p>Svn과 같은 기존의 중앙 저장소 방식에 비해 &quot;Commit해 주세요!&quot; 라고 소리지를 일이 없어지긴 하지만, 대신 충돌 발생율은 더 커지기 마련.</p>

<p>Diff툴은 통해서 충돌 부분을 확인하고 Merge하는 일은 Git과 같은 DVCS에서는 상당히 일상적인 일이 되기 마련이고, 특히나 Branch를 마구 만들어내고, 다시 마구 Merge하게 되는 <code>git-flow</code>에서는 더더욱 자주 있는 일이 될 수 밖에 없다.</p>

<p>사실 이 역시 심리적 부담감을 떨치는 일에 가깝다. Diff, Merge 툴은 생각보다 쓰기 굉장히 쉬운 편이고... (특히 유료일수록...) 약간의 훈련을 해본다면 금방 익숙해질 수 있는 문제이니깐...</p>

<blockquote>
<p>거꾸로 이야기 하자면 Conflict Merge 하는 것에 어려움을 느끼는 동료가 있는 팀 이라면 <code>git-flow</code>는 둘 째 치고, Git이나 Mercurial 같은 DVCS는 쓰기 어렵다는 말이된다. (내가 운이 더럽게 없는건지 실무에서 단 한번도 Git을 써본 적이 없다.)</p>
</blockquote>

<h1 id="git-flow의-구성"><code>git-flow</code>의 구성</h1>
]]></content>
</article>



<article>
<title><![CDATA[grep]]></title>
<url><![CDATA[/Shell/grep.html]]></url>
<content><![CDATA[<h1 id="grep-:-globally-find-regular-expression-and-print">grep : Globally find Regular Expression and Print</h1>

<p>검색 할 때 쓴다. 상당히 광범위하게 사용될 수 있는 만큼 옵션도 징그럽게 많다...</p>

<p>정규식(Regular Expression)에 근거하고 있기 때문에 정규식을 어느 정도 알고 있으면 깜샷 날릴 수 있는 여지가 어느정도 있다.</p>

<h1 id="기본-구성">기본 구성</h1>
<div class="highlight"><pre><code class="language-text" data-lang="text">grep [&lt;option&gt;] &lt;검색어&gt; &lt;대상파일&gt;
</code></pre></div>
<p>옵션은 아래와 같다</p>

<ul>
<li><code>-i</code> 대소문자를 구분하지 않는다</li>
<li><code>-v</code> 패턴에 검색되지 않는 행만 출력한다 (즉, 검색되는 것 빼고 출력)</li>
<li><code>-n</code> 라인 넘버를 보여준다</li>
<li><code>-l</code> 패턴에 검색되는 파일명만 출력한다 (여러 파일을 검색 할 때 검색되는 파일만 표시하고 싶을 때 사용)</li>
<li><code>-c</code> 패턴과 일치하는 라인의 갯수만 출력한다</li>
<li><code>-r</code> 하위 디렉토리 까지 검색한다</li>
</ul>

<h1 id="문자열-출력-스크립트와-함께-사용하기">문자열 출력 스크립트와 함께 사용하기</h1>
<div class="highlight"><pre><code class="language-text" data-lang="text"># test.coffee
console.log(&#39;hello world&#39;)
console.log(&#39;hello ssen&#39;)
console.log(&#39;wow world&#39;)
</code></pre></div>
<p>위와 같은 Coffeescript 가 있을 때, 이를 grep과 같이 사용할 수 있다</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">$ coffee test.coffee
hello world
hello ssen
wow world

$ coffee test.coffee | grep &#39;^hello&#39;
hello world
hello ssen
</code></pre></div>
<p>추가적으로 옵션들을 붙여서 써보자면</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">$ coffee test.coffee | grep &#39;^hello&#39;
hello world
hello ssen
$ coffee test.coffee | grep -v &#39;^hello&#39;
wow world
$ coffee test.coffee | grep -v &#39;^hellO&#39;
hello world
hello ssen
wow world
$ coffee test.coffee | grep -i &#39;^hellO&#39;
hello world
hello ssen
$ coffee test.coffee | grep &#39;^hellO&#39;
$ coffee test.coffee | grep -i &#39;^hellO&#39;
hello world
hello ssen
$ coffee test.coffee | grep -n &#39;^hellO&#39;
$ coffee test.coffee | grep -n &#39;^hello&#39;
1:hello world
2:hello ssen
$ coffee test.coffee | grep -nv &#39;^hello&#39;
3:wow world
$ coffee test.coffee | grep -l &#39;^hello&#39;
(standard input)

events.js:72
        throw er; // Unhandled &#39;error&#39; event
              ^
Error: write EPIPE
  at errnoException (net.js:901:11)
  at Object.afterWrite (net.js:718:19)

$ coffee test.coffee | grep -c &#39;^hello&#39;
2
$ coffee test.coffee | grep -s &#39;^hello&#39;
hello world
hello ssen
</code></pre></div>
<p>파일명을 출력하는 <code>-l</code> 옵션을 빼고는 대부분 정상적으로 작동한다.</p>
]]></content>
</article>



<article>
<title><![CDATA[htpasswd]]></title>
<url><![CDATA[/Shell/htpasswd.html]]></url>
<content><![CDATA[<h1 id="install">Install</h1>

<p>NginX나 Apache등 여러 어플리케이션에서 사용하는 간단한 인증 시스템. 설치나 사용법 등이 상당히 간단하다.</p>

<h3 id="cent-os">Cent OS</h3>
<div class="highlight"><pre><code class="language-text" data-lang="text">sudo yum install httpd-tools
</code></pre></div>
<h3 id="ubuntu">Ubuntu</h3>
<div class="highlight"><pre><code class="language-text" data-lang="text">sudo aptitude install apache2-utils
</code></pre></div>
<h1 id="use">Use</h1>

<ul>
<li><code>sudo htpasswd -c .htpasswd user</code> 새로운 <code>.htpasswd</code> 파일을 만들면서 <code>user</code>라는 새로운 유저를 추가한다</li>
<li><code>sudo htpasswd .htpasswd user2</code> 기존 <code>.htpasswd</code> 파일에 <code>user1</code>라는 새로운 유저를 추가한다 (이미 있는 유저면 password를 수정한다)</li>
<li><code>sudo htpasswd -D .htpasswd user</code> 기존 <code>.htpasswd</code> 파일에서 <code>user</code>라는 유저를 삭제한다</li>
</ul>

<p>별달리 큰 사용법은 없다. 단순하다.</p>

<h1 id="참고한-자료들">참고한 자료들</h1>

<ul>
<li><a href="http://httpd.apache.org/docs/2.2/programs/htpasswd.html">http://httpd.apache.org/docs/2.2/programs/htpasswd.html</a></li>
</ul>
]]></content>
</article>



<article>
<title><![CDATA[iTerm에서 ssh 접속 시 한글이 안나올 때]]></title>
<url><![CDATA[/Web/Mac/iTerm%E1%84%8B%E1%85%A6%E1%84%89%E1%85%A5%20ssh%20%E1%84%8C%E1%85%A5%E1%86%B8%E1%84%89%E1%85%A9%E1%86%A8%20%E1%84%89%E1%85%B5%20%E1%84%92%E1%85%A1%E1%86%AB%E1%84%80%E1%85%B3%E1%86%AF%E1%84%8B%E1%85%B5%20%E1%84%8B%E1%85%A1%E1%86%AB%E1%84%82%E1%85%A1%E1%84%8B%E1%85%A9%E1%86%AF%20%E1%84%84%E1%85%A2.html]]></url>
<content><![CDATA[<h1 id="오류">오류</h1>

<p>Mac의 Shell에 접속한 상태에서 <code>ssh</code> 명령어를 통해서 Remote Server에 접속을 하면, 경우에 따라 한글이 죄다 깨져버리기도 한다.</p>

<p>아마도, Mac의 nfd 처리를 시작한 상태에서 ssh를 통해 nfc 캐릭터를 읽어들이다보니 발생하는 문제가 아닐까 싶긴 한데,</p>

<p>우회적으로 아예 Mac의 Shell 상태를 경유하지 않고, 초기부터 <code>ssh</code>로 접속을 시작하면 문제 해결이 된다.</p>

<h1 id="해결">해결</h1>

<ol>
<li>iTerm2의 <code>Preferences &gt; Profiles</code> 에서 새로운 Profile 생성</li>
<li>기존 Command 항목의 <code>Login shell</code> 대신 <code>Command</code> 를 선택 후에 ssh 접속 코드를 써줌

<ul>
<li><code>ssh user@server.com -p 57911</code></li>
</ul></li>
<li>iTerm2에서 새로 만든 Profile을 통해 접속하면 한글이 정상적으로 표시된다.</li>
</ol>
]]></content>
</article>



<article>
<title><![CDATA[include를 사용해서 NginX의 설정을 나누기]]></title>
<url><![CDATA[/Server/NginX/include%E1%84%85%E1%85%B3%E1%86%AF%20%E1%84%89%E1%85%A1%E1%84%8B%E1%85%AD%E1%86%BC%E1%84%92%E1%85%A2%E1%84%89%E1%85%A5%20NginX%E1%84%8B%E1%85%B4%20%E1%84%89%E1%85%A5%E1%86%AF%E1%84%8C%E1%85%A5%E1%86%BC%E1%84%8B%E1%85%B3%E1%86%AF%20%E1%84%82%E1%85%A1%E1%84%82%E1%85%AE%E1%84%80%E1%85%B5.html]]></url>
<content><![CDATA[<h1 id="include-방식">include 방식</h1>

<p>NginX의 대다수 설정은 <code>nginx.conf</code>에서 시작되어서 상세한 설정들이 include되어서 나뉘어지게 된다.</p>

<p><code>mime.types</code>나 <code>site-enabled/*</code>같은 것들을 보면 알기 쉽다. include는 </p>

<ol>
<li><code>include /dir/some.file</code>과 같이 단일 파일도 가져올 수 있고</li>
<li><code>include /dir/*</code>과 같이 어떤 디렉토리 내부의 모든 파일을 가져올 수도 있다.</li>
</ol>

<h1 id="os환경에-대한-설정과-site작동에-대한-설정을-나눠보기">OS환경에 대한 설정과 Site작동에 대한 설정을 나눠보기</h1>

<p>NginX 기본설정도 그렇고, 강의에서도 그렇고 기본적으로 안내되는 설정 방식은</p>

<ol>
<li><code>nginx.conf</code> 에서 <code>include site-enabled/*</code>로 불러주고</li>
<li><code>site-enabled/*</code>에 <code>server {}</code>로 되어 있는 Virtual Host 파일들을 만들기</li>
</ol>

<p>방식으로 Host를 관리하라고 한다...</p>

<p>하지만, 보통의 경우 <code>location</code> rule 관리는 소스 저장소에서 하는 것이 더 편하고, 이걸 <code>site-enabled/*</code>에서 선언하다가는 <strong>작업용 컴퓨터와 실제 서버에서 매 번 설정을 해줘야 하는 이중작업이 발생하게 된다.</strong></p>

<ul>
<li><code>/etc/nginx/site-enabled/</code> 

<ul>
<li><code>website</code> nginx virtual host 설정 파일 (OS에 대한 설정을 한다)</li>
</ul></li>
<li><code>/home/web/</code> git으로 가져온 web service 저장소

<ul>
<li><code>config/</code> 설정 파일들을 넣는 디렉토리 

<ul>
<li><code>locations</code> Location 설정 파일 (Service에 대한 location 설정을 한다)</li>
</ul></li>
</ul></li>
</ul>

<p>위와 같이 역할을 나눠놓으면 <code>location</code> 변경에 의한 작업을 위해 virtual host 설정 파일을 건드릴 필요는 없어지게 된다.</p>

<h3 id="/etc/nginx/site-enabled/website">/etc/nginx/site-enabled/website</h3>
<div class="highlight"><pre><code class="language-text" data-lang="text">server {
    set $HOMEDIR /home/web;
    set $DROPBOX /home/Dropbox;
    set $NODE_PORT 9642;

    listen 80;
    server_name localhost;

    include /home/web/config/locations;
}
</code></pre></div>
<p><code>set</code>을 통해 OS의 환경을 셋팅해 준 다음, <code>include</code>를 통해서 <code>locations</code>파일을 불러오도록 해준다.</p>

<h3 id="/home/web/config/locations">/home/web/config/locations</h3>
<div class="highlight"><pre><code class="language-text" data-lang="text">location ^~ /public {
    alias $HOMEDIR/public;
    autoindex off;
    expires max;
}

location ^~ /files {
    root $DROPBOX/Contents;
    autoindex off;
    expires max;
}

location ~ ^/(inbox|devlog|labs|career|todo)/(?!asset::)(.*)\.(jpg|jpeg|gif|png|ico|zip|tgz|gz|rar|bz2|pdf|tar|wav|bmp|rtf|flv|swf)$ {
    root $DROPBOX/Contents;
    autoindex off;
    expires max;
}

location / {
    proxy_redirect off;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header Host $http_host;
    proxy_set_header X-NginX-Proxy true;
    proxy_set_header Connection &quot;&quot;;
    proxy_http_version 1.1;

    proxy_pass http://127.0.0.1:$NODE_PORT;
}
</code></pre></div>
<p>깔끔하게 OS 환경에 관련된 부분들을 떼어내고 설정이 가능하다.</p>

<p>작업용 컴퓨터에서 작업을 하던, 서버에 올리던 단지 virtual host 설정 파일에서 환경 변수만 바꿔주면 잘 작동이 된다.</p>
]]></content>
</article>





<article>
<title><![CDATA[init.d 시스템 이벤트 만들기]]></title>
<url><![CDATA[/Server/Ubuntu%20Server/init.d%20%E1%84%89%E1%85%B5%E1%84%89%E1%85%B3%E1%84%90%E1%85%A6%E1%86%B7%20%E1%84%8B%E1%85%B5%E1%84%87%E1%85%A6%E1%86%AB%E1%84%90%E1%85%B3%20%E1%84%86%E1%85%A1%E1%86%AB%E1%84%83%E1%85%B3%E1%86%AF%E1%84%80%E1%85%B5.html]]></url>
<content><![CDATA[<h1 id="참고한-자료들">참고한 자료들</h1>

<ul>
<li><a href="http://www.dropboxwiki.com/tips-and-tricks/install-dropbox-in-an-entirely-text-based-linux-environment#opensuse">Install Dropbox In An Entirely Text-Based Linux Environment</a></li>
</ul>

<h1 id="init.d-script의-생성-및-등록">init.d script의 생성 및 등록</h1>

<ol>
<li><code>sudo nano /etc/init.d/${name}</code> script 생성</li>
<li><code>sudo chmod +x /etc/init.d/${name}</code> script에 권한 부여</li>
<li><code>sudo update-rc.d ${name} defaults</code> script 등록

<ul>
<li><code>sudo update-rc.d -f ${name} remove</code> script 등록 제거</li>
<li><a href="http://pmguda.com/733">update-rc.d 등록 및 삭제</a></li>
</ul></li>
</ol>

<h1 id="init.d-script의-구조">init.d script의 구조</h1>
<div class="highlight"><pre><code class="language-text" data-lang="text">#! /bin/sh

func1() {
    // TODO
}

func2() {
    // TODO
}

case &quot;$1&quot; in
    func1)
        func1
        ;;
    func2)
        func2
        ;;
    func3|func4)
        func1
        func2
        ;;
    *)
        echo &quot;Usage: /etc/init.d/${name} {func1|func2|func3|func4}&quot;
        exit 1
easc

exit 0
</code></pre></div>
<p>간단하게 <code>${name}</code>에 해당하는 서비스를 만들고, 해당 서비스에 명령어들을 <code>func1|func2|func3|func4</code>의 세가지를 부여했을때이다.</p>

<p><code>update-rc.d</code>인지 <code>init.d</code>인지 잘 모르겠으나 하여튼 구현해줘야 하는 기본 function들은</p>

<ol>
<li><code>start)</code></li>
<li><code>stop)</code></li>
<li><code>restart)</code></li>
<li><code>reload)</code></li>
<li><code>force-reload)</code></li>
<li><code>status)</code></li>
</ol>

<p>의 다섯가지 인듯 싶고, 예외의 command가 들어왔을 때 보여줄 메세지를 출력하기 위해 <code>*)</code>를 구현해주는 듯 싶다.</p>

<h1 id="init.d-script-test">init.d script test</h1>

<p>System 시작, 종료 시에 <code>echo</code> 메세지를 확인할 수 없기 때문에 <code>mkdir -p</code>를 사용해서 확인한다</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">#! /bin/sh

HOMEDIR=/home/ssen

case &quot;$1&quot; in
    start)
        mkdir -p $HOMEDIR/start
        ;;
    stop)
        mkdir -p $HOMEDIR/stop
        ;;
    restart|reload|force-reload)
        mkdir -p $HOMEDIR/restart
        ;;
    status)
        mkdir -p $HOMEDIR/status
        ;;
    *)
        echo &quot;Usage: /etc/init.d/test {start|stop|restart|reload|force-reload|status}&quot;
esac

exit 0
</code></pre></div>
<p>작성후에 확인을 해본다</p>

<ol>
<li><code>sudo nano /etc/init.d/testscript</code> script 작성</li>
<li><code>sudo chmod +x /etc/init.d/testscript</code> script 권한 부여</li>
<li><code>sudo update-rc.d testscript defaults</code> script 등록</li>
<li><code>sudo reboot</code> 리부팅 해서 디렉토리가 생성 되는지 확인</li>
<li><code>sudo rmdir start stop</code> 으로 확인된 디렉토리들 지워줌</li>
<li><code>sudo update-rc.d -f testscript remove</code> script 등록 제거</li>
<li><code>sudo reboot</code> 리부팅 해서 디렉토리가 생성 안되는지 확인</li>
</ol>
]]></content>
</article>







<article>
<title><![CDATA[make]]></title>
<url><![CDATA[/Shell/make.html]]></url>
<content><![CDATA[<h1 id="소개">소개</h1>

<p><code>Shell Script</code> 기반의 빌드 도구</p>

<p>원래는 c계열 빌드 도구인듯 싶지만, c언어를 사용하지 않는 나에게는 단순 <code>Shell Command</code> 압축기일 뿐이다.</p>

<p>비교가 될만한 여러 녀석들이 있긴 하지만...</p>

<ul>
<li><code>jake</code>, <code>cake</code>: Javascript 기반이라서 비동기 특성이 있다. 빌드용으로 쓰기엔 무리...</li>
<li><code>ant</code>: 읽기 더러운 xml...</li>
<li><code>scons</code>: 너무 고급화 되어서 <code>Shell Command</code> 압축용으로 쓰기엔 무리...</li>
<li><code>rake</code>: 단순하게 쓰기에 좋고, 언어도 <code>Ruby</code> 기반이라서 좋긴 하다. 비교를 해보자면

<ul>
<li>당연히 <code>make</code>보다 코드는 더러워진다. <code>make</code>의 특성 상, <code>Shell Command</code>를 그냥 적는 수준이기 때문에.</li>
<li>다만, 뭔가 연산질을 해야한다면 한결 수월해진다. <code>Shell Script</code> 자체가 상당히 익숙해지기 어려운 면이 많기 때문에.</li>
<li>하지만, <code>Un*x</code> 계열 System을 쓰게 되는 이상 <code>make</code> 말고도 <code>Shell Script</code> 작성해야 하는 일은 많다. (니기미...)</li>
</ul></li>
</ul>

<p>참고자료: <a href="http://hyperpolyglot.org/build">make vs rake vs scons vs ant</a></p>

<p>이런 특성들에 더해서, Github 같은데만 돌아도 알만한게 너도 나도 죄다 <code>Makefile</code>을 쓰고, <code>Un*x</code>를 쓰는 이상 <code>Shell Script</code>는 결국 마주칠 수 밖에 없기 때문에 결국은 <code>make</code>로 되돌아오게 된다. (벗어나려 해도 결국 되돌아오게 되는 개미지옥...)</p>

<p>부차적으로 Eclipse 나 Web Storm 같은 IDE의 빌드 기능을 최대한 이용해보는 수도 있지만, 빌드 구조가 조금만 복잡해져도 다시 <code>make</code>가 필요해지게 된다.</p>

<p>참고로 <code>make</code>로 대충 쓰기 힘든 수준에 이른다면 그냥 Script 언어를 써서 프로그램을 만드는게 더 낫다.</p>

<h1 id="기본-구조">기본 구조</h1>
<div class="highlight"><pre><code class="language-text" data-lang="text"># {작업}: {먼저 실행 해둬야 하는 작업} {먼저 실행 해둬야 하는 작업}
task1: task2 task3
    @echo &quot;Task 1&quot;

task2:
    @echo &quot;Task 2&quot;

task3:
    @echo &quot;Task 3&quot;
</code></pre></div>
<p>간단하게 위와 같은 구성으로 <code>Makefile</code>을 만들었을 때. 대충 사용해 보자면</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">$ make task1
Task 2
Task 3
Task 1
$ make task2
Task 2
$ make task3
Task 3
</code></pre></div>
<p>위와 같이 사용이 가능해진다. </p>

<h1 id="참고-자료들">참고 자료들</h1>

<ul>
<li><a href="http://developinghappiness.com/?page_id=222">Make 기반 빌드 시스템</a></li>
</ul>

<h1 id="변수의-사용">변수의 사용</h1>

<p>변수는 시스템 전반에 영향을 미치는 환경 변수(environment variable)와 걍 지역 변수가 있다.</p>

<p>둘 모두 <code>$(name)</code> 으로 사용이 가능하다.</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">local = &#39;local variable&#39;

task:
    @echo &quot;print: $(local)&quot;
    @echo &quot;print: $(global)&quot;
</code></pre></div>
<h1 id="디렉토리-확인">디렉토리 확인</h1>
<div class="highlight"><pre><code class="language-text" data-lang="text">task:
    if test -d dir/dir;\
    then @echo &quot;exists directory&quot;;\
    else @echo &quot;not exists directory&quot;;\
    fi
</code></pre></div>]]></content>
</article>



<article>
<title><![CDATA[mdfind]]></title>
<url><![CDATA[/Shell/mdfind.html]]></url>
<content><![CDATA[<h1 id="mdfind-:-metadata-find">mdfind : Metadata Find</h1>

<p>OSX 파일들의 metadata를 바탕으로 검색을 한다. 당연히 OSX 에서만 작동된다.</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">$ mdfind &quot;query&quot;
</code></pre></div>
<p>형태로 사용이 가능하고,</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">$ mdfind -onlyin ~/Documents &quot;query&quot;
</code></pre></div>
<p>와 같이 검색 범위를 특정 Directory 이하로 지정하는 것도 가능하다.</p>

<p>OSX System과 아예 결합이 되어있는지라 결과가 빠르고, 생각보다 검색할 수 있는 범위가 넓다.</p>

<p>다만, 문제점 중 하나는 이 쿼리문이 사람이 기억해서 쳐대기에는 좀 무리가 있다는 것... 즉, command line 으로서의 활용성은 그다지 높다고 보기엔 어렵지 않나 싶다. command line 에서의 활용이야 <code>find ~/Documents/**/*.pdf</code> 와 같은 globbing이 더 유용하다고 볼 수 있으니... api 로 필요한 뭔가를 만들때 쓰기엔 상당히 유용할 것 같다.</p>

<h1 id="쿼리-작성에-참고할-수-있는-자료들">쿼리 작성에 참고할 수 있는 자료들</h1>

<ul>
<li><a href="http://osxnotes.net/spotlight.html">Spotlight syntax, mdfind examples, and metadata attributes</a></li>
<li><a href="https://developer.apple.com/library/mac/documentation/Carbon/Conceptual/SpotlightQuery/Concepts/QueryFormat.html">File Metadata Search Programming Guide</a> </li>
<li><a href="https://developer.apple.com/library/mac/documentation/carbon/reference/metadataattributesref/reference/commonattrs.html">File Metadata Attributes Reference</a></li>
</ul>
]]></content>
</article>



<article>
<title><![CDATA[mxmlc, compc]]></title>
<url><![CDATA[/Flash/Environments/mxmlc,%20compc.html]]></url>
<content><![CDATA[<h1 id="참고-자료들">참고 자료들</h1>

<ul>
<li><a href="http://help.adobe.com/en_US/flex/using/WS2db454920e96a9e51e63e3d11c0bf69084-7a92.html">About the application compiler options</a></li>
</ul>

<h1 id="mxmlc,-compc-의-commanline-message-를-영문으로-보이기"><code>mxmlc</code>, <code>compc</code> 의 Commanline Message 를 영문으로 보이기</h1>

<ol>
<li>Flex SDK 에 있는 <code>mxmlc</code>, <code>compc</code> 실행 스크립트를 Text Editor 로 연다 </li>
<li><code>VMARGS=&quot;...</code> 라고 된 라인을 찾아서 마지막 부분에 <code>-Duser.language=en -Duser.country=US</code> 를 추가</li>
</ol>

<p>처리를 완료하면 command line message 들이 모두 영문으로 출력됨</p>

<h1 id="-default-size-1000-800-swf-size-size-지정"><code>-default-size 1000 800</code> swf size size 지정</h1>

<ul>
<li>project properties 에서 <strong>Flex Compiler / HTML Wrapper</strong> 의 체크를 해제 했을때 뜨는 flash player 의 size 가 된다</li>
<li><code>Application</code> 에서 <code>minWidth</code>, <code>minHeight</code> 를 없애줘야 한다</li>
</ul>

<h1 id="keep-generated-actionscript=true|false-컴파일된-.as-남기기"><code>keep-generated-actionscript=true|false</code> 컴파일된 .as 남기기</h1>

<ul>
<li>컴파일 된 actionscript code 를 남겨놓는다</li>
<li>디버깅, 역분석 등에 유용함</li>
</ul>

<h1 id="compc-참고-자료들">compc 참고 자료들</h1>

<ul>
<li><a href="http://livedocs.adobe.com/flex/3/html/compilers_22.html#250507">http://livedocs.adobe.com/flex/3/html/compilers_22.html#250507</a></li>
<li><a href="http://www.docsultant.com/site2/articles/flex_cmd.html">http://www.docsultant.com/site2/articles/flex_cmd.html</a></li>
<li><code>-library-path</code> swc 에 포함될 library path</li>
</ul>
]]></content>
</article>





<article>
<title><![CDATA[netstat]]></title>
<url><![CDATA[/Shell/netstat.html]]></url>
<content><![CDATA[<h1 id="netstat">netstat</h1>

<ul>
<li><code>netstat -an | grep &quot;LISTEN&quot;</code></li>
<li><code>nmap localhost</code></li>
</ul>

<h1 id="참고한-문서들">참고한 문서들</h1>

<ul>
<li><a href="http://jmnote.com/wiki/%EB%A6%AC%EB%88%85%EC%8A%A4_%EB%A1%9C%EC%BB%AC%EC%84%9C%EB%B2%84_%EC%97%B4%EB%A6%B0_%ED%8F%AC%ED%8A%B8_%ED%99%95%EC%9D%B8">리눅스 로컬서버 열린 포트 확인</a></li>
</ul>
]]></content>
</article>



<article>
<title><![CDATA[nginx.conf 파일 살펴보기]]></title>
<url><![CDATA[/Server/NginX/nginx.conf%20%E1%84%91%E1%85%A1%E1%84%8B%E1%85%B5%E1%86%AF%20%E1%84%89%E1%85%A1%E1%86%AF%E1%84%91%E1%85%A7%E1%84%87%E1%85%A9%E1%84%80%E1%85%B5.html]]></url>
<content><![CDATA[<h1 id="참고-자료들">참고 자료들</h1>

<ul>
<li><a href="http://opentutorials.org/module/384/4526">NginX 환경설정</a></li>
<li><a href="http://blog.outsider.ne.kr/792">Outsider님의 NginX 설치</a></li>
<li><a href="http://wiki.nginx.org/HttpCoreModule">NginX Wiki HttpCoreModule</a></li>
<li><a href="http://dak1n1.com/blog/12-nginx-performance-tuning">Tuning NginX for Best Performance</a></li>
<li><a href="http://blog.martinfjordvald.com/2011/04/optimizing-nginx-for-high-traffic-loads/">Optimizing NginX for Hish Traffic Loads</a></li>
<li><a href="http://blog.naver.com/PostView.nhn?blogId=belladonnaf&amp;logNo=50108995999">가벼운 웹서버 nginx의 설치 및 환경설정 (이미지 서버로 사용하기)</a></li>
<li><a href="http://book.daum.net/detail/book.do?bookid=BOK00019918616BA">서적:엔진엑스로 운용하는 효율적인 웹사이트</a></li>
</ul>

<h1 id="nginx.conf"><code>nginx.conf</code></h1>
<div class="highlight"><pre><code class="language-text" data-lang="text"># user www-data;
# pid /run/nginx.pid;
worker_processes 1;

events {
    worker_connections 768;
}

http {
    sendfile on;

    tcp_nopush on;
    tcp_nodelay on;

    keepalive_timeout 5;

    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # access_log /var/log/nginx/access.log;
    # error_log /var/log/nginx/error.log;

    gzip on;
    gzip_disable &quot;msie6&quot;;
    # gzip_vary on;
    # gzip_proxied any;
    # gzip_comp_level 6;
    # gzip_buffers 16 8k;
    # gzip_http_version 1.1;
    # gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;

    include /etc/nginx/conf.d/*.conf;
    include /etc/nginx/sites-enabled/*;
}
</code></pre></div>
<h3 id="worker-process">Worker Process</h3>

<ul>
<li><code>worker_processes</code> cpu core 갯수를 입력하거나, 구지 성능이 필요없는 경우 그 이하로 설정하면 된다.</li>
<li><code>events.worker_connections</code> worker process 하나 당 처리 connection</li>
<li><code>user</code> worker process의 소유자가 된다.</li>
<li><code>pid</code> process id</li>
</ul>

<p>동시 접속 가능힌 connection은 <code>worker_processes * events.worker_connections</code>가 된다.</p>

<p>그냥 개발용으로 쓰는 경우 (brew로 설치했다거나 할 때)는 보통 <code>user</code>와 <code>pid</code>는 비활성 되어 있다. 두 항목은 걍 초기값으로 놔두면 될듯...</p>

<h3 id="성능-최적화에-관련된-옵션들">성능 최적화에 관련된 옵션들</h3>

<ul>
<li><code>tcp_nodelay on;</code></li>
<li><code>tcp_nopush on;</code></li>
</ul>

<p>OS나 Socket 등의 작동에 영향을 미치는 옵션들인듯 싶다. 복잡하게 생각할 필요없이 그냥 둘 다 <code>on</code>으로 설정해놓으면 될듯 싶다. <a href="http://book.daum.net/detail/book.do?bookid=BOK00019918616BA">서적:엔진엑스로 운용하는 효율적인 웹사이트</a>의 169페이지에 안내되어 있다.</p>

<ul>
<li><code>keepalive_timeout 65</code></li>
</ul>

<p>Http1.1의 keep-alive에 영향을 미치는 듯 싶다. (Http Request를 받은 이후, 연결을 재사용 시키는 효율성을 위해 다음 요청이 들어올 때 까지 대기해주는 시간)</p>

<p>기초값들은 보통 60정도로 되어있는데, 5정도로 확 줄이는 부류도 있고, 아주 늘려버리는 부류도 있는듯 싶다. 사이트 특성에 따라 혹은 컨텐츠 특성에 따라 설정이 달라질 수 있다는 이야기 같다. (User가 사이트에 얼마나 머무를 것이며, 다음 컨텐츠를 위해 다시 Request 요청을 보낼 것인지에 따라 틀려질 수 있을듯...) 딱히 사이트의 접속 시간이 길지 않다면 짧게 설정해도 될 듯 싶다.</p>

<p><a href="http://book.daum.net/detail/book.do?bookid=BOK00019918616BA">서적:엔진엑스로 운용하는 효율적인 웹사이트</a>의 170페이지와 <a href="http://blog.naver.com/PostView.nhn?blogId=belladonnaf&amp;logNo=50108995999">가벼운 웹서버 nginx의 설치 및 환경설정 (이미지 서버로 사용하기)</a>를 참고할 수 있다.</p>

<ul>
<li><code>sendfile on;</code> </li>
</ul>

<p>read(), write() 대신 커널 내부에서 파일 복사를 시켜서 성능이 향상된다는데... 잘 모르겠다. OS의 기능에 얽혀 있는 옵션인듯 싶다. 기본 on으로 되어있고, 걍 놔두면 될듯...</p>

<h3 id="mime-type">Mime Type</h3>

<ul>
<li><code>include /etc/nginx/mime.types;</code> mime type 설정을 include 한다</li>
<li><code>default_type  application/octet-stream;</code></li>
</ul>

<p>NginX가 사용할 Mime Type 설정을 해준다. 그냥 기본값으로 놔두고, 뭐 특수한 Mime 값이 필요할 때나 추가해주면 될듯 싶다.</p>

<h3 id="log">Log</h3>

<ul>
<li><code># access_log /var/log/nginx/access.log;</code></li>
<li><code># error_log /var/log/nginx/error.log;</code></li>
</ul>

<p>말그대로 log 기록해주는건데... 필요하다면 주석을 풀어주면 될듯 싶다.</p>

<h3 id="gzip">Gzip</h3>

<ul>
<li><code>gzip on;</code></li>
<li><code>gzip_disable &quot;msie6&quot;</code> </li>
<li><code>#...</code></li>
</ul>

<p>gzip 압축 전송에 관련된 내용들인데... 기본값으로 두거나, 필요할 때 열면 될 듯 싶고, 개발때는 딱히 필요없을 듯 싶다. Node.js Reverse Proxy로 사용할 때 등은 딱히 필요없을듯 싶다.</p>

<h3 id="기타-설정-가져오기">기타 설정 가져오기</h3>

<ul>
<li><code>include /etc/nginx/conf.d/*.conf;</code></li>
<li><code>include /etc/nginx/sites-enabled/*;</code></li>
</ul>

<p>하위 설정들을 가져온다.</p>
]]></content>
</article>



<article>
<title><![CDATA[npm]]></title>
<url><![CDATA[/Web/npm.html]]></url>
<content><![CDATA[<h1 id="npm-:-node-package-manager">NPM : Node Package Manager</h1>

<p>Node.js의 package들을 관리해준다. 사실 <code>npm</code> 모르면서 Node.js를 개발하는 사람은 없을 것이기 때문에 사족을 붙일 필요는 없다.</p>

<h1 id="모듈-랭킹-알아보기-:-https://nodejsmodules.org">모듈 랭킹 알아보기 : <a href="https://nodejsmodules.org">https://nodejsmodules.org</a></h1>

<p><code>npm</code>을 사용하면서 상당히 중요한 사이트이다. 키워드 별로 인기있는 Module을 소개해준다.</p>

<p><img src="../../files/captures/20140121/174542.png" alt="Module Ranking"></p>

<h1 id="npm-ls---depth=0"><code>npm ls --depth=0</code></h1>

<p><code>npm ls</code> 명령어를 치면 보통 하위 의존성까지 함께 보여주기 때문에 Module이 많아지면 상당히 보기 힘들다.</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">$ npm ls
test@0.1.0 /Users/user/module/
├─┬ file-picker@0.1.8
│ └── unorm@1.3.1
├─┬ grunt@0.4.2
│ ├── async@0.1.22
│ ├── coffee-script@1.3.3
│ ├── colors@0.6.2
│ ├── dateformat@1.0.2-1.2.3
│ ├── eventemitter2@0.4.13
│ ├── exit@0.1.2
│ ├─┬ findup-sync@0.1.2
│ │ └── lodash@1.0.1
│ ├── getobject@0.1.0
│ ├─┬ glob@3.1.21
│ │ ├── graceful-fs@1.2.3
│ │ └── inherits@1.0.0
│ ├── hooker@0.2.3
│ ├── iconv-lite@0.2.11
│ ├─┬ js-yaml@2.0.5
│ │ ├─┬ argparse@0.1.15
│ │ │ ├── underscore@1.4.4
...
...
...
</code></pre></div>
<p>뭐 이런식으로 겁나 길어지는데, <code>--depth=0</code> 옵션을 붙여주면</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">$ npm ls --depth=0
test@0.1.0 /Users/user/module/
├── file-picker@0.1.8
├── grunt@0.4.2
├── grunt-contrib-clean@0.5.0
├── grunt-contrib-coffee@0.8.2
├── grunt-contrib-jshint@0.8.0
├── grunt-contrib-uglify@0.3.1
├── grunt-mocha-test@0.8.2
├── grunt-shell@0.6.3
├── mkdirp@0.3.5
├── source-map-support@0.2.5
└── underscore@1.5.2
</code></pre></div>
<p>왠만큼 볼 수 있게 최상위만 보여준다.</p>

<h1 id="proxy-setting">Proxy Setting</h1>

<p>보안 Proxy를 필수로 사용하는 출장지에서 일해야 하는 경우 <code>npm</code>이 작동하지 않는 경우가 있다. 이 경우 <code>npm</code>에 Proxy를 셋팅해줘야 한다.</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">npm config set proxy http://fucking.proxy.com:1234
npm config set https-proxy http://fucking.proxy.com:1234
</code></pre></div>
<p>왠만해서 Proxy를 연결해주면 별 무리없이 되긴 하는데, 간혹 그 이상을 보여주는 출장지들이 있는데... 이 경우에는 <a href="https://github.com/npm/npmjs.org">https://github.com/npm/npmjs.org</a> 여기를 참고해서 Repository를 새로 만들어주거나 기본 설정인 <code>https://npmjs.org</code> 대신 <code>http://npmjs.org</code>를 사용하는 등의 방식으로 우회 가능하다.</p>
]]></content>
</article>



<article>
<title><![CDATA[php-frm 설치]]></title>
<url><![CDATA[/Server/NginX/php-frm%20%E1%84%89%E1%85%A5%E1%86%AF%E1%84%8E%E1%85%B5.html]]></url>
<content><![CDATA[<p>install</p>
<div class="highlight"><pre><code class="language-sh" data-lang="sh">brew tap josegonzalez/homebrew-php
brew tap homebrew/dupes
brew install –without-apache –with-fpm –with-mysql php54
ln -sfv /usr/local/opt/php54/*.plist ~/Library/LaunchAgents
launchctl load ~/Library/LaunchAgents/homebrew.mxcl.php54.plist
</code></pre></div>
<p>/usr/local/etc/php/5.4/php-fpm.conf</p>
<div class="highlight"><pre><code class="language-ini" data-lang="ini"><span class="na">listen</span> <span class="o">=</span> <span class="s">/tmp/php-fpm.sock</span>
<span class="na">error_log</span> <span class="o">=</span> <span class="s">/Users//Downloads/php-fpm.log</span>
<span class="na">access.log</span> <span class="o">=</span> <span class="s">/Users/ssen/Downloads/$pool.access.log</span>
</code></pre></div>
<p>nginx.conf</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">server {
    listen 9888;
    server_name localhost;

    root /Users/ssen/Workspace/labs.ssen.name/_site;
    index index.html index.htm index.php;

    access_log /Users/ssen/Workspace/labs.ssen.name/access.log;
    error_log  /Users/ssen/Workspace/labs.ssen.name/error.log;

    location ~ \.php$ {
        include         /usr/local/etc/nginx/fastcgi_params;

        fastcgi_pass    unix:/tmp/php-fpm.sock;
        fastcgi_index   index.php;
        fastcgi_param   SCRIPT_FILENAME $document_root$fastcgi_script_name;
    }
}
</code></pre></div>]]></content>
</article>



<article>
<title><![CDATA[pwd]]></title>
<url><![CDATA[/Shell/pwd.html]]></url>
<content><![CDATA[<h1 id="pwd">pwd</h1>
<div class="highlight"><pre><code class="language-text" data-lang="text">$ pwd
/usr/local/share/npm/lib
</code></pre></div>
<p>현재 위치한 경로를 출력한다.</p>

<p>가끔 Path 입력해야 하는 경우에 유용하다.</p>
]]></content>
</article>



<article>
<title><![CDATA[scp]]></title>
<url><![CDATA[/Shell/scp.html]]></url>
<content><![CDATA[<h1 id="scp-:-secure-copy">scp : Secure Copy</h1>
<div class="highlight"><pre><code class="language-text" data-lang="text"># scp {옵션} {원본 위치} {사본 위치}

# Remote Server로 보낼 때
scp -P 3872 ~/file.tar id@remote.com:~/save.tar

# Remote Server에서 받을 때
scp -P 3872 id@remote.com:~/save.tar ~/save2.tar
</code></pre></div>
<p>일단 <a href="../SSH%20Authentication/SSH%20Key%EB%A5%BC%20%ED%86%B5%ED%95%9C%20Server%20%EC%A0%91%EC%86%8D.md">SSH Key를 통한 Server 접속</a>이 가능한 상태여야 한다. (이미 SSH Key가 설정된 상태라서 없어도 되는건지 확인이 안되네...;;;)</p>

<p>옵션을 살펴보자면</p>

<ul>
<li><code>-P 24552</code> SSH Port를 지정</li>
<li><code>-p</code> Preserve 원본 파일의 수정시간, 사용시간, 권한 등을 유지한채 보낸다</li>
<li><code>-r</code> Recursive 하위 폴더/파일 모두 복사한다</li>
</ul>

<h1 id="remote-path-지정">Remote Path 지정</h1>
<div class="highlight"><pre><code class="language-text" data-lang="text">id@remote.com:~/save.tar
</code></pre></div>
<p>대충 구성을 살펴보자면</p>

<ul>
<li><code>id@</code> Remote Server에서 사용되는 id를 지정한다</li>
<li><code>remote.com</code> Remote Server의 Domain 또는 IP Address</li>
<li><code>:~/save.tar</code> : 이후로 Remote Server의 Path를 지정한다</li>
</ul>

<h1 id="-r-디렉토리-통째로-보내기-/-받기"><code>-r</code> 디렉토리 통째로 보내기 / 받기</h1>
<div class="highlight"><pre><code class="language-text" data-lang="text"># 보낼 때 
scp -P 3872 -r ~/directory id@remote.com:~/directory

# 받을 때
scp -P 3872 -r id@remote.com:~/directory ~/directory
</code></pre></div>
<p><code>-r</code> 옵션을 붙이면 지정한 디렉토리를 통째로 보내거나 받게 된다.</p>

<h1 id="glob">Glob</h1>

<p>뭔가 룰이 어정쩡 하지만 대충 Globbing이 되긴 된다.</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">scp -P 3872 -r ~/directory/*.jpg id@remote.com:~/directory
</code></pre></div>
<p>위와 같이 하면 <code>~/directory</code> 내의 모든 jpg 파일들이 Remote Server의 <code>~/directory</code>로 복사되게 된다.</p>

<p>다만, 주의 할 점은 Remote Server 상에 <code>~/directory</code>가 만들어져 있어야 한다는 점이다. (없으면 No such file or directory 라는 메세지를 보내고 전송이 실패하게 된다.)</p>

<h1 id="error-scp:-ambiguous-target">Error <code>scp: ambiguous target</code></h1>

<ul>
<li><code>scp file.txt user@ip_address:&quot;/file path/&quot;</code> 이런 형태에서 에러가 지속적으로 발생한다면</li>
<li><code>scp file.txt user@ip_address:&quot;/file\ path/&quot;</code> 이런 형태로 <code>\</code> 처리를 해주도록 한다</li>
</ul>

<h1 id="flex-sdk-등-큰-디렉토리-보내기">Flex SDK 등 큰 디렉토리 보내기</h1>

<p><code>scp -r</code> 옵션으로 디렉토리를 통째로 보내는 방법이 없는 것은 아니지만, 세월아 네월아 하게 된다. (겁내 오래걸림)</p>

<ul>
<li><code>tar cvf flex-sdk-4.11.0.tar &#39;Apache Flex SDK 4.11.0&#39;</code>과 같이 압축부터 하고</li>
<li><code>scp -P 3872 flex-sdk-4.11.0.tar id@remote.com:~/flex-sdk-4.11.0.tar</code>로 보내고</li>
<li><code>sudo mkdir /usr/lib/flex-sdk</code> Flex SDK를 넣을 디렉토리를 하나 만들고</li>
<li><code>sudo mv ~/flex-sdk-4.11.0.tar /usr/lib/flex-sdk/flex-sdk-4.11.0.tar</code>로 보내주고</li>
<li><code>cd /usr/lib/flex-sdk</code></li>
<li><code>sudo tar xvf flex-sdk-4.11.0.tar</code>로 풀어준다</li>
</ul>

<h1 id="참고한-자료들">참고한 자료들</h1>

<ul>
<li><a href="http://dinggur.tistory.com/94">http://dinggur.tistory.com/94</a></li>
</ul>
]]></content>
</article>









<article>
<title><![CDATA[ssh-keygen]]></title>
<url><![CDATA[/Shell/SSH%20Authentication/ssh-keygen.html]]></url>
<content><![CDATA[# SSH Key 생성

	$ ssh-keygen -t rsa -C "your@email.com"
	Generating public/private rsa key pair.
	Enter file in which to save the key (/Users/you/.ssh/id_rsa): /Users/you/.ssh/you_rsa
	Enter passphrase (empty for no passphrase):
	Enter same passphrase again:
	Your identification has been saved in /Users/you/.ssh/you_rsa.
	Your public key has been saved in /Users/you/.ssh/you_rsa.pub.

생성은 간단하다. 

- `ssh-keygen -t rsa -C "your@email.com"` 이메일을 입력하고 생성을 시작한다.
- `Enter file in which to save the key (/Users/you/.ssh/id_rsa): /Users/you/.ssh/you_rsa`
	- 이 부분에서 별도로 `/Users/you/.ssh/you_rsa`와 같이 입력을 해주지 않으면 기본 `id_rsa`로 생성이 된다.
	- 필요에 따라 파일 이름을 직접 입력해 주는 것이 좋다.
- 그 외에는 그냥 enter만 눌러주면 되고, 생성이 완료된다.

생성이 완료되면 아래와 같은 파일들이 만들어지게 된다

	$ ls ~/.ssh
	you_rsa    you_rsa.pub

`you_rsa` 파일은 비밀키이고, `you_rsa.pub` 파일은 공개키가 된다. 쉽게 설명하자면

- `you_rsa` 열쇠
- `you_rsa.pub` 자물쇠

가 된다. 

ssh key를 통한 자동 로그인은 `you_rsa.pub`라는 자물쇠를 여러 서버에 설치하고, 해당 서버들에 `you_rsa`라는 열쇠 하나로 열고 다니는 행동을 의미하게 된다.


# 열쇠와 자물쇠의 문제

`you_rsa`라는 열쇠와 `you_rsa.pub`라는 자물쇠가 만들어졌으니 이제 이 것을 어떻게 사용할지가 문제가 된다.

1. `you_rsa.pub`라는 자물쇠를 각 서버에 어떻게 설치 할 것인가?
1. `you_rsa`라는 열쇠 뿐만 아니라 `me_rsa`와 같은 열쇠가 더 있을때, 어떤 서버에 어떤 열쇠를 써야 하는지를 알 수 있을 것인가?

### 공개키의 설치

첫 번째의 문제는 의외로 간단한 해결이 가능하다. 일반적으로 서비스에는 ssh public key를 설치할 수 있는 장치가 마련되어 있기 때문이다.

![Bitbucket Add SSH Key][register-public-key]

예를 들어 위의 Bitbucket의 경우에도 ssh public key를 등록할 수 있는 메뉴가 있다. 이 부분에 만들어진 `you_rsa.pub`의 Text를 붙여넣으면 자물쇠의 설치가 완료된다.

### 열쇠의 구분

"서버에 맞게 어떤 열쇠를 쓸 것인가?"는 일단 수동으로 지정을 해주어야 한다.

	$ sudo nano ~/.ssh/config

위의 명령어 (혹은 vi 이던, subl 이던 입맛에 맞는 텍스트 편집 수단을 동원해서) config 파일을 만든다.

	Host bitbucket.org
		IdentityFile ~/.ssh/you_rsa

	Host github.com
		IdentityFile ~/.ssh/you_rsa

위와 같은 식으로 Host 별로 어떤 ssh private key를 사용할지를 지정해준다.

### 테스트

열쇠의 구분과 자물쇠의 설치가 끝났다면 대충 확인할 방법이 필요하다.

	$ ssh -T git@bitbucket.org

위와 같이 해보면 정상적인 접속 혹은 에러에 대한 메세지가 출력이 되게 된다.


# 에러 상황

SSH Key의 관리 차원에서 Key들을 Dropbox 같은데 놔두고 사용하다 새로운 컴퓨터에서 Key를 사용하고자 하는 경우 가끔 퍼미션 에러가 발생한다.

	chmod 700 ~/.ssh
	chmod 600 ~/.ssh/id_rsa
	chmod 644 ~/.ssh/id_rsa.pub  
	chmod 644 ~/.ssh/authorized_keys
	chmod 644 ~/.ssh/known_hosts

각 파일들에 대한 퍼미션을 위와 같이 조절해주면 정상적으로 작동하게 된다.


# 참고한 자료들

- <https://help.github.com/articles/generating-ssh-keys>
- <https://confluence.atlassian.com/display/BITBUCKET/Set+up+SSH+for+Git>
- <http://opentutorials.org/module/432/3742>



[register-public-key]: ../../../files/captures/20140115/145014.png
]]></content>
</article>



<article>
<title><![CDATA[system info commands]]></title>
<url><![CDATA[/Shell/system%20info%20commands.html]]></url>
<content><![CDATA[# `/proc/`

각 종, System 정보들이 들어있는 directory 이다.

하드웨어에 대한 정보들은 왠만해서 이곳에서 확인 가능한듯...

참고로 Ubuntu랑 CentOS 까지는 확인했는데, MacOSX 에는 없다. 아마 FreeBSD에도 없을듯...

### `cat /proc/cpuinfo`

	processor	: 0
	vendor_id	: AuthenticAMD
	cpu family	: 16
	model		: 8
	model name	: AMD Opteron(tm) Processor 4171 HE
	stepping	: 1
	cpu MHz		: 2094.706
	cache size	: 512 KB
	fpu		: yes
	fpu_exception	: yes
	cpuid level	: 5
	wp		: yes
	flags		: fpu vme de pse tsc msr pae mce cx8 apic mtrr pge mca cmov pat pse36 clflush mmx fxsr sse sse2 syscall nx mmxext fxsr_opt lm 3dnowext 3dnow up rep_good extd_apicid unfair_spinlock pni cx16 popcnt hypervisor lahf_lm cmp_legacy cr8_legacy abm sse4a misalignsse 3dnowprefetch osvw
	bogomips	: 4189.41
	TLB size	: 1024 4K pages
	clflush size	: 64
	cache_alignment	: 64
	address sizes	: 42 bits physical, 48 bits virtual
	power management:


# `df -h`

하드디스크의 남은 공간을 알 수 있다

	# df -h
	Filesystem                    Size  Used Avail Use% Mounted on
	/dev/mapper/VolGroup-lv_root   18G  1.3G   16G   8% /
	tmpfs                         495M     0  495M   0% /dev/shm
	/dev/sda1                     485M   54M  407M  12% /boot]]></content>
</article>





<article>
<title><![CDATA[tree]]></title>
<url><![CDATA[/Shell/tree.html]]></url>
<content><![CDATA[# 용도

단순히 `tree /dir`와 같은 입력을 통해서 해당 Directory의 파일 구조를 볼 수 있게 해준다.

	ssen@ubuntu:~ » tree Dropbox/Contents
	Dropbox/Contents
	├── 기술 관련 자료들
	│   ├── Books.md
	│   ├── Flash
	│   │   ├── 정리 완료
	│   │   │   ├── 과거 자료들 정리
	│   │   │   │   ├── 정리완료
	│   │   │   │   │   ├── array
	│   │   │   │   │   │   └── VectorSortExample.as
	│   │   │   │   │   ├── BezierPointCubic.as
	│   │   │   │   │   ├── BezierPointQuadratic.as
	│   │   │   │   │   ├── BitmapEx.as
	│   │   │   │   │   ├── BitmapMaterial.as
	│   │   │   │   │   ├── BitmapUtil.as
	│   │   │   │   │   ├── bytesToString.as
	│   │   │   │   │   ├── CalendarBase.as

대충 이와 같은 형태로 작동된다.


# Install

### Mac (brew)

	brew install tree

### Ubuntu (apt-get)

	sudo apt-get install tree

### CentOS (yum)

	sudo yum install tree

]]></content>
</article>



<article>
<title><![CDATA[user, group, permission management]]></title>
<url><![CDATA[/Shell/user,%20group,%20permission%20management.html]]></url>
<content><![CDATA[# Directory 정보 확인하기

`ls -al` 명령어를 통해 현재 Directory의 리스트를 확인 가능하다.

	drwx------+    9 ssen  staff    306  2 16 20:01 Downloads
	drwx------@   66 ssen  staff   2244  2 15 16:00 Library
	drwxr-xr-x@   14 ssen  staff    476  1 25 01:34 Links
	drwxr-xr-x@    6 ssen  staff    204  9 24 03:01 Make

위와 같은 형태가 된다.


# `drwxrwxrwx`

### 앞의 1개의 문자는 항목의 종류를 의미한다

- `-` file
- `d` directory
- `l` symbolic link

일반적으로 위의 3가지를 발견할 수 있으며, `c`(character special), `b`(block special), `p`(fipo), `s`(socket) 도 있다고 하는데 본적이 없다...

### 뒤의 9개는 `rwx` 3개가 붙어있는 형태가 된다.

- `r` 읽을 수 있음
- `w` 쓸 수 있음
- `x` 실행할 수 있음

이라는 의미가 되며, 순차적으로

- `rwx------` 소유자가 읽고, 쓰고, 실행할 수 있음
- `---rwx---` 접근이 허락된 그룹이 읽고, 쓰고, 실행할 수 있음
- `------rwx` 그 외, 모든 기타 사용자들이 읽고, 쓰고 실행할 수 있음

이라는 구성이 된다. 이렇게 **소유자, 그룹, 기타**에 대한 `rwx` 권한이 된다.

### `rwx`는 숫자로 표현될 수 있다

- `r = 4`
- `w = 2`
- `x = 1`

이라는 값을 가지며, 이를 더해서 숫자로 표현 가능하다. (도대체 왜 이렇게 한거야?)

- `rwx = 7` 맘대로
- `rw- = 6` 읽고, 쓸 수는 있지만 실행은 불가
- `r-x = 5` 읽고, 실행 할 수는 있지만 쓸 수는 없다
- `r-- = 4` 읽을 수만 있다
- `--- = 0` 아무것도 못한다

이를 다시 **소유자, 그룹, 기타**로 조합해 보자면

- `777` 모두가 맘대로
- `755` 소유주만 맘대로이고, 그 외에는 읽기와 실행만 가능
- `744` 소유주만 맘대로이고, 그 외에는 읽기만 가능
- `700` 소유주만 사용 가능

이라는 구성이 된다




# `owner   group`

다시 돌아가서 `ls -al`을 보자면

	drwxr-xr-x@    6 ssen  staff    204  9 24 03:01 Make

중반부에 나와있는 `ssen  staff`가 보인다.

1. 첫 번째의 `ssen`은 `owner` 즉, 파일의 소유주를 말하며 
2. 두 번째의 `staff`는 `group` 즉, 파일에 접근을 허락받은 사용자들의 그룹을 말한다

앞의 `rwxrwxrwx` 권한과 맞물려서 사용될 수 있다. 쉽게 이야기해서

- `rwx------`는 첫 번째의 `owner`에 대한 권한이 되며
- `---rwx---`는 두 번째의 `group`에 대한 권한이 되며
- `------rwx`는 지정되지 않은 모든 사용자에 대한 권한이 된다





# `chmod`, `chown`, `chgrp`

권한과 소유주, 그룹에 대한 확인이 가능하다면 당연히 그 권한과 소유주, 그룹에 대한 변경도 가능하다.

### `chmod` `rwxrwxrwx` 권한을 바꾸고 싶을 때

`chmod`는 위에서 언급한 `777` 형태의 소유권한 표현을 사용한다.

- `chmod 777 dir` dir 이라는 폴더에 누구나 접속하게 해준다
- `chmod -R 777 dir` -R 옵션을 붙이면 폴더 하위의 항목들까지 몽땅 바꾼다
- `chmod 700 dir` dir 이라는 폴더에 아무도 접속할 수 없게 만든다.

### `chgrp` `group`을 바꾸고 싶을 때

`chgrp`는 `group`을 바꾼다

- `chgrp developers test.js` test.js 파일에 대한 그룹을 developers로 지정한다
- `chgrp -R developers src` src 디렉토리와 하위 모든 항목들의 그룹을 developers로 지정한다

### `chown` `owner`를 바꾸고 싶을 때

`chown`는 기본적으로 `owner`를 바꾸지만, `group`도 같이 변경할 수 있다

- `chown arthur excalibur` 엑스칼리버의 주인을 아서로 바꾼다
- `chown ssen:developers test.js` test.js 파일의 소유자를 ssen으로 하면서, developers를 그룹으로 지정한다
- `chown ssen:developers src` src 디렉토리와 하위 모든 항목들의 소유자를 ssen으로 하면서, developers를 그룹으로 지정한다
- `chown -R ssen:developers docs --from=seoyeon:officeworkers` docs 디렉토리와 하위 디렉토리의 항목들 중이 소유자가 seoyeon, 그룹이 officeworkers로 되어있는 것들만 소유자 ssen, 그룹 developers로 변경한다






# `useradd`, `groupadd`, `usermod`

이제 권한과 소유자, 그룹에 대해서 알고, 항목의 권한, 소유자, 그룹을 바꿀 수 있게 되었다면...

당연히 사용자와 그룹을 만들 수 있어야 한다.

### `useradd` 새로운 사용자를 만들고 싶을 때

	useradd 







# 참고한 자료들

- <http://www.cyberciti.biz/faq/howto-linux-add-user-to-group/>
- <http://www.cyberciti.biz/faq/linux-set-change-password-how-to/>
- <http://linuxg.net/2-ways-to-change-a-users-login-shell/>
- <http://hybridego.net/entry/chown-%EC%86%8C%EC%9C%A0%EC%9E%90-%EC%86%8C%EC%9C%A0%EA%B7%B8%EB%A3%B9-%EB%B3%80%EA%B2%BD%ED%95%98%EA%B8%B0>
- <http://linux.101hacks.com/sysadmin-tasks/assign-new-group-to-use/>]]></content>
</article>



<article>
<title><![CDATA[which]]></title>
<url><![CDATA[/Shell/which.html]]></url>
<content><![CDATA[# which

	$ which echo
	/bin/echo

명령어의 실제 위치를 알아내는데 사용할 수 있다.

간단한 명령어이긴 하지만 간혹 명령어의 실제 위치를 적어내야 하는 경우가 있을때 매우 편리하다.]]></content>
</article>



<article>
<title><![CDATA[zsh]]></title>
<url><![CDATA[/Shell/zsh.html]]></url>
<content><![CDATA[# Defrecated

- 현재는 [zsh]보다는 [fish]를 더 추천


# [zsh] : Z Shell

`Un*x`의 기본 Shell인 `bash`보다 한결 사용하기 편한 Shell이다.

Tab Assist 기능이나 Git 저장소 정보 보여주기, [oh-my-zsh]를 통한 플러그인 및 테마 지원 등 상당히 많은 기능을 지원한다.


# Install

### Mac (brew)

- `brew install zsh` 설치
- `chsh -s /usr/local/bin/zsh` Shell 바꾸기
- `sudo su` root 진입
- `chsh -s /usr/local/bin/zsh` root Shell 바꾸기
- `exit` root 에서 나가기
- `curl -L https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh | sh` [oh-my-zsh] 설치

### Ubuntu (apt-get)

- `sudo apt-get install zsh` 설치
- `chsh -s /usr/local/bin/zsh` Shell 바꾸기
- `sudo su` root 진입
- `chsh -s /usr/local/bin/zsh` root Shell 바꾸기
- `exit` root 에서 나가기
- `curl -L https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh | sh` [oh-my-zsh] 설치



[fish]: fish.md
[zsh]: http://www.zsh.org
[oh-my-zsh]: https://github.com/robbyrussell/oh-my-zsh]]></content>
</article>



<article>
<title><![CDATA[기본 사항들]]></title>
<url><![CDATA[/Server/Ubuntu%20Server/%E1%84%80%E1%85%B5%E1%84%87%E1%85%A9%E1%86%AB%20%E1%84%89%E1%85%A1%E1%84%92%E1%85%A1%E1%86%BC%E1%84%83%E1%85%B3%E1%86%AF.html]]></url>
<content><![CDATA[# OS 관리

### 하드웨어 기본 정보들 보기

- `cat /proc/cpuinfo`
- `cat /proc/meminfo`

### apt-get 명령어들

[apt-get 명령어](apt-get 명령어.md) 참고

### OS, Package 업데이트

Login 시에 뭐 업데이트 할게 있다고 메세지가 뜬다거나 할 때 해준다

- `sudo apt-get update`
- `sudo apt-get upgrade`
	- 뭔가 더렵게 이상하다 싶으면 `apt-get -s dist-upgrade`

### 언어 설정

뭔가 언어 문제로 잘 안될 경우에 아래와 같이 사용 언어를 변경

- `sudo locale-gen ko_KR.UTF-8`
- `sudo nano /etc/default/locale` 파일 에서 `LANG="ko_KR.UTF-8"` 로 수정



# Package 설치

### ssh로 접속

VMWare에서 Ubuntu Server를 구동시에 ssh로 접속해서 사용하는 것이 더 편하지만, 기본 ssh 셋팅이 안되어 있는 경우가 있음.

ssh 접속이 안될 경우에 아래와 같이 설치

- `sudo apt-get install openssh-server`
- `sudo nano /etc/ssh/ssh_config` 로 port 주석을 지워서 열어줌
- `/etc/init.d/ssh restart`

### zsh shell 설치하기

[zsh](../zsh.md) 참고




]]></content>
</article>



<article>
<title><![CDATA[삼각함수]]></title>
<url><![CDATA[/Math/%E1%84%89%E1%85%A1%E1%86%B7%E1%84%80%E1%85%A1%E1%86%A8%E1%84%92%E1%85%A1%E1%86%B7%E1%84%89%E1%85%AE.html]]></url>
<content><![CDATA[# Chapter01 각도와 삼각형 
# Chapter02 직각삼각형 문제를 풀다 
# Chapter03 삼각함수: 사인(sin) 코사인(cos), 탄젠트(tan)

![triangle](assets/triangle3.png)

- `s = y / h` A 를 기준으로 하는 sin 비율
- `t = y / x` A 를 기준으로 하는 tan 비율
- `x = y / t`
- `x = Math.sqrt(Math.pow(h, 2) - Math.pow(y, 2))`
- `y = t * x`
- `y = s * h`
- `y = Math.sqrt(Math.pow(h, 2) - Math.pow(x, 2))`
- `h = y / s`
- `h = Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2))`
- `Math.pow(h, 2) = Math.pow(x, 2) + Math.pow(y, 2)` 

사인, 코사인, 탄젠트는 각 변의 비율을 이야기 한다.   
`사인 비율 = 반대 변 / 빗변`   
`코사인 비율 = 이웃 변 / 빗변`    
`탄젠트 비율 = 반대 변 / 이웃 변`   
이를 정리하면 아래와 같은 공식이 정리되게 된다

- `Math.sin(A) = y / h` A 와 B 는 radian 각도 단위이다
- `Math.cos(A) = x / h`
- `Math.tan(A) = y / x`
- `Math.sin(B) = x / h`
- `Math.cos(B) = y / h`
- `Math.tan(B) = x / y`

그리고, 이에 따라 정의되는 공식들

- `x = h * Math.cos(A)`
- `y = h * Math.sin(A)`

- `Math.tan(A) = Math.sin(A) / Math.cos(A)`

각도, 이웃 변, 반대 변, 빗변 중 2개의 정보가 있으면 모든 값을 계산해 내는 것이 가능하다?   
경우의 수는 6가지?

- 각도(A) + 이웃 변(x)
	- 반대 변(y) = `Math.tan(A) * x`
	- 빗변(h) = `x / Math.cos(A)`
	
- 각도(A) + 반대 변(y)
	- 이웃 변(x) = `y / Math.tan(A)`
	- 빗변(h) = `y / Math.sin(A)`
	
- 각도(A) + 빗변(h)
	- 이웃 변(x) = `Math.cos(A) * h`
	- 반대 변(y) = `Math.sin(A) * h`
	
- 이웃 변(x) + 반대 변(y)
	- 빗변(h) = `Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2))`
	- 각도(A)
	
- 이웃 변(x) + 빗변(h)
	- 반대 변(y)= `Math.sqrt(Math.pow(h, 2) - Math.pow(x, 2))`
	- 각도(A)

- 반대 변(y) + 빗변(h)
	- 이웃 변(x) = `Math.sqrt(Math.pow(h, 2) - Math.pow(y, 2))`
	- 각도(A)

## page 86 물체 까지의 거리 구하기

	y = s / 2
	x = y / Math.tan(A)
	
	trace("d = " + x)
	
## page 87 언덕 높이 구하기

	y1 = h
	x = y1 / Math.tan(B)
	y2 = Math.tan(A) * x
	
	trace("t = " + (y2 - y1))
	
## page 88 언덕 높이 구하기

	
	


# Chapter04 삼각함수의 응용 
# Chapter05 호도법(라디안 각도) 
# Chapter06 삼각함수 항등식 
# Chapter07 사인법칙과 코사인법칙 
# Chapter08 삼각함수 그래프 
# Chapter09 파동 
# Chapter10 삼각함수의 역함수 
# Chapter11 극 좌표계 
# Chapter12 복소수 
# Chapter13 좌표계 회전 변환과 원뿔 곡선 
# Chapter14 구면 삼각법 
# Chapter15 sin x와 cos x의 다항식 근사 ]]></content>
</article>



<article>
<title><![CDATA[수학식]]></title>
<url><![CDATA[/Math/%E1%84%89%E1%85%AE%E1%84%92%E1%85%A1%E1%86%A8%E1%84%89%E1%85%B5%E1%86%A8.html]]></url>
<content><![CDATA[# 퍼센트 계산식

- `35 / 167 * 100` 35는 167의 몇 %?
- `167 * 25 / 100` 167의 25%는 얼마?
- `167 * (1 + 25 / 100)` 167을 25% 증가시킴
- `167 * (1 - 25 / 100)` 167을 25% 감소시킴
- `(167 - 100) / 167 * 100` 100 대비 165의 % 변화량  

# Books

]]></content>
</article>



<article>
<title><![CDATA[수학적 그래픽스 드로잉]]></title>
<url><![CDATA[/Math/%E1%84%89%E1%85%AE%E1%84%92%E1%85%A1%E1%86%A8%E1%84%8C%E1%85%A5%E1%86%A8%20%E1%84%80%E1%85%B3%E1%84%85%E1%85%A2%E1%84%91%E1%85%B5%E1%86%A8%E1%84%89%E1%85%B3%20%E1%84%83%E1%85%B3%E1%84%85%E1%85%A9%E1%84%8B%E1%85%B5%E1%86%BC.html]]></url>
<content><![CDATA[# 도, 분, 초 

- 1도 (degree) = 60분
- 1분 = 60초

# 직각삼각형

[위키피디아 피타고라스의 정리](http://ko.wikipedia.org/wiki/%ED%94%BC%ED%83%80%EA%B3%A0%EB%9D%BC%EC%8A%A4%EC%9D%98_%EC%A0%95%EB%A6%AC)

![pythagorean.png](assets/pythagorean.png)

> 각 변의 길이로 다른 변의 길이 구하기   
> a<sup>2</sup> + b<sup>2</sup> = c<sup>2</sup>


	c^2 = a^2 + b^2
	c^2 - a^2 = b^2
	
	// C 와 A (or B) 를 가지고 B (or A) 를 구한다
	private function pythagorasGetAB(c : Number = 0, ab : Number = 0) : Number {
		return Math.sqrt(Math.pow(c, 2) - Math.pow(ab, 2));
	}
	
	// A 와 B 를 가지고 C 를 구한다
	private function pythagorasGetC(a : Number = 0, b : Number = 0) : Number {
		return Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2));
	}

[위키피디아 직각삼각형](http://ko.wikipedia.org/wiki/%EC%A7%81%EA%B0%81%EC%82%BC%EA%B0%81%ED%98%95)

![triangle.png](assets/triangle.png)

> 변의 길이와 각도로 다른 변의 길이 구하기   
> 높이 = 밑변 * (밑변 각도 / 45)   
> 밑변 = 높이 * (밑변 각도 / 45)

	private function getAB(ab : Number, degree : Number) : Number {
		return ab * (degree / 45);
	}
	
각 변의 길이 구하기

	var a : int = 5;
	var b : int = 5;
	var c : Number = Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2));
	
	var s : Number = b / c;
	var t : Number = b / a;
	
	tracer("조건들 a, b, c, s, t", a, b, c, s, t);
	
	trace("밑변 a 의 길이로 높이 b 찾기", t * b);
	trace("높이 b 의 길이로 밑변 a 찾기", b / t);
	trace("높이 b 의 길이로 빗변 c 찾기", b / s);
	trace("빗변 c 의 길이로 높이 b 찾기", s * c);
	trace("밑변 a 와 높이 b 로 빗변 c 찾기", Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2)));
	trace(Math.sin(MathEx.RADIAN[45]), b/c);
	
![triangle2.png](assets/triangle2.png)

> tan(각도 b) = 높이 (b) / 밑변 (a)    
> 각도 b = MathUtils.radToDeg(Math.atan(b / a))    
> 각도 a = 90 - 각도 b
]]></content>
</article>



<article>
<title><![CDATA[이야기로 쉽게 배우는 대수학]]></title>
<url><![CDATA[/Math/%E1%84%8B%E1%85%B5%E1%84%8B%E1%85%A3%E1%84%80%E1%85%B5%E1%84%85%E1%85%A9%20%E1%84%89%E1%85%B1%E1%86%B8%E1%84%80%E1%85%A6%20%E1%84%87%E1%85%A2%E1%84%8B%E1%85%AE%E1%84%82%E1%85%B3%E1%86%AB%20%E1%84%83%E1%85%A2%E1%84%89%E1%85%AE%E1%84%92%E1%85%A1%E1%86%A8.html]]></url>
<content><![CDATA[망할 수학 공부의 목표는?

1. 수학적 기호들을 코드로 해석해낼 수 있다
1. 여러 수학적 연산에 필요한 공식들을 알 수 있다
1. 수식의 정리를 통해서 필요한 값들을 역산해낼 수 있다

# 수학 기호의 코드화

- ![](http://www.forkosh.com/mathtex.cgi?{a}^{2}) `Math.pow(a, 2)`
- ![](http://www.forkosh.com/mathtex.cgi?a=\sqrt{2}) `Math.sqrt(2)`
					 

# 방정식

## 계산 우선순위

1. 괄호 (5 + 4) * 5 = 9 * 5 = 45
1. 지수 4 * 3<sup>2</sup> = 4 * 9 = 36
1. 곱셈, 나눗셈 5 + 4 * 3 = 5 + 12 = 17
1. %
1. 더하기, 빼기

## 덧셈과 곱셈의 성질

교환법칙

	a + b = b + a
	a * b = b * a

결합법칙

	(a + b) + c = a + (b + c)
	(a * b) * c = a * (b * c)

분배법칙

	a * (b + c) = (a * b) + (a * c)
	(b + c) * a = (b * a) + (c * a)

## 등식의 성질

	if (a == b)   
		a + c = b + c
		a - c = b - c   
		a * c = b * c
		
		if (c !== 0) // c 가 0 이 아니라면   
			a / c = b / c
			
## 곱셈표 생략 규정

`2abc` 는 `2 * a * b * c` 와 같다.

`2abc + 45abc = 47abc` 와 같이 하나의 단위로서 연산이 가능하다

- `10 * x + 5 * x - 35 = x + 7`
	- `10x + 5x - 35 = x + 7`
		- `10x + 5x - x = 7 + 35` 이항 성질은 **양변에 x 를 빼고, 35 를 더한다는 개념이 된다**
			- `14x = 42`
				- `x = 42 / 14 = 3`

## 이항 성질

이항 성질은 기본적으로 등식의 성질을 이용한다.

- `x + 3 = 5` 이와 같은 등식이 있다면
	- `x + 3 - 3 = 5 - 3` 과 같이 이항 할 수를 양변에서 빼주고
		- `x = 5 - 3` 과 같은 식으로 이항이 완료되게 된다. 

사칙 연산의 이항은 아래와 같다.

- 덧셈, 뺄셈 이항
	- `x - 3 = 5`
		- `x = 5 + 3`
		
- 곱셈, 나눗셈 이항
	- `x = y * z`
		- `x / y = z` 곱하기는 나누기의 분모로 이항된다
		- `x / z = y`
			- `z = x / y` 분자는 분자로 이항된다
			- `x = y * z` 분모는 곱하기로 이항된다
	- `a / bx = c`
		- `bx = a / c`
			- `x = a / bc` 곱하기는 반대편 분모의 곱하기로 이항된다

## 일차방정식 예제들

- `3x + 2 = 5`
	- `3x = 5 - 2` + 2 를 우변으로 이항
		- `3 * x = 3` 3x 는 3 * x
			- `x = 3 / 3` * 3 을 우변으로 이항
				- `x = 1`
				- `(3 * 1) + 2 = 5` 로 증명
	
- `3x - 2 = 5x + 4`
	- `3x - 5x = 4 + 2` - 2 를 우변으로 이항, + 5x 를 좌변으로 이항
		- `-2x = 6`
			- `-2 * x = 6`
				- `x = 6 / -2`
					- `x = -3`
					- `(3 * -3) - 2 = -11`, `(5 * -3) + 4 = -11` 로 증명
	
- `4x + 2 = 10`
	- `4 * x = 8`
		- `x = 8 / 4`
			- `x = 2`
			- `(4 * 2) + 2 = 10` 으로 증명

- `2x + 2 = 3x - 1`
	- `2x - 3x = -1 - 2`
		- `-1 * x = -3`
			- `x = -3 / -1`
				- `x = 3`
				- `(2 * 3) + 2 = 8`, `(3 * 3) - 1 = 8` 로 증명 
				
- `2(x - 2) + 3 = 5x - 1`
	- `(2 * (x - 2)) + 3 = 5x - 1` 2(x - 2) 은 2x - 4 로 각 항에 곱해줄 수 있다 
		- `2x - 4 + 3 = 5x - 1`
			- `2x - 5x = -1 + 4 - 3` 5x 를 좌변으로 이항, - 4 + 3 을 우변으로 이항
				- `-3x = 0`
					- `x = 0`
					- `(2 * (0 - 2)) + 3 = -1`, `(5 * 0) - 1 = -1` 로 증명

- `2(x - 2) + 1 = -5`
	- `2x - 4 = -6`
		- `2x = -2`
			- `x = -2 / 2`
				- `x = -1`
				- `(2 * (-1 - 2)) + 1 = -5` 로 증명
				
- `(1 / 3)x + (5 / 6) = (7 / 2)`
	- `(1 / 3)x = (42 / 12) - (10 / 12)`
		- `(1 / 3)x = (42 - 10) / 12`
			- `(1 / 3)x = 32 / 12`
				- `x = (32 / 12) / (1 / 3)`
					- `x = 8`
					- `((1 / 3) * 8) + (5 / 6) = 3.5`, `7 / 2 = 3.5` 로 증명
					
- `0.2(x + 1) - 1 = 1.2`
	- `0.2x + 0.2 - 1 = 1.2`
		- `0.2 * x = 1.2 - 0.2 + 1`
			- `0.2 * x = 2`
				- `x = 2 / 0.2`
					- `x = 10`
					- `(0.2 * (10 + 1)) - 1 = 1.200000000002` 로 증명
						

## 문제풀이 "이야기로 쉽게 배우는 대수학" 81 page

1. 시속 30마일로 몇 시간을 가야 3000마일을 갈 수 있을까?
	- `30 * x = 3000`
		- `x = 3000 / 30`
			- `x = 100`
			
1. 서로 100마일 떨어진 거리에서 두 사람이 시속 30마일, 20마일의 속도로 출발했을때, 만나게 되는데 걸리는 시간은?
	- `x(30 + 20) = 100`
		- `x = 100 / 50`
			- `x = 2`

1. 위와 같은 문제에서 두 사람의 속도를 v1, v2 라고 했을때의 계산
	- `x(v1 + v2) = 100`
		- `x = 100 / (v1 + v2)`
		- `function (v1, v2) : x { return 100 / (v1 + v2) }` 수로 떨어지지 않는 계산식 형태의 값은 함수로 정의가 가능할 것 같다
		
1. 48달러를 벌기 위해 일할 때, 힘든 일은 시간 당 12달러를, 쉬운 일은 시간 당 6달러를 벌 수 있다. 48달러를 벌 수 있는 모든 경우를 쓴다면?
	- 힘든 일 시급 `x = 12`, 쉬운 일 시급 `y = 6`, 힘든 일 실행 `a`, 쉬운 일 실행 `b`
		- `b = (48 - ax) / y`
			- `a = 0`, `b = 8`
			- `a = 1`, `b = 6`
			- `a = 2`, `b = 4`
			- `a = 3`, `b = 2`
			- `a = 4`, `b = 0`

1. cd 가격이 12달러, 피자는 6달러, 한 달 용돈은 60 달러 일때 구입 가능한 경우 모두는?
	- cd `x = 12`, 피자 `y = 6`, cd 구입 `a`, 피자 구입 `b`
		- `b = (60 - ax) / y`
			- `a = 0`, `b = 10`
			- `a = 1`, `b = 8`
			- `a = 2`, `b = 6`
			- `a = 3`, `b = 4`
			- `a = 4`, `b = 2`
			- `a = 5`, `b = 0`
			
1. 한 농부는 닭과 말을 키우고 있고, 모든 다리의 총 합은 88개, 날개는 40개, 말과 닭은 몇 마리?
	- 닭의 수 `40 / 2 = 20` 닭의 총 다리 수는 40...
		- `말다리들 = 88 - 40 = 48`
			- `48 / 4 = 12`
			- 증명 말의 수 `x = 12`, 닭의 수 `y = 20`
				- `x4 + y2 = 88`
					- `48 + 40 = 88`
					
1. 도로 엘름과 메이플에 나무 18그루를 심는데, 엘름에 메이플보다 두 배의 나무를 심고 싶다. 몇 개씩 심어야 하는가?
	- `x(2 + 1) = 18`
		- `x = 18 / 3`
		 - `x = 6` 엘름 12 그루, 메이플 6그루
		 
1. 어떤 책의 1장과 2장의 페이지를 합하면 65페이지가 나온다. 그런데 1장이 2장보다 다섯 페이지가 많다. 각각 몇 페이지?
	- `2x + 5 = 65`
		- `2x = 60`
			- `x = 30` 30, 35
			
1. 연속 된 두 수를 더하면 63이 된다. 어떤 수들인가?
	- `2x + 1 = 63`
		- `2x = 62`
			- `x = 31` 31, 32
			
1. 연속 된 세 수를 더하면 75가 된다. 어떤 수들인가?
	- `3x + 3 = 75`
		- `3x = 72`
			- `x = 24` 24, 25, 26
			
1. TJ 가 JR 보다 타이핑이 두 배 빠르다. 모두 600 페이지를 작성했을때 각각 몇 페이지 씩 작성했는가?
	- `x(2 + 1) = 600`
		- `x = 600 / 3`
			- `x = 200` 400, 200
			
1. 서로 660마일 떨어져 있는 도시를 다니는 비행기가 있다. 비행기는 시속 200 마일이지만, 바람의 속도로 3시간이 걸렸다. 바람은 시속 몇 마일?
	- `3(x + 200) = 660`
		- `3x + 600 = 660`
			- `3x = 60`
				- `x = 20`
				
1. 90피트 길이의 철조망이 있고, 길이 2 / 폭 1 의 직사각형 모양의 울타리를 치려고 한다. 길이와 폭은 얼마?
	- `2x(2 + 1) = 90`
		- `2x = 90 / 3`
			- `2x = 30`
				= `x = 15` 길이 30, 폭 15
				
1. 슈는 프레드 보다 3년 더 일했다. 둘의 경력을 합하면 15년. 슈의 경력은?
	- `2x + 3 = 15`
		- `2x = 12`
			- `x = 6` 9년, 6년

1. 청구된 보험금에서 250 달러를 공제 후, 금액의 80% 를 지불한다. 1000 달러를 청구하면 얼마를 받는가?
	- `(1000 - 250) * 0.8 = 600` ????
			
1. 도시 인구가 현재 4,600 명인데, 매년 200명씩 증가. 인구가 두배가 되려면 몇 년이 걸리나?
	- `4600 + 200x = 9200`
		- `200x = 4600`
			- `x = 4600 / 200`
				- `x = 23`



# 분수

## 분수의 계산

- ![](http://www.forkosh.com/mathtex.cgi?\frac{a}{b}\times\frac{c}{d}=\frac{ac}{bd}) 곱하기는 분자끼리, 분모끼리 곱한다
- ![](http://www.forkosh.com/mathtex.cgi?\frac{a}{b}+\frac{c}{b}=\frac{a+c}{b}) 분모가 같다면 분자끼리 더한다
- ![](http://www.forkosh.com/mathtex.cgi?\frac{a}{b}+\frac{c}{d}=\frac{ad}{bd}+\frac{bc}{bd}=\frac{ad+bc}{bd}) 분자, 분모가 모두 다르다면, 분자, 분모에 상대방 분모를 곱해서 같게 만든 다음 결합한다
- ![](http://www.forkosh.com/mathtex.cgi?\frac{a}{b}-\frac{c}{d}=\frac{ad}{bd}-\frac{bc}{bd}=\frac{ad-bc}{bd})
- ![](http://www.forkosh.com/mathtex.cgi?\frac{\frac{a}{b}}{\frac{c}{d}}=\frac{\frac{a}{b}\times\frac{d}{c}}{\frac{c}{d}\times\frac{d}{c}}=\frac{\frac{ad}{cb}}{\frac{cb}{cb}}=\frac{\frac{ad}{cb}}{1}=\frac{ad}{cb}) 복합 분수는 **분모의 역수** 를 분모와 분자에 곱해줘서 정리할 수 있다 ![](http://www.forkosh.com/mathtex.cgi?\frac{\frac{3}{6}}{\frac{3}{4}}=\frac{\frac{3}{6}\times\frac{4}{3}}{\frac{3}{4}\times\frac{4}{3}}=\frac{\frac{12}{18}}{\frac{12}{12}}=\frac{\frac{12}{18}}{1}=\frac{12}{18})
- ![](http://www.forkosh.com/mathtex.cgi?\frac{ac}{bc}=\frac{a}{b}) 약분, 같은 값으로 나누든 곱하든 분수의 비율엔 변화가 없다
- ![](http://www.forkosh.com/mathtex.cgi?\frac{-a}{-b}=\frac{a}{b}) 분자에 같은 값을 곱하면 같다는 성질에서, ![](http://www.forkosh.com/mathtex.cgi?\frac{-1}{-1}=1) 이다
- ![](http://www.forkosh.com/mathtex.cgi?\frac{-a}{b}=-\frac{a}{b}) 
- ![](http://www.forkosh.com/mathtex.cgi?\frac{a}{-b}=-\frac{a}{b}) 
- ![](http://www.forkosh.com/mathtex.cgi?-\frac{-a}{-b}=-\frac{a}{b})
- 예제들 중 분모는 모두 0 이 아니어야 함

## 문제풀이 "이야기로 쉽게 배우는 대수학" 127 page

이거 왜... 책의 해답들이 죄다 틀린 답이냐?

1. `4x = 36`
	- `x = 36 / 4`
	
1. `3x = 8`
	- `x = 8 / 3`
	
1. `24x = 60`
	- `x = 60 / 24`
	
1. `5x + 10 = 6`
	- `5x = 6 - 10`
		- `x = (6 - 10) / 5`
		
1. `ax = b`
	- `x = b / a`
	
1. `ax - b = c`
	- `ax = c + b`
		- `x = (c + b) / a`
		
1. `ax + b = cx + d`
	- `ax - cx = d - b`
		- `x(a - c) = d - b`
			- `x = (d - b) / (a - c)`

1. `ax / b = c`
	- `ax = cb`
		- `x = cb / a`

1. `a / bx = c`
	- `bx = a / c`
		- `x = a / bc` 
		
1. `(ax / b) + (cx / d) = e`
	- `(axd + cxb) / bd = e` 
		- `axd + cxb = ebd`
			- `x * (ad + cb) = ebd`
				- `x = ebd / (ad + cb)`
				
1. `(a / bx) + (c / d) = e`
	- `a / bx = e - (c / d)`
		- `bx = a / (e - (c / d))`
			- `x = a / ((e - (c / d)) * b)`

## 문제풀이 "이야기로 쉽게 배우는 대수학" 135 page

1. 합성세제를 살 때 12온스 짜리를 1.16달러, 16온스 짜리를 1.4달러에 사는 것 중 더 나은것은?
	- 기준을 맞추기 위해 **1 온스 당 달러**를 구한다 `(1.4 / 16)` 그런 다음 상대편 기준 온스에 맞게 곱해준다 `(1.4 / 16) * 12`
	- `(1.4 / 16) * 12 = 1.049`달러가 1.16 달러보다 더 싸다
	
1. 세전 수입을 y 라고 하고, 정부에서 세금으로 ![](http://www.forkosh.com/mathtex.cgi?\frac{1}{4}y-10)만큼 떼어갔을때, 세후 수입이 280만 달러라면 세전 수입은 얼마?
	- `y - ((1 / 4)y - 10) = 280`
		- `y - (y / 4) - 10 = 280`
			- `y - (y / 4) = 270`
				- `(4y / 4) - (y / 4) = 270`
					- `(4y - y) / 4 = 270`
						- `3y / 4 = 270`
							- `3y = 270 * 4`
								- `y = 1080 / 3 = 360`
								
1. 응원하는 팀이 처음 20경기 중 60% 를 승리했다. 남은 경기가 10경기라면 몇 경기를 이겨야 승률이 65% 가 되는가?
	- 최종 승리할 경기 30경기의 65% - 지난 승리한 경기 20경기의 60% `percentage / value * 100`
		- `((20 + 10) * 65 / 100) - (20 * 60 / 100) = 7.5`
	
1. 어떤 야구선수가 500타석, 타율 0.290 일때, 대략 남은 16타석에서 타율을 0.300 으로 만들기 위해서는 안타를 몇 개 더 쳐야 하나?
	- 최종 타율 516타석의 30% - 지난 타율 500타석의 29% `percentage / value * 100`
		- `((500 + 16) * 30 / 100) - (500 * 29 / 100) = 9.8`
	
1. 혼합액 10갤런은 70%는 용액A, 30%는 용액B 이다. 용액 B 비율을 42% 로 증가시키려면 B 를 얼마나 더 넣어야 하나?
	- 용액B 의 30% 를 추가적 12% 증가시킴 `percentage / value * 100`, `value * (1 + add percentage / 100)` 을 합성
		- `(10 * 30 / 100) * (1 + 12 / 100) = 3.36`
		
1. 부모 나이가 아이보다 25살 많다면 아이가 몇 살 때 부모 나이가 아이보다 2배 많아지는가?
	- `x + 25 = 2x`
		- `x - 2x = -25`
			- `-x = -25`
				- `x = 25`
	- 세배는?
		- `x + 25 = 3x`
			- `x - 3x = -25`
				- `-2x = -25`
					- `x = 12.5`

1. 고속도로에서는 일반도로보다 두배 빠르다. 하지만, 고속도로에 들어가고 나오는데 15분이 걸린다. 얼마 이상의 거리를 가야 고속도로로 이득을 볼 수 있는가?
	

# 지수법칙

## 제곱과 제곱근
 
- ![](http://www.forkosh.com/mathtex.cgi?{a}^{2}=2)
- ![](http://www.forkosh.com/mathtex.cgi?a=\sqrt{2})

## 지수의 연산

- a<sup>m</sup>+a<sup>n</sup>=a<sup>m+n</sup>
- (a<sup>m</sup>)<sup>n</sup> = a<sup>mn</sup>
- (ab)<sup>n</sup> = a<sup>n</sup>b<sup>n</sup>


# 곱셈공식

- (a + b)<sup>2</sup> = a<sup>2</sup> + 2ab + b<sup>2</sup> `Math.pow(a + b, 2) = Math.pow(a, 2) + (2 * a * b) + Math.pow(b, 2)`
- (a - b)<sup>2</sup> = a<sup>2</sup> - 2ab + b<sup>2</sup>
- (a + b)(a - b) = a<sup>2</sup> - b<sup>2</sup>
- (a + b + c)<sup>2</sup> = a<sup>2</sup> + b<sup>2</sup> + c<sup>2</sup> + 2ab + 2bc + 2ca
- (x + a)(x + b) = x<sup>2</sup> + (a + b)x + ab
- (a + b)<sup>3</sup> = a<sup>3</sup> + 3a<sup>2</sup>b + 3ab<sup>2</sup> + b<sup>3</sup>
- (a - b)<sup>3</sup> = a<sup>3</sup> - 3a<sup>2</sup>b + 3ab<sup>2</sup> - b<sup>3</sup>
- (a + b)(a<sup>2</sup> - ab + b<sup>2</sup>) = a<sup>3</sup> + b<sup>3</sup>
- (a - b)(a<sup>2</sup> + ab + b<sup>2</sup>) = a<sup>3</sup> - b<sup>3</sup>
- (a + b + c)(a<sup>2</sup> + b<sup>2</sup> + c<sup>2</sup> - ab - bc - ca) = a<sup>3</sup> + b<sup>3</sup> + c<sup>3</sup> - abc
- (x + a)(x + b)(x + c) = x<sup>3</sup> + (a + b + c)x<sup>2</sup> + (ab + bc + ca)x + abc

- a<sup>2</sup> + b<sup>2</sup> = (a + b)<sup>2</sup> - 2ab
- a<sup>2</sup> + b<sup>2</sup> + c<sup>2</sup> = (a + b + c)<sup>2</sup> - 2(ab + bc + ca)
 
 






]]></content>
</article>



<article>
<title><![CDATA[읽어야 하는 수학책들]]></title>
<url><![CDATA[/Math/%E1%84%8B%E1%85%B5%E1%86%B0%E1%84%8B%E1%85%A5%E1%84%8B%E1%85%A3%20%E1%84%92%E1%85%A1%E1%84%82%E1%85%B3%E1%86%AB%20%E1%84%89%E1%85%AE%E1%84%92%E1%85%A1%E1%86%A8%E1%84%8E%E1%85%A2%E1%86%A8%E1%84%83%E1%85%B3%E1%86%AF.html]]></url>
<content><![CDATA[# 접근

일단은 방정식, 지수, 행렬, 연립 등을 다루는 대수학을 먼저 배울 필요가 있다.

수학적 문제들을 식으로 정리하고, 정리된 식을 프로그래밍 코드로 전환 할 수 있는 능력이 있든 말든 해야 나머지가 어떻게든 된다.

# 목차

1. 이야기로 쉽게 배우는 대수학
	1. 수의 성질에 대한 법칙
	1. 방정식
	1. 음수와 정수
	1. 분수와 유리수
	1. 지수
	1. 근과 실수
	1. 대수식
	1. 함수
	1. 그래프
	1. 연립방정식
	1. 이차방정식
	1. 원과 타원, 그리고 포물선
	1. 다항식
	1. 급수
	1. 순열, 조합, 그리고 이항정리
	1. 수학적 귀납법
	1. 지수함수와 로그함수
	1. 연립방정식과 행렬
	1. 허수
1. 이야기로 쉽게 배우는 삼각함수
	1. 각도와 삼각형 
	1. 직각삼각형 문제를 풀다 
	1. 삼각함수: 사인(sin) 코사인(cos), 탄젠트(tan) 
	1. 삼각함수의 응용 
	1. 호도법(라디안 각도) 
	1. 삼각함수 항등식 
	1. 사인법칙과 코사인법칙 
	1. 삼각함수 그래프 
	1. 파동 
	1. 삼각함수의 역함수 
	1. 극 좌표계 
	1. 복소수 
	1. 좌표계 회전 변환과 원뿔 곡선 
	1. 구면 삼각법 
	1. sin x와 cos x의 다항식 근사
1. 게임 프로그래머를 위한 기초 수학과 물리
	1. 점과 직선 Points and Lines
		1. 점을 정의하는 법
		1. 직선을 정의하는 법
		1. 직선의 성질
		1. 충돌 검출에의 응용 
	1. 기하학적 기초 Geometry Snippets 
		1. 두 점 사이의 거리 
		1. 포물선 
		1. 원과 구 
		1. 충돌 검출에의 응용 
	1. 삼각함수의 기초 Trigonometry Snippets 
		1. 도 vs 라디안 
		1. 삼각함수 
		1. 삼각함수 항등식 
	1. 벡터 연산 Vector Operations 
		1. 벡터 vs 스칼라 
		1. 극좌표 vs 데카르트좌표 
		1. 벡터의 합과 차 
		1. 벡터의 스칼라 곱 
		1. 벡터의 내적 
		1. 벡터의 외적 
	1. 행렬 연산 Matrix Operations 
		1. 행렬의 상동 
		1. 행렬의 합과 차 
		1. 행렬의 스칼라 곱 
		1. 행렬의 곱 
		1. 전치행렬 
	1. 변환 Transformations 
		1. 평행이동 
		1. 척도 변환 
		1. 회전 
		1. 변환의 결합 
	1. 단위 변환 Unit Conversions 
		1. 미터 단위계 
		1. 단위계 사이의 변환 
		1. 컴퓨터 단위계 
	1. 일차원 운동 Motion in One Dimension 
		1. 속력과 속도 
		1. 가속도 
		1. 운동방정식 
	1. 일차원 운동의 미분 해석 Derivative Approach to Motion in One Dimension 
		1. 속도와 미분 
		1. 가속도와 2계 미분 
	1. 이차원과 삼차원 운동 Motion in Two and Three Dimension 
		1. 벡터의 사용 
		1. 투사체 
	1. 뉴턴의 운동법칙 Newton`s Laws 
		1. 힘 
		1. 힘이 물체의 운동에 미치는 영향과 뉴턴의 운동법칙 적용 
	1. 에너지 Energy 
		1. 일과 운동에너지 
		1. 퍼텐셜 에너지와 보존 법칙 
	1. 운동량과 충돌 Momentum and Collisions 
		1. 고정된 물체의 충돌 
		1. 운동량과 충격량의 정의 
		1. 충돌 모델 
	1. 회전 운동 Rotational Motion 
		1. 원 운동 
		1. 회전 역학
1. Head First Physics
	1. 물리학자처럼 생각하기 
		 - 일상 생활에서 우리는 항상 물리를 경험하며 살고 있습니다. 하지만 실제로 물리를 배운다고 생각하면 가끔씩 탈출구 없는 깊은 나락으로 빠져드는 것처럼 느껴질 지도 모릅니다. 하지만 너무 걱정하지 마세요. 이번 장에서는 물리학자처럼 생각하는 방법을 배우게 될 것입니다. 문제점에 한 걸음 다가가서 복잡한 문제를 훨씬 쉽게 만드는'특이점'과 패턴을 파악하기 위해 여러분의 직감을 활용하세요. 문제의 한 가운데 서게 되면, 어느덧 해결책에 한 걸음 다가 선 자신을 발견할 수 있을 것입니다. 
	1. 모든 것에는 의미가 있습니다 
		- 물리학은 크기를 나타내는 측정값에 기반을 두고 있습니다. 이 장에서 여러분은 실수를 미연에 방지하기 위해 단위와 근사치를 사용하는 방법을 배우게 될 것이며, 또한 오차라는 것이 문제가 되지 않음을 알게 될 것입니다. 이 장을 마칠 때쯤에 여러분은 언제 측정값이 의미를 가지는지 또한 측정값에서 크기가 어떤 의미를 가지는지를 알게 될 것입니다. 
	1. 과학 표기법, 면적 그리고 부피 
		- 이번 장에서 여러분은 과학 표기법으로 표현된 범상치 않은 숫자들을 다루고 큰 숫자들의 반올림 처리가 마지막에 0만 많아진다는 의미가 아님을 알게 될 것입니다. 또한 면적과 부피의 단위도 다루게 될 텐데, 이 경우에 특히 과학 표기법이 앞으로 다가올 수많은 고뇌의 시간을 벗어나게 해 줄 것입니다. 
	1. 방정식과 그래프 
		- 여러분은 이미 물리학자처럼 생각하기 위한 여정에서 좋은 출발을 했지만, 이제는 생각을 공유할 때가 되었습니다. 이 장에서는 여러분이 학습한 물리학 개념과 실험에 대해 천 마디의 말보다 나은 단 한 장의 그림으로 표현 가능한 그래프와 방정식이라는 새로운 언어를 배우는 첫 삽을 뜨게 될 것입니다. 보이는 것을 믿으세요. 
	1. 방향 처리 
		- 여러분은 이제 여러 가지 물리학 슈퍼파워를 가지고 있습니다: 그래프와 방정식도 마스터했고, 정답의 크기가 얼마나 될지도 가늠할 수 있습니다. 하지만, 크기가 전부는 아닙니다. 이 장에서는 복잡하게 보이는 문제를 해결할 수 있는 지름길을 찾는 데 도움이 되는 방향을 제시하는 벡터에 대해 배우게 될 것입니다. 
	1. 변위, 속도 그리고 가속도 
		- 물체가 낙하할 때, 변위, 속도 그리고 가속도 모두 중요합니다. 어떻게 하면 하나도 놓치지 않고 이 모든 것에 집중할 수 있을까요? 이번 장에서는 앞에서 배운 모든 것(변위, 속도, 가속도)을 하나 혹은 두 개의 방정식으로 통합하기 위한 준비과정으로써 실험, 그래프 그리고 기울기를 계산하는 방법에 대해 배울 것입니다. 
	1. 운동방정식 1 
		- 지금까지 실험을 하고, 그 결과를 바탕으로 그래프를 그려 방정식을 만들어 냈습니다. 하지만, 가끔 그래프는 직선형태가 아니어서, 여러분은 벽에 부딪칠 수밖에 없었습니다. 이 장에서는 곡선 형태인 낙하하는 물체의 변위-시간 그래프의 핵심이 되는 운동방정식을 유도해 내기 위해 치환이라는 수학적인 기술을 배우게 될 것입니다. 또한 정답이 올바른지 알아내기 위해 여러분의 직감을 사용하는 법도 배울 거예요. 
	1. 운동방정식 2 
		- 낙하하는 물체에 대해서는 이제 도가 텄을 거예요. 아주 잘했습니다. 하지만 나머지는 어떨까요? 하늘 위로 솟아 오르는 물체는 다룰 수 있나요? 이 장에서는 어떤 것이든 처리할 수 있는 세 번째 핵심 운동방정식을 여러분의 것으로 만들게 될 거예요. 또한 불가능한 임무를 가능하게 만들어 버리는 대칭에 대해서도 배울 것입니다. 
	1. 삼각형, 삼각법 그리고 궤적 
		- 현실에서는 물체가 올라가거나 내려가지 않고 옆길로 새는 경우가 많죠. 그렇다고 걱정할 필요는 없어요. 이 장에서는 아무리 복잡해 보이는 문제라도 직각삼각형을 이용해서 간단히 처리할 수 있는 삼각법을 배우게 될 테니까요. 
	1. 운동량 보존 
		- 지금까지 여러분은 이미 운동하고 있는 물체들을 다루는 방법을 배웠습니다. 그렇다면 최초로 운동을 하게 만드는 것은 무엇일까요? 물체를 밀면 움직입니다. 하지만 어떻게 움직일까요? 이 장에서는 뉴턴의 법칙 중 일부 내용을 학습할 것이고, 학습 후에는 관성에 대해 정통해질 것입니다. 또한 운동량이 무엇이며 그것이 보존되는 이유, 그리고 문제를 해결하기 위해 이를 어떻게 사용하는지 배우게 될 거예요. 
	1. 무게와 수직항력 
		- 이번 장에서, 여러분은 운동량 보존을 이용해서 뉴턴의 제2법칙인 Fnet = ma 이라는 중요한 방정식을 유도할 것입니다. 뉴턴의 제3법칙에서 쌍을 이루는 힘과 이를 결합해서 자유물체도표를 그리면, 운동하는 모든 물체를 다룰 수 있을 것입니다. 또한 질량과 무게가 다른 뜻이라는 사실을 배울 것이며, 여러분의 의견을 뒷받침하기 위해 수직항력을 자유자재로 사용할 수 있을 거예요. 
	1. 힘, 운동량, 마찰, 충격량 사용하기 
		- 여러분은 이미 운동방정식, 성분 벡터, 운동량 보존, 자유물체도표 그리고 뉴턴의 법칙을 알고 있습니다. 이번 장에서는 훨씬 더 범위가 넓은 물리학 문제를 해결하기 위해 이 모든 것을 조합해서 적용하는 법을 배울 것입니다. 때로는 이전에 봤던 내용과 비슷한 문제가 나올 수 있습니다. 또한 마찰을 다루는 방법과 마찰이 충격량에 영향을 주는 이유를 배움으로써 좀 더 현실감을 느낄 수 있을 거예요. 
	1. 토크와 일 
		- 이 장에서는 자신이 갖고 있는 힘보다 훨씬 큰 힘을 발휘할 수 있는 지레를 사용하여 토크를 다루는 방법에 대해 배울 것입니다. 하지만 세상엔 공짜가 없어요. 에너지는 항상 보존되며, 물체를 들어올림으로써 중력 위치에너지를 물체에 제공하기 위해 여러분이 한 일의 양은 변하지 않습니다.
	1. 에너지 보존 
		- 지금까지 여러분은 운동방정식, 힘, 성분 벡터를 이용해서 문제를 해결해 왔습니다. 아주 잘했어요. 가끔 복잡한 계산을 하느라 시간을 허비한 것을 제외하면 말이죠. 이번 장에서는 복잡하게 보이는 문제를 상대적으로 쉽게 해결할 수 있는 에너지 보존을 사용하는 방법에 대해 배우게 될 것입니다. 
	1. 장력, 도르래 그리고 문제 해결 
		- 지금까지는 힘, 자유물체도표, 에너지 보존을 사용해 문제를 해결했습니다. 이번 장에서는 로프, 도르래, 그리고 장력 등을 사용해서 한 단계 더 나아갈 것입니다. 마찬가지로, 또한, 복잡한 상황을 타개해가는 길을 찾는 데 도움을 주는 친숙한 이정표를 찾는 연습도 하게 될 거예요. 
	1. 원운동 1 
		- 이번 장에서는 원을 해부해서 반지름과 원주가 원주율과 어떤 관계가 있는지를 포함해 원운동에 대한 특강을 할 거예요. 진동수와 주기를 다룬 후에는 선형운동을 각운동으로 변환할 것입니다. 일단 각을 측정하기 위한 라디안 사용법을 배우면 이러한 변환을 쉽게 처리할 수 있을 겁니다. 
	1. 트랙에서 벗어나지 마세요 
		- 원형 경로를 따라 물체를 움직이려고 하는데 구심력이 충분치 않을 경우 정확히 이런 상황이 발생하죠. 이번 장에서는 구심력은 무엇이며 트랙을 벗어나지 않고 움직일 수 있는 방법을 배우게 될 것입니다. 또한 헤드 퍼스트 우주정거장에서 발생한 심각한 문제를 해결하게 될 것입니다. 페이지를 넘기고 시작해 봅시다. 
	1. 중력과 궤도 
		- 하지만, 여러분의 발이 땅을 떠나면 인력은 어떻게 될까요? 이번 장에서는 중력의 역제곱 법칙과 무한대 너머로 여행하기 위해 중력퍼텐셜의 힘을 이용하는 방법을 배울 것입니다. 집에 더 가까이 가기 위해 궤도를 다루는 법도 배워야 할 거예요. 그리고 여러분의 커뮤니케이션 능력을 다듬는 법도 알게 될 거예요. 
	1. 진동 1 
		- 지금까지 여러분은 하늘에서 벌어지는 원운동을 배웠습니다. 물론 땅에서 일어나는 경우도 비슷하죠. 이번 장에서는 사인과 코사인의 정의를 확장하는 방법을 배우고, 삼각법과 원운동을 함께 다룰 것입니다. 일단 학습하고 나면, 원 주위를 도는 그 어떤 것이라도 쉽게 다룰 수 있을 거예요. 
	1. 진동 2 
		- 이 장은 진동에 관한 내용을 다루고 있으며, 여러분이 큰 그림을 볼 수 있도록 도와줄 거예요. 수차례 되풀이할 필요없는 궁극적인"하나의 규칙"을 얻기 위해 용수철과 단순조화운동을 하는 진자를 다룸으로써, 그래프, 방정식, 힘, 에너지 보존 그리고 주기 운동에 관해 알고 있는 모든 사실을 한 곳에 모을 것입니다. 
	1. 물리학자처럼 생각하기 
		- 이 책을 통해 일상생활과 밀접히 관련한 물리학에 대해 배웠으며 더불어 문제 해결 능력을 습득했습니다. 마지막 장에서는 지구 중심을 통과하는 끝없는 구멍으로의 여정에서 마주쳤던 문제들을 파헤치기 위해 새로운 물리학 도구를 사용하게 될 것입니다. 핵심은 다음 질문에 있습니다: " 모르는 것을 알아내기 위해 알고 있는 사실을 어떻게 이용할 수 있을까요?]]></content>
</article>




</articles>
</xml>